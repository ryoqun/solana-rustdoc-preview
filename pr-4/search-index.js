var searchIndex = JSON.parse('{\
"solana_runtime":{"doc":"","t":"","n":["account_info","account_overrides","account_rent_state","account_storage","accounts","accounts_background_service","accounts_cache","accounts_db","accounts_file","accounts_hash","accounts_index","accounts_index_storage","accounts_update_notifier_interface","active_stats","ancestors","ancient_append_vecs","append_vec","bank","bank_client","bank_creation_freezing_progress","bank_forks","bank_utils","block_cost_limits","blockhash_queue","bucket_map_holder","bucket_map_holder_stats","builtins","cache_hash_data","cache_hash_data_stats","commitment","contains","cost_model","cost_tracker","epoch_accounts_hash","epoch_stakes","genesis_utils","hardened_unpack","in_mem_accounts_index","inline_spl_associated_token_account","inline_spl_token","inline_spl_token_2022","installed_scheduler_pool","loader_utils","message_processor","non_circulating_supply","nonce_keyed_account","prioritization_fee","prioritization_fee_cache","pubkey_bins","read_only_accounts_cache","rent_collector","rent_debits","rent_paying_accounts_by_partition","rolling_bit_field","root_bank_cache","runtime_config","secondary_index","serde_snapshot","shared_buffer_reader","snapshot_archive_info","snapshot_config","snapshot_hash","snapshot_minimizer","snapshot_package","snapshot_utils","sorted_storages","stake_account","stake_history","stake_weighted_timestamp","stakes","static_ids","status_cache","storable_accounts","system_instruction_processor","transaction_batch","transaction_error_metrics","transaction_priority_details","u64_align","verify_accounts_hash_in_background","vote_account","vote_parser","vote_sender_types","vote_transaction","waitable_condvar","AccountInfo","AccountOffsetAndFlags","AppendVec","CACHED_OFFSET","CACHE_VIRTUAL_STORAGE_ID","Cached","Offset","OffsetReduced","PackedOffsetAndFlags","StorageLocation","StoredSize","account_offset_and_flags","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","clone","clone","clone","clone_into","clone_into","clone_into","default","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","example","example","example","example","fmt","fmt","fmt","fmt","from","from","from","from","from_bytes","get_reduced_offset","init","init","init","init","into","into","into","into","into_bytes","is_cached","is_cached","is_offset_equal","is_store_id_equal","is_zero_lamport","is_zero_lamport","is_zero_lamport_or_err","new","new","offset","offset_reduced","offset_reduced_or_err","packed_offset_and_flags","reduced_offset_to_offset","set_is_zero_lamport","set_is_zero_lamport_checked","set_offset_reduced","set_offset_reduced_checked","storage_location","store_id","store_id","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","with_is_zero_lamport","with_is_zero_lamport_checked","with_offset_reduced","with_offset_reduced_checked","AccountOverrides","accounts","borrow","borrow_mut","default","deref","deref_mut","drop","example","from","get","init","into","set_account","set_slot_history","try_from","try_into","type_id","vzip","RentExempt","RentPaying","RentState","Uninitialized","borrow","borrow_mut","check_rent_state","check_rent_state_with_account","deref","deref_mut","drop","eq","equivalent","equivalent","example","fmt","from","from_account","init","into","submit_rent_state_metrics","transition_allowed_from","try_from","try_into","type_id","vzip","data_size","lamports","AccountStorage","AccountStorageIter","AccountStorageMap","AccountStorageReference","AccountStorageStatus","Available","Candidate","Full","ShrinkInProgress","VARIANTS","__Field","__FieldVisitor","__Visitor","__field0","__field1","__field2","all_slots","assert_no_shrink_in_progress","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","equivalent","equivalent","example","example","example","example","example","example","example","example","example","expecting","expecting","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_account_storage_entry","get_slot_storage_entry","get_slot_storage_entry_shrinking_in_progress_ok","id","init","init","init","init","init","init","init","init","initialize","insert","into","into","into","into","into","into","into","into","into_iter","iter","iter","lifetime","map","marker","meta","multiunzip","new","new_storage","new_store","next","old_storage","old_store","remove","serialize","shrink_in_progress_map","shrinking_in_progress","slot","storage","storage","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","visit_bytes","visit_enum","visit_for_abi","visit_for_abi","visit_for_abi","visit_str","visit_u64","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","AccountMeta","AppendVec","FIELDS","StorableAccountsWithHashesAndWriteVersions","StoredAccountInfo","StoredAccountMeta","StoredMeta","StoredMetaWriteVersion","__Field","__FieldVisitor","__Visitor","__field0","__field1","__field2","__field3","__ignore","_phantom","account","accounts","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_account","clone_into","clone_into","clone_into","data","data","data_len","data_len","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","example","example","example","example","example","example","example","example","executable","executable","expecting","expecting","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get","hash","hashes_and_write_versions","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","is_empty","is_zero_lamport","lamports","lamports","len","lifetime","marker","meta","new","new_with_hashes_and_write_versions","offset","offset","owner","owner","pubkey","pubkey","rent_epoch","rent_epoch","sanitize","serialize","set_meta","size","stored_size","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","visit_bytes","visit_for_abi","visit_for_abi","visit_map","visit_seq","visit_str","visit_u64","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write_version","write_version_obsolete","AccountAddressFilter","AccountLocks","Accounts","Exclude","Include","LoadedTransaction","PubkeyAccountSlot","TransactionLoadResult","TransactionProgramIndices","TransactionRent","account_indexes_include_key","account_locks","account_shared_data_from_program","accounts","accounts_db","accumulate_and_check_loaded_account_data_size","accumulate_and_check_scan_result_size","add_root","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calc_scan_result_size","clone","clone_into","collect_accounts_to_store","construct_instructions_account","default","default_for_tests","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","equivalent","equivalent","example","example","example","example","example","example","filter_executable_program_accounts","fmt","fmt","fmt","from","from","from","from","get_requested_loaded_accounts_data_size_limit","hold_range_in_memory","init","init","init","init","insert_new_readonly","into","into","into","into","is_loadable","is_locked_readonly","is_locked_write","load_accounts","load_all","load_by_index_key_with_filter","load_by_program","load_by_program_slot","load_by_program_with_filter","load_largest_accounts","load_lookup_table_addresses","load_slow","load_to_collect_rent_eagerly","load_transaction_accounts","load_while_filtering","load_with_fixed_root","load_with_slot","load_without_fixed_root","lock_account","lock_accounts","lock_accounts_inner","lock_accounts_with_results","lock_readonly","maybe_abort_scan","new","new_empty","new_with_config","new_with_config_for_benches","new_with_config_for_tests","prepare_if_nonce_account","program_indices","readonly_locks","rent","rent_debits","scan_all","scan_slot","store_accounts_cached","store_cached","store_slow_uncached","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unlock_account","unlock_accounts","unlock_readonly","unlock_write","validate_fee_payer","verify_accounts_hash_and_lamports","vzip","vzip","vzip","vzip","write_locks","AbsRequestHandlers","AbsRequestSender","AccountsBackgroundService","BANK_DROP_QUEUE_REPORTER","BANK_DROP_SIGNAL_CHANNEL_REPORT_INTERVAL","CLEAN_INTERVAL_BLOCKS","DroppedSlotsReceiver","DroppedSlotsSender","EpochAccountsHash","INTERVAL_MS","MAX_DROP_BANK_SIGNAL_QUEUE_SIZE","PrunedBankQueueLenReporter","PrunedBanksRequestHandler","RECYCLE_STORE_EXPIRATION_INTERVAL_SECS","SendDroppedBankCallback","Snapshot","SnapshotRequest","SnapshotRequestHandler","SnapshotRequestReceiver","SnapshotRequestSender","SnapshotRequestType","__private_field","__stability","__static_ref_initialize","accounts_package_sender","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","callback","clone","clone","clone","clone_box","clone_into","clone_into","clone_into","cmp_requests_by_priority","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","enqueued","eq","equivalent","equivalent","example","example","example","example","example","example","example","example","example","example","expire_old_recycle_stores","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get_next_snapshot_request","handle_request","handle_snapshot_request","handle_snapshot_requests","handle_snapshot_requests","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","is_snapshot_creation_enabled","join","last_report_time","new","new","new","new_accounts_package_type","pruned_banks_receiver","pruned_banks_request_handler","remove_dead_slots","report","request_type","send_snapshot_request","sender","setup_bank_drop_callback","snapshot_config","snapshot_request_handler","snapshot_request_receiver","snapshot_request_sender","snapshot_request_sender","snapshot_root_bank","stats","status_cache_slot_deltas","t_background","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","SUBMIT_INTERVAL","Stats","StatsManager","borrow","borrow","borrow_mut","borrow_mut","cumulative_runtime","default","deref","deref","deref_mut","deref_mut","drop","drop","example","example","fmt","fmt","from","from","init","init","into","into","max_runtime","maybe_submit","mean_runtime","min_runtime","new","num_iterations","previous_submit","record","record_and_maybe_submit","stats","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","AccountsCache","CachedAccount","CachedAccountInner","SlotCache","SlotCacheInner","account","add_root","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cache","cache","cached_frozen_slots","clear_roots","contains","contains_any_slots","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","example","example","example","fetch_max_flush_root","fmt","fmt","fmt","from","from","from","get_all_pubkeys","get_cloned","hash","hash","include_slot_in_hash","init","init","init","insert","into","into","into","is_frozen","is_frozen","load","mark_slot_frozen","max_flushed_root","maybe_unflushed_roots","new_inner","num_slots","pubkey","pubkey","remove_slot","remove_slots_le","report_size","report_slot_store_metrics","same_account_writes","same_account_writes_size","set_max_flush_root","size","size","slot","slot_cache","store","total_bytes","total_size","total_size","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unique_account_writes_size","unique_account_writes_size","vzip","vzip","vzip","ABSURD_CONSECUTIVE_FAILED_ITERATIONS","ACCOUNTS_DB_CONFIG_FOR_BENCHMARKS","ACCOUNTS_DB_CONFIG_FOR_TESTING","ACCOUNTS_HASH_CACHE_DIR","ACCOUNTS_STACK_SIZE","ANCIENT_APPEND_VEC_DEFAULT_OFFSET","AccountInfoAccountsIndex","AccountShrinkThreshold","AccountSlots","AccountStorageEntry","AccountsAddRootTiming","AccountsDb","AccountsDbConfig","AccountsHashVerificationError","AccountsStats","AliveAccounts","AncientSlotPubkeys","AncientSlotPubkeysInner","Append","AppendVecId","AppendVecScan","AtomicAppendVecId","BankHashStats","BinnedHashData","Cache","Cached","Cached","Cached","CalcAccountsHashDataSource","CalcAccountsHashFlavor","CleanAccountsStats","CleanKeyTimings","CreateAncientStorage","CurrentAncientAppendVec","DEFAULT_ACCOUNTS_SHRINK_OPTIMIZE_TOTAL_SPACE","DEFAULT_ACCOUNTS_SHRINK_RATIO","DEFAULT_ACCOUNTS_SHRINK_THRESHOLD_OPTION","DEFAULT_FILE_SIZE","DEFAULT_NUM_DIRS","DEFAULT_NUM_THREADS","DIRTY_STORES_CLEANING_THRESHOLD","Default","EXPIRATION_TTL_SECONDS","FIELDS","FillerAccountsConfig","FixedMaxRoot","FlushStats","Full","GenerateIndexAccountsMap","GenerateIndexTimings","GetUniqueAccountsResult","INCLUDE_SLOT_IN_HASH_IRRELEVANT_APPEND_VEC_OPERATION","INCLUDE_SLOT_IN_HASH_IRRELEVANT_CHECK_HASH","INCLUDE_SLOT_IN_HASH_TESTS","INC_NEW_COUNTER","INC_NEW_COUNTER","INC_NEW_COUNTER","INC_NEW_COUNTER","INC_NEW_COUNTER","INC_NEW_COUNTER","INC_NEW_COUNTER","INC_NEW_COUNTER","INC_NEW_COUNTER","INC_NEW_COUNTER","INC_NEW_COUNTER","INDEX_CLEAN_BULK_COUNT","INIT_HOOK","INIT_HOOK","INIT_HOOK","INIT_HOOK","INIT_HOOK","INIT_HOOK","INIT_HOOK","INIT_HOOK","INIT_HOOK","INIT_HOOK","INIT_HOOK","Ignore","IncludeSlot","IncludeSlotInHash","Incremental","IndexAccountMapEntry","IndexForTests","IndexGenerationInfo","IndividualStore","IrrelevantAssertOnUse","LIMIT","LatestAccountsIndexRootsStats","LoadAccountsIndexForShrink","LoadHint","LoadZeroLamports","LoadedAccount","LoadedAccountAccessor","MAX_ITEMS_PER_CHUNK","MAX_READ_ONLY_CACHE_DATA_SIZE","MAX_RECYCLE_STORES","MismatchedAccountsHash","MismatchedTotalLamports","MissingAccountsHash","MultiThreadProgress","None","OUTER_CHUNK_SIZE","PAGE_SIZE","PUBKEY_BINS_FOR_CALCULATING_HASHES","Pack","PubkeysRemovedFromAccountsIndex","PurgeStats","ReclaimResult","RecycleStores","RemoveSlot","RemoveUnrootedSlotsSynchronization","SCAN_SLOT_PAR_ITER_THRESHOLD","SHRINK_COLLECT_CHUNK_SIZE","ScanResult","ScanState","ScanStorageResult","ShrinkAncientStats","ShrinkCandidates","ShrinkCollect","ShrinkCollectAliveSeparatedByRefs","ShrinkCollectRefs","ShrinkStats","ShrinkStatsSub","SlotIndexGenerationInfo","SlotOffsets","SplitAncientStorages","Storage","StorageSizeAndCount","StorageSizeAndCountMap","Storages","StoreAccountsTiming","StoreReclaims","StoreTo","StoreUsageInfo","Stored","Stored","Stored","TotalSpace","UNREF_ACCOUNTS_BATCH_SIZE","Unspecified","VerifyAccountsHashAndLamportsConfig","Versioned","WRITE_CACHE_LIMIT_BYTES_DEFAULT","__Field","__FieldVisitor","__Visitor","__field0","__field1","__field2","__field3","__field4","__ignore","_calculate_accounts_hash_from_storages","_index_entries_being_shrunk","account_indexes","account_matches_owners","account_matches_owners","accounts","accounts","accounts_cache","accounts_data_len","accounts_data_len","accounts_data_len_dedup_time_us","accounts_delta_hashes","accounts_hash_cache_path","accounts_hash_complete_oldest_non_ancient_slot","accounts_hashes","accounts_index","accounts_loaded","accounts_removed","accounts_update_notifier","accum","accumulate","accumulate","accumulate","active_stats","add","add","add","add_account","add_entries","add_entry","add_root","add_uncleaned_pubkeys_after_shrink","addref_accounts_failed_to_shrink_ancient","aligned_total_bytes","alive_accounts","alive_accounts","alive_accounts","alive_accounts","alive_accounts","alive_accounts","alive_bytes","alive_bytes","alive_bytes","alive_bytes","alive_bytes","alive_ratio","alive_total_bytes","all_accounts","all_are_zero_lamports","all_are_zero_lamports","all_slots_in_storage","amount_to_top_off_rent","amount_to_top_off_rent","ancestors","ancient_append_vec_offset","ancient_append_vec_offset","ancient_append_vecs_shrunk","ancient_scanned","ancient_slot_count","ancient_slots","append_vec","append_vec_id","apply_offset_to_slot","approx_store_count","approx_stored_count","assert_safe_squashing_accounts_hash","assert_stakes_cache_consistency","assert_stakes_cache_consistency","background_hasher","bank_hash_stats","bank_progress","bin_calculator","bin_range","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bulk_assign_write_version","bytes","bytes_removed","bytes_written","cache_us","calc_accounts_to_combine","calc_alive_ancient_historical_roots","calc_ancient_slot_info","calc_delete_dependencies","calc_stored_meta","calculate_accounts_delta_hash","calculate_accounts_hash","calculate_accounts_hash_from_index","calculate_accounts_hash_from_storages","calculate_accounts_hash_with_verify","calculate_incremental_accounts_hash","capacity","capacity","capacity","check_and_get_loaded_account","checked_iterative_sum_for_capitalization","checked_sum_for_capitalization","chunk_count","clean_accounts","clean_accounts_for_tests","clean_accounts_older_than_root","clean_accounts_stats","clean_dead_slot_us","clean_dead_slots_from_accounts_index","clean_old_root_reclaim_us","clean_old_root_us","clean_stored_dead_slots","clean_stored_dead_slots_us","clean_unref_from_storage_us","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cluster_type","collect","collect","collect","collect_delta_keys_us","collect_sort_filter_ancient_slots","collect_uncleaned_slots_up_to_slot","combine_ancient_slots","combine_ancient_slots_packed","combine_ancient_slots_packed_internal","combine_multiple_slots_into_one_at_startup","combine_one_store_into_ancient","compute_hash","config","const_default","construct_candidate_clean_keys","count","count","count","count_and_status","create_ancient_append_vec","create_ancient_storage","create_ancient_storage","create_and_insert_store","create_and_insert_store_elapsed","create_and_insert_store_elapsed_us","create_and_insert_store_with_paths","create_drop_bank_callback","create_if_necessary","create_store","create_store_count","current_slot","data","dead_accounts","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default_for_tests","default_with_accounts_index","delta_hash_accumulate_time_total_us","delta_hash_num","delta_hash_scan_time_total_us","delta_insert_us","delta_key_count","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","dirty_ancient_stores","dirty_pubkeys_count","dirty_store_processing_us","dirty_stores","do_flush_slot_cache","do_load","do_load_with_populate_read_cache","do_reset_uncleaned_roots","do_shrink_slot_store","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop_or_recycle_stores","drop_storage_entries_elapsed","drop_storage_entries_elapsed","dropped_stores","entries","entry_count","epoch_accounts_hash_manager","epoch_schedule","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","executable","exhaustively_verify_refcounts","exhaustively_verify_refcounts","exhaustively_verify_refcounts","expected_cluster_type","expecting","expecting","expire_old_entries","expire_old_recycle_stores","external_purge_slots_stats","file_size","file_size","filler_account_slots_remaining","filler_account_suffix","filler_account_suffix","filler_accounts_config","filler_accounts_config","filler_accounts_enabled","filler_accounts_per_slot","filler_prefix_bytes","filler_rent_partition_prefix_bytes","filler_unique_id_bytes","filter","filter","filter_zero_lamport_clean_for_incremental_snapshots","find_storage_candidate","find_unskipped_slot","finish_combine_ancient_slots_packed_internal","first_caller","first_chunk_start","first_non_ancient_slot","flush","flush_accounts_cache","flush_read_only_cache_for_tests","flush_rooted_accounts_cache","flush_slot_cache","flush_slot_cache_with_clean","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","found_account","found_account","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","full_accounts_hash_cache_path","generate_index","generate_index_for_slot","get_account_accessor","get_accounts_delta_hash","get_accounts_hash","get_accounts_hash_complete_oldest_non_ancient_slot","get_accum","get_accum","get_ancient_slots","get_bank_hash_stats","get_cache_hash_data","get_filler_account","get_filler_account_pubkey","get_filler_account_pubkeys","get_incremental_accounts_hash","get_keys_to_unref_ancient","get_loaded_account","get_many_refs_pubkeys","get_oldest_slot_within_one_epoch_prior","get_one_epoch_old_slot_for_hash_calc_scan","get_path","get_prior_root","get_pubkey_hash_for_slot","get_roots_less_than","get_slot_range","get_snapshot_storages","get_sorted_potential_ancient_slots","get_starting_slot_from_normal_chunk","get_storage_to_move_to_ancient_append_vec","get_store_for_shrink","get_stored_account_meta","get_temp_accounts_paths","get_unique_accounts_from_storage","get_unique_accounts_from_storage_for_combining_ancient_slots","get_unique_accounts_from_storage_for_shrink","geyser_plugin_utils","handle_dropped_roots_for_ancient","handle_reclaims","handle_reclaims_elapsed","handle_reclaims_elapsed","handle_reclaims_elapsed","has_accounts","has_space_available","hash_account","hash_account_data","hash_storage_info","hashset_to_vec_us","historical_roots_len","id","ignore_mismatch","incremental_accounts_hash_cache_path","incremental_accounts_hashes","index","index_entries_being_shrunk","index_flush_us","index_read_elapsed","index_scan_accounts","index_time","index_us","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init_accum","init_accum","init_gradual_filler_accounts","inner","insert_default_bank_hash_stats","insert_store","insert_time_us","insertion_time_us","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_bank_drop_callback_enabled","is_cached","is_cached","is_candidate_for_shrink","is_chunk_ancient","is_filler_account","is_filler_account_helper","is_shrinking_productive","iter","lamports","last_report","last_report","last_store_report","last_update","latest_accounts_index_roots_stats","len","len","len","lifetime","load","load_account_hash","load_account_into_read_cache","load_accounts_index_for_shrink","load_with_fixed_root","loaded_hash","log_dead_slots","make_min_priority_thread_pool","many_refs","mark_dirty_dead_stores","mark_old_slots_as_dirty","mark_slot_frozen","marker","max_bin_size","max_clean_root","maybe_add_filler_accounts","maybe_throttle_index_generation","maybe_unref_accounts_already_in_ancient","min_bin_size","mismatch_found","my_last_report_count","new","new","new","new","new_existing","new_for_tests","new_for_tests_with_caching","new_single_for_tests","new_single_for_tests_with_caching","new_single_for_tests_with_secondary_indexes","new_storage_entry","new_with_ancient_info","new_with_config","next_id","next_id","non_ancient_slot_count","normal_slot_range","notify_account_at_accounts_update","notify_account_restore_from_snapshot","notify_accounts_hash_calculated_complete","notify_accounts_in_slot","notify_filtered_accounts","num_accounts","num_accounts_rent_paying","num_cached_slots_removed","num_executable_accounts","num_flushed","num_lamports_stored","num_purged","num_removed_accounts","num_slots_shrunk","num_stored_slots_removed","num_updated_accounts","oldest_dirty_slot","one_ref","owner","page_align","paths","populate_duplicate_keys_us","previous_uncleaned_roots_len","print_accounts_stats","print_count_and_status","print_index","process_dead_slots","process_storage_slot","pubkey","pubkey_to_bin_index","pubkeys","purge_accounts_index_elapsed","purge_dead_slots_from_storage","purge_keys_exact","purge_old_accounts_hashes","purge_slot","purge_slot_cache","purge_slot_cache_pubkeys","purge_slot_storage","purge_slots","purge_slots_from_cache_and_store","purge_stats","quarter_thread_count","random_shrink","range","range_scan_accounts","read_index_for_accessor_or_load_slow","read_only_accounts_cache","recycle","recycle_slot_stores","recycle_store_count","recycle_stores","recycle_stores_write_elapsed","recycle_stores_write_elapsed","remove_account","remove_bank_hash_info","remove_bank_hash_infos","remove_cache_elapsed","remove_dead_accounts","remove_dead_accounts_remove_us","remove_dead_accounts_shrink_us","remove_dead_slots_metadata","remove_entry","remove_old_historical_roots","remove_old_stores_shrink","remove_old_stores_shrink_us","remove_storage_entries_elapsed","remove_uncleaned_slots_and_collect_pubkeys","remove_uncleaned_slots_and_collect_pubkeys_up_to_slot","remove_unrooted_slots","remove_unrooted_slots_synchronization","rent_collector","rent_epoch","rent_paying","rent_paying_accounts_by_partition","rent_paying_accounts_by_partition","report","report","report","report","report","report","report","report_delay_secs","report_store_stats","report_store_timings","reset_uncleaned_roots_us","retry_to_get_account_accessor","revisit_accounts_with_many_refs","rewrite_elapsed","rewrite_elapsed_us","rooted_cleaned_count","roots_len","roots_range","safety_checks_elapsed","scan_account_storage","scan_account_storage_no_bank","scan_accounts","scan_single_account_storage","scan_snapshot_stores_with_cache","scan_storages_elapsed","scan_time","scanning_complete","scanning_complete","select_candidates_by_total_usage","sender_bg_hasher","serialize","set_accounts_delta_hash","set_accounts_delta_hash_from_snapshot","set_accounts_hash","set_accounts_hash_from_snapshot","set_accum","set_accum","set_incremental_accounts_hash","set_incremental_accounts_hash_from_snapshot","set_shrink_paths","set_slot","set_slot","set_status","set_storage_count_and_alive_bytes","should_aggressively_flush_cache","should_move_to_ancient_append_vec","should_not_shrink","shrink_all_slots","shrink_ancient_slots","shrink_ancient_stats","shrink_candidate_slots","shrink_candidate_slots","shrink_collect","shrink_paths","shrink_ratio","shrink_slot_forced","shrink_stats","shrink_stats","signal","size","skip_initial_hash_calc","skip_initial_hash_calc","skipped_shrink","slot","slot","slot","slot","slot","slot","slot","slot_and_append_vec","slots_considered","slots_under_contention","sort_slot_storage_scan","sort_time","stakes_cache_check_and_store_us","start_background_hasher","stats","stats_for_rent_payers","status","storage","storage_read_elapsed","storage_size_accounts_map_flatten_us","storage_size_accounts_map_us","storage_size_storages_us","store","store","store_accounts","store_accounts_custom","store_accounts_elapsed","store_accounts_elapsed","store_accounts_frozen","store_accounts_timing","store_accounts_to","store_accounts_unfrozen","store_ancient_accounts","store_append_accounts","store_cached","store_detailed_debug_info","store_find_existing","store_get_slot_store","store_handle_reclaims","store_hash_accounts","store_id","store_num_accounts","store_total_data","store_uncached","store_uncleaned_update","store_update_index","store_us","stored_account","stored_accounts","stored_size","take_account","temp_accounts_hash_cache_path","temp_paths","test_hash_calculation","test_utils","thread_pool","thread_pool_clean","to_account_shared_data","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","total_bytes","total_bytes","total_count","total_data_len","total_duplicate_slot_keys","total_including_duplicates","total_items","total_removed_cached_bytes","total_removed_storage_entries","total_removed_stored_bytes","total_size","total_starting_accounts","total_us","try_available","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_recycle_and_insert_store","try_recycle_store","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ultimate_count","unchecked_scan_accounts","uncleaned_pubkeys","uncleaned_roots_len","unref_accounts","unref_accounts_already_in_storage","unref_pubkeys","unrefed_pubkeys","unrefed_pubkeys","unrooted_cleaned_count","update","update","update_accounts_hash","update_accounts_hash_for_tests","update_bank_hash_stats_from_snapshot","update_incremental_accounts_hash","update_index","update_index_elapsed","update_index_elapsed","update_old_slot_stats","update_shrink_stats","update_storage_info","use_bg_thread_pool","verify_accounts_hash_and_lamports","verify_accounts_hash_in_bg","version","visit_bytes","visit_duplicate_pubkeys_during_startup","visit_for_abi","visit_for_abi","visit_map","visit_seq","visit_str","visit_u64","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_capacity","with_capacity","with_capacity","write_accounts_to_cache","write_accounts_to_storage","write_ancient_accounts","write_ancient_accounts_to_same_slot_multiple_refs","write_cache_limit_bytes","write_cache_limit_bytes","write_one_packed_storage","write_packed_storages","write_version","write_version","written_bytes","zero_lamport_accounts","zero_lamport_accounts_to_purge_after_full_snapshot","shrink_ratio","shrink_ratio","GeyserPluginNotifyAtSnapshotRestoreStats","borrow","borrow_mut","default","deref","deref_mut","drop","elapsed_filtering_us","elapsed_notifying_us","example","from","init","into","notified_accounts","report","skipped_accounts","total_accounts","total_pure_bookeeping","total_pure_notify","try_from","try_into","type_id","vzip","create_test_accounts","update_accounts_bench","ALIGN_BOUNDARY_OFFSET","AccountsFile","AccountsFileIter","AppendVec","account_iter","account_matches_owners","accounts","append_accounts","borrow","borrow","borrow_mut","borrow_mut","capacity","deref","deref","deref_mut","deref_mut","drop","drop","example","example","file_entry","file_name","flush","fmt","from","from","get_account","get_path","init","init","into","into","into_iter","is_empty","len","new","new_from_file","next","offset","remaining_bytes","reset","set_no_remove_on_drop","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","AccountHashesFile","AccountsDeltaHash","AccountsHash","AccountsHashEnum","AccountsHasher","CalcAccountsHashConfig","CalculateHashIntermediate","CumulativeHashesFromFiles","CumulativeOffset","CumulativeOffsets","Excluded","ExtractSliceFromRawData","Full","HashStats","Included","Incremental","IncrementalAccountsHash","MERKLE_FANOUT","MmapAccountHashesFile","SortedDataByPubkey","StorageSizeQuartileStats","THREE_LEVEL_OPTIMIZATION","ZeroLamportAccounts","accounts_in_roots_older_than_epoch","accumulate_account_hashes","ancestors","ancient_append_vecs","append_vec_sizes_older_than_epoch","as_hash","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calc_storage_size_quartiles","calculate_hash","calculate_three_level_chunks","check_hash","checked_cast_for_capitalization","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","collect_snapshots_us","compare_two_hash_entries","compute_merkle_root","compute_merkle_root_from_slices","compute_merkle_root_from_slices_recurse","compute_merkle_root_loop","compute_merkle_root_recurse","count","count_ancient_scans","count_and_writer","cumulative","cumulative_offsets","de_dup_accounts","de_dup_accounts_in_parallel","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","div_ceil","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","epoch_schedule","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","example","example","example","example","example","example","example","example","example","example","example","example","example","example","extract","filler_account_suffix","filler_accounts_enabled","find","find_index","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_files","from_raw","from_raw_2d","get_binned_data","get_item","get_reader","get_slice","get_slice","hash","hash_time_pre_us","hash_time_total_us","hash_total","index","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_filler_account","lamports","log","longest_ancient_scan_us","mark_time_us","max_bin_size","min_bin_size","mmap","new","new","new","num_dirty_slots","num_slots","num_snapshot_storage","oldest_root","pubkey","read","readers","rehash_calc_us","rehash_hash_us","rehash_required","rehash_unnecessary","rent_collector","rest_of_hash_calculation","roots_older_than_epoch","scan_chunks","scan_time_total_us","sort_hashes_by_pubkey","sort_time_total_us","start_offset","storage_size_quartiles","storage_sort_us","store_detailed_debug_info_on_failure","sum_ancient_scans_us","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","total_count","total_count","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unreduced_entries","use_bg_thread_pool","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write","zero_lamport_accounts","zeros_time_total_us","ACCOUNTS_INDEX_CONFIG_FOR_BENCHMARKS","ACCOUNTS_INDEX_CONFIG_FOR_TESTING","Aborted","AccountIndex","AccountIndexGetResult","AccountMap","AccountMapEntry","AccountMapEntryInner","AccountMapEntryMeta","AccountMaps","AccountSecondaryIndexes","AccountSecondaryIndexesIncludeExclude","AccountsIndex","AccountsIndexConfig","AccountsIndexIterator","AccountsIndexRootsStats","AccountsIndexScanResult","BINS_DEFAULT","BINS_FOR_BENCHMARKS","BINS_FOR_TESTING","DiskIndexValue","Entry","FLUSH_THREADS_TESTING","Found","INC_NEW_COUNTER","INC_NEW_COUNTER","INC_NEW_COUNTER","INIT_HOOK","INIT_HOOK","INIT_HOOK","ITER_BATCH_SIZE","IgnoreReclaims","InMemOnly","IndexKey","IndexLimitMb","IndexValue","Indexed","IsCached","KeepInMemory","Limit","LockMapType","LockMapTypeSlice","MapType","None","NotFound","PopulateReclaims","PreAllocatedAccountMapEntry","PreviousSlotEntryWasCached","ProgramId","ProgramId","Raw","ReadAccountMapEntry","RefCount","RootsTracker","ScanConfig","ScanError","ScanResult","ScanSlotTracker","ScanTypes","SlotList","SlotRemoved","SlotSlice","SplTokenMint","SplTokenMint","SplTokenOwner","SplTokenOwner","Unindexed","Unref","Unspecified","UpsertReclaim","ZeroLamport","abort","abort","account_maps","account_maps","active_scans","add_root","add_uncleaned_roots","addref","age","age","ages_to_stay_in_cache","alive_roots","all_alive_roots","allocate","allocate_accounts_index","bin_calculator","bin_calculator","bin_from_bound","bin_start_and_range","bins","bins","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_purge_older_entries","clean_dead_slot","clean_dead_slot_us","clean_rooted_entries","clean_unref_from_storage_us","clear_dirty","clone","clone","clone","clone","clone","clone","clone","clone","clone_bound","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_uncleaned_roots","collect_all_unsorted","collect_all_unsorted","contains","default","default","default","default","default","default","default","default","default","default_for_tests","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","dirty","dirty","do_checked_scan_accounts","do_scan_accounts","do_scan_secondary_index","do_unchecked_scan_accounts","drives","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","end_bin_inclusive","end_bound","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","exclude","flush_threads","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get","get_account_read_entry","get_account_read_entry_with_lock","get_bin","get_hash","get_index_key_size","get_largest_keys","get_newest_root_in_slot_list","get_next_original_root","get_rooted_entries","get_rooted_from_list","get_startup_remaining_items_to_flush_estimate","handle_dead_keys","hash","historical_roots","historical_roots_len","hold_range_in_memory","hold_range_in_memory","include_key","index_limit_mb","index_scan_accounts","indexes","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","insert_new_if_missing_into_primary_index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_account_map_entry","into_iter","is_aborted","is_alive_root","is_cached","is_disk_index_enabled","is_empty","is_finished","is_removed","is_removed","is_uncleaned_root","is_zero_lamport","is_zero_lamport","iter","keys","keys","latest_slot","log_secondary_indexes","mark_removed","max_distance_to_min_scan_slot","max_root_inclusive","meta","min_alive_root","min_alive_root","min_ongoing_scan_root","min_ongoing_scan_root_from_btree","new","new","new","new","new","new","new_clean","new_dirty","next","num_alive_roots","ongoing_scan_roots","ouroboros_impl_read_account_map_entry","populate_and_retrieve_duplicate_keys_from_startup","previous_uncleaned_roots","previous_uncleaned_roots_len","program_id_index","provide","purge_exact","purge_older_root_entries","purge_secondary_indexes_by_inner_key","range","range_scan_accounts","recreate_with_abort","ref_count","ref_count","ref_count_from_storage","remove_old_historical_roots","removed_bank_ids","rent_paying_accounts_by_partition","reset_uncleaned_roots","rooted_cleaned_count","roots_added","roots_len","roots_range","roots_removed","roots_tracker","scan","scan_accounts","scan_results_limit_bytes","scan_results_limit_bytes","set_age","set_dirty","set_startup","slot_list","slot_list_mut","spl_token_mint_index","spl_token_owner_index","start_bin","start_bound","started_from_validator","storage","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_exchange_age","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unchecked_scan_accounts","uncleaned_roots","uncleaned_roots_len","uncleaned_roots_len","unref","unrooted_cleaned_count","update_secondary_indexes","update_spl_token_secondary_indexes","upsert","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","bank_id","slot","BorrowedFields","BorrowedMutFields","Heads","ReadAccountMapEntry","ReadAccountMapEntryAsyncBuilder","ReadAccountMapEntryAsyncSendBuilder","ReadAccountMapEntryAsyncSendTryBuilder","ReadAccountMapEntryAsyncTryBuilder","ReadAccountMapEntryBuilder","ReadAccountMapEntryTryBuilder","_consume_template_type_t","_consume_template_type_t","_consume_template_type_t","addref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_owned_entry","borrow_slot_list_guard","build","build","build","check_if_okay_according_to_checkers","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","example","example","example","example","example","example","example","example","example","example","fmt","from","from","from","from","from","from","from","from","from","from","from_account_map_entry","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into_heads","new","new_async","new_async_send","owned_entry","owned_entry","owned_entry","owned_entry","owned_entry","owned_entry","owned_entry","owned_entry","owned_entry","ref_count","slot_list","slot_list_guard","slot_list_guard","slot_list_guard_builder","slot_list_guard_builder","slot_list_guard_builder","slot_list_guard_builder","slot_list_guard_builder","slot_list_guard_builder","try_build","try_build","try_build","try_build_or_recover","try_build_or_recover","try_build_or_recover","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_new","try_new_async","try_new_async_send","try_new_or_recover","try_new_or_recover_async","try_new_or_recover_async_send","type_asserts","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with","with_mut","with_owned_entry","with_slot_list_guard","with_slot_list_guard_mut","AccountsIndexStorage","BgThreads","Normal","Startup","Startup","StartupWithExtraThreads","_bg_threads","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","example","example","example","exit","exit","fmt","from","from","from","get_startup_remaining_items_to_flush_estimate","handles","in_mem","init","init","init","into","into","into","new","new","num_threads","set_startup","shrink_to_fit","startup_worker_threads","storage","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","wait","AccountsUpdateNotifier","AccountsUpdateNotifierInterface","notify_account_restore_from_snapshot","notify_account_update","notify_end_of_restore_from_snapshot","ActiveStatGuard","ActiveStatItem","ActiveStats","Clean","Flush","Hash","Shrink","SquashAncient","activate","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clean","clone","clone_into","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","example","example","example","flush","fmt","fmt","from","from","from","hash","init","init","init","into","into","into","item","shrink","squash_ancient","stats","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_and_log","vzip","vzip","vzip","ANCESTORS_HASH_MAP_SIZE","Ancestors","AncestorsForSerialization","ancestors","borrow","borrow_mut","clone","clone_into","contains_key","default","deref","deref_mut","drop","eq","example","example","fmt","from","from","from","init","into","is_empty","keys","len","max_slot","min_slot","remove","to_owned","try_from","try_into","type_id","vzip","AccountsToCombine","AccountsToStore","AncientSlotInfos","Overflow","PackedAncientStorage","PackedAncientStorageTuning","Primary","SlotInfo","StorageSelector","WriteAncientAccounts","accounts","accounts","accounts_keep_slots","accounts_to_combine","add","alive_bytes","all_infos","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","can_randomly_shrink","capacity","choose_storages_to_shrink","clear_should_shrink_after_cutoff","clone","clone_into","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","eq","equivalent","equivalent","example","example","example","example","example","example","example","example","filter_ancient_slots","filter_by_smallest_capacity","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get","get_ancient_append_vec_capacity","has_overflow","ideal_storage_size","index_first_item_overflow","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","is_ancient","max_ancient_slots","metrics","new","pack","percent_of_alive_shrunk_data","should_shrink","shrink_indexes","shrinks_in_progress","slot","slot","sort_shrink_indexes_by_bytes_saved","storage","target_slots_sorted","to_owned","total_alive_bytes","total_alive_bytes_shrink","truncate_to_max_storages","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","APPEND_VEC_MMAPPED_FILES_OPEN","AppendVec","AppendVecAccountsIter","AppendVecStoredAccountMeta","INC_NEW_COUNTER","INIT_HOOK","MAXIMUM_APPEND_VEC_FILE_SIZE","MatchAccountOwnerError","NoMatch","STORE_META_OVERHEAD","UnableToLoad","__private_field","__stability","__static_ref_initialize","account_iter","account_matches_owners","account_meta","accounts","aligned_stored_size","append_accounts","append_lock","append_ptr","append_ptrs_locked","append_vec","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clone_account","current_len","data","data","data","data_len","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","example","example","example","example","example","example","executable","file_name","file_size","flush","fmt","fmt","fmt","fmt","from","from","from","from","from","get_account","get_account_meta","get_path","get_slice","get_type","hash","hash","init","init","init","init","init","into","into","into","into","into","into_iter","is_empty","lamports","len","map","meta","meta","new","new","new_from_file","new_from_file_unchecked","next","offset","offset","offset","owner","path","provide","pubkey","ref_executable_byte","remaining_bytes","remove_on_drop","rent_epoch","reset","sanitize","sanitize_executable","sanitize_lamports","sanitize_layout_and_length","sanitize_len_and_size","set_meta","set_no_remove_on_drop","stored_size","stored_size","test_utils","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","write_version","TempFile","borrow","borrow_mut","create_test_account","deref","deref_mut","drop","drop","example","from","get_append_vec_dir","get_append_vec_path","init","into","path","try_from","try_into","type_id","vzip","ACCOUNTS_DATA_LEN","ACCOUNT_DATA_COST_PAGE_SIZE","All","AllWithVotes","ApplyFeatureActivationsCaller","BASE_CONGESTION","Bank","BankFieldsToDeserialize","BankFieldsToSerialize","BankIncrementalSnapshotPersistence","BankRc","BankSlotDelta","BankStatusCache","BankTestConfig","BuiltinPrograms","CollectRentFromAccountsInfo","CollectRentInPartitionInfo","CommitTransactionCounts","DropCallback","DurableNonceFee","EVICT_CACHE_TO_PERCENTAGE","EpochCount","Executed","FIELDS","FIELDS","Fee","FinishInit","INC_NEW_COUNTER","INC_NEW_COUNTER","INC_NEW_COUNTER","INC_NEW_COUNTER","INC_NEW_COUNTER","INC_NEW_COUNTER","INC_NEW_COUNTER","INC_NEW_COUNTER","INC_NEW_COUNTER","INIT_HOOK","INIT_HOOK","INIT_HOOK","INIT_HOOK","INIT_HOOK","INIT_HOOK","INIT_HOOK","INIT_HOOK","INIT_HOOK","InnerInstruction","InnerInstructions","InnerInstructionsList","Invalid","InvalidCacheKeyMap","LoadAndExecuteTransactionsOutput","LoadVoteAndStakeAccountsResult","MAX_LEADER_SCHEDULE_STAKES","NUM_BLOCKHASH_CONFIRMATIONS","NewBankOptions","NewFromParent","NonceFull","NonceInfo","NoncePartial","None","NotExecuted","OnlyMentionedAddresses","OptionalDropCallback","PREFIX_MAX","PREFIX_MAX","PREFIX_SIZE","PREFIX_SIZE","Partition","PartitionIndex","PartitionsPerCycle","Prefix","Prefix","PrevEpochInflationRewards","RENT_UNADJUSTED_INITIAL_BALANCE","Rent","RentCollectionCycleParams","RentMetrics","RewardCalcTracer","RewardCalculationEvent","RewardInfo","RewardType","SECONDS_PER_YEAR","SquashTiming","StakeReward","StakeRewards","Staking","Staking","TotalAccountsStats","TransactionBalances","TransactionBalancesSet","TransactionCheckResult","TransactionExecutionDetails","TransactionExecutionResult","TransactionLogCollector","TransactionLogCollectorConfig","TransactionLogCollectorFilter","TransactionLogInfo","TransactionLogMessages","TransactionResults","TransactionSimulationResult","VARIANTS","Valid","VerifyAccountsHashConfig","VoteRewards","VoteWithStakeDelegations","VoteWithStakeDelegationsMap","Voting","WarpFromParent","__Field","__Field","__Field","__FieldVisitor","__FieldVisitor","__FieldVisitor","__Visitor","__Visitor","__Visitor","__field0","__field0","__field0","__field1","__field1","__field1","__field2","__field2","__field2","__field3","__field3","__field3","__field4","__ignore","__ignore","_load_vote_and_stake_accounts","_load_vote_and_stake_accounts_with_thread_pool","_new_from_parent","account","account","account","account","account","account_indexes_include_key","accounts","accounts","accounts_data_len","accounts_data_len","accounts_data_len_delta","accounts_data_size_delta_off_chain","accounts_data_size_delta_on_chain","accounts_data_size_initial","accounts_data_size_limit","accounts_data_size_reclaimed","accumulate_account","activate_feature","add_assign","add_builtin","add_builtin_account","add_precompile","add_precompiled_account","add_precompiled_account_with_owner","address","address","address","address","address","address_lookup_table","adjust_sysvar_balance_for_rent","ancestors","ancestors","ancestors","apply_builtin_program_feature_transitions","apply_feature_activations","apply_updated_hashes_per_tick","bank_created","bank_freeze_or_destruction_incremented","bank_frozen_or_destroyed","bank_hash_skips_rent_rewrites","bank_id","bank_id","bank_id_generator","block_height","block_height","block_height","block_height","blockhash_queue","blockhash_queue","blockhash_queue","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builtin_feature_transitions","builtin_programs","builtin_programs","burn_and_purge_account","byte_limit_for_scans","calculate_and_update_accounts_data_size_delta_off_chain","calculate_and_verify_capitalization","calculate_capitalization","calculate_data_size_delta","calculate_fee","calculate_loaded_accounts_data_size_cost","calculate_previous_epoch_inflation_rewards","calculate_reward_points","calculate_total_accounts_stats","callback","capitalization","capitalization","capitalization","capitalization","check_age","check_message_for_nonce","check_status_cache","check_transaction_age","check_transaction_for_nonce","check_transactions","check_transactions_with_forwarding_delay","clean_accounts","clear_executors","clear_signatures","clear_slot_signatures","clock","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_box","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cluster_type","cluster_type","collect_balances","collect_fees","collect_rent","collect_rent_eagerly","collect_rent_from_accounts","collect_rent_in_partition","collect_rent_in_range","collect_us","collected_rent","collected_rent","collected_rent","collector_fees","collector_fees","collector_fees","collector_id","collector_id","collector_id","collector_id","commission","commit_transactions","committed_non_vote_transactions_count","committed_transactions_count","committed_with_failure_result_count","compute_active_feature_set","confirmed_last_blockhash","cost_tracker","count","credits_auto_rewind","current_slot","data_len","deactivate_feature","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default_for_tests","default_with_accounts","delegations","deposit","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","details","determine_collection_cycle_params","distribute_rent","distribute_rent_to_validators","do_partition_from_slot_indexes","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop_callback","drop_scheduler","durable_nonce_fee","enable_request_heap_frame_ix","epoch","epoch","epoch","epoch","epoch_accounts_hash","epoch_accounts_hash","epoch_authorized_voter","epoch_duration_in_years","epoch_schedule","epoch_schedule","epoch_schedule","epoch_schedule","epoch_staked_nodes","epoch_stakes","epoch_stakes","epoch_stakes","epoch_stakes","epoch_stakes_map","epoch_vote_account_stake","epoch_vote_accounts","epoch_vote_accounts_for_node_id","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error_counters","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","executable_data_len","execute_loaded_transaction","executed_non_vote_transactions_count","executed_transaction_count","executed_transactions_count","executed_units","executed_with_successful_result_count","execution_results","execution_results","executor_cache","expecting","expecting","expecting","expecting","expecting","expecting","expire_old_recycle_stores","feature_set","fee_calculator","fee_calculator","fee_calculator","fee_collection_results","fee_payer_account","fee_payer_account","fee_payer_account","fee_payer_account","fee_rate_governor","fee_rate_governor","fee_rate_governor","fee_structure","fill_bank_with_ticks_for_tests","fill_missing_sysvar_cache_entries","filter","filter_program_errors_and_collect_fee","filter_stake_delegations","finish_init","first_normal_epoch","fixed_cycle_partitions","fixed_cycle_partitions_between_slots","flattened_result","flush_accounts_cache_if_needed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_flush_accounts_cache","foundation_rate","freeze","freeze_lock","freeze_started","freeze_started","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_partial","full_capitalization","full_hash","full_slot","fully_verify_transaction","genesis_creation_time","genesis_creation_time","genesis_creation_time","genesis_creation_time","get_account","get_account_modified_since_parent_with_fixed_root","get_account_modified_slot","get_account_overrides_for_simulation","get_account_with_fixed_root","get_accounts_hash","get_all_accounts_modified_since_parent","get_all_accounts_with_modified_slots","get_balance","get_blockhash_last_valid_block_height","get_blockhash_last_valid_slot","get_epoch_accounts_hash_to_serialize","get_epoch_and_slot_index","get_epoch_info","get_fee_for_message","get_fee_for_message_with_lamports_per_signature","get_fee_rate_governor","get_fields_to_serialize","get_filtered_indexed_accounts","get_filtered_program_accounts","get_hash_age","get_incremental_accounts_hash","get_inflation_num_slots","get_inflation_start_slot","get_lamports_per_signature","get_lamports_per_signature_for_blockhash","get_largest_accounts","get_leader_schedule_epoch","get_logs_for_address","get_minimum_balance_for_rent_exemption","get_num_signatures_in_message","get_num_write_locks_in_message","get_partition_end_indexes","get_partition_from_slot_indexes","get_partitions","get_program_accounts","get_program_accounts_modified_since_parent","get_rent_collector_from","get_rent_paying_pubkeys","get_signature_status","get_signature_status_processed_since_parent","get_signature_status_slot","get_signature_status_with_blockhash","get_slot_history","get_slots_in_epoch","get_snapshot_hash","get_snapshot_storages","get_stake_accounts","get_stake_reward","get_startup_verification_complete","get_sysvar_cache_for_tests","get_thread_pool","get_timestamp_estimate","get_total_accounts_stats","get_transaction_account_lock_limit","get_transaction_account_state_info","get_transaction_logs","get_vote_account","hard_forks","hard_forks","hard_forks","hard_forks","has_initial_accounts_hash_verification_completed","has_signature","hash","hash","hash","hash","hash_internal_state","hash_us","hashes_per_tick","hashes_per_tick","hashes_per_tick","hashes_per_tick","hold_range_us","ignore_mismatch","include_slot_in_hash","increment_non_vote_transaction_count_since_restart","increment_signature_count","increment_transaction_count","incremental_capitalization","incremental_hash","incremental_snapshot_persistence","incremental_snapshot_persistence","inflation","inflation","inflation","inflation","inherit_specially_retained_account_fields","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","inner_instructions","inner_instructions_list_from_instruction_trace","install_scheduler","instruction","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","invalid_cached_stake_accounts","invalid_cached_stake_accounts_rent_epoch","invalid_cached_vote_accounts","invalid_stake_keys","invalid_vote_keys","is_ancestor","is_block_boundary","is_blockhash_valid","is_complete","is_delta","is_delta","is_delta","is_empty","is_frozen","is_hash_valid_for_age","is_startup_verification_complete","is_transaction_already_processed","is_vote","lamports","lamports_in_rent_paying_accounts","lamports_per_signature","lamports_per_signature","lamports_per_signature","lamports_per_signature","last_blockhash","last_blockhash_and_lamports_per_signature","lazy_rent_collection","lifetime","lifetime","lifetime","load_account_into_read_cache","load_accounts_data_size","load_accounts_data_size_delta","load_accounts_data_size_delta_off_chain","load_accounts_data_size_delta_on_chain","load_addresses","load_and_execute_transactions","load_and_get_programs_from_cache","load_execute_and_commit_transactions","load_program","load_slow","load_slow_with_fixed_root","load_us","load_vote_and_stake_accounts","loaded_programs_cache","loaded_transactions","log_messages","log_messages","logs","logs","marker","marker","marker","max_tick_height","max_tick_height","max_tick_height","max_tick_height","mentioned_address_map","mentioned_addresses","merge","metrics","new","new","new","new","new","new","new_for_benches","new_for_tests","new_for_tests_with_config","new_from_fields","new_from_parent","new_from_parent_with_options","new_from_parent_with_tracer","new_no_wallclock_throttle_for_tests","new_with_config_for_tests","new_with_paths","new_with_paths_for_benches","new_with_paths_for_tests","new_with_runtime_config_for_tests","no_overflow_rent_distribution_enabled","non_vote_transaction_count_since_restart","non_vote_transaction_count_since_restart","ns_per_slot","ns_per_slot","ns_per_slot","null_tracer","num_accounts","num_accounts","num_accounts","num_executable_accounts","num_rent_exempt_accounts","num_rent_paying_accounts","num_rent_paying_accounts_without_data","parent","parent","parent_hash","parent_hash","parent_hash","parent_hash","parent_slot","parent_slot","parent_slot","parent_slot","parents","parents_inclusive","partition_from_normal_slot_indexes","partition_from_pubkey","partition_from_slot_indexes_with_gapped_epochs","partition_index_from_slot_index","pay_validator_rewards_with_thread_pool","post_balance","post_balances","post_simulation_accounts","pre_balances","prefix_from_pubkey","prepare_batch_for_tests","prepare_entry_batch","prepare_sanitized_batch","prepare_sanitized_batch_with_results","prepare_sanitized_batch_without_locking","prev_epoch_duration_in_years","prevent_rent_paying_rent_recipients","print_accounts_stats","process_entry_transactions","process_genesis_config","process_new_epoch","process_transaction","process_transaction_batch","process_transaction_with_metadata","process_transactions","proper_ancestors","proper_ancestors_set","pubkey_range_from_partition","rc","read_balance","read_cost_tracker","reconfigure_token2_native_mint","redeem_rewards","reduce","register_recent_blockhash","register_tick","rehash","remove_builtin","remove_executor","remove_unrooted_slots","rent_collected","rent_collected_info","rent_collection_partitions","rent_collector","rent_collector","rent_collector","rent_collector","rent_debits","rent_rewards","rent_rewards","rent_single_epoch_collection_cycle_params","replace_program_account","replenish_executor_cache","require_rooted_bank","reset_sysvar_cache","result","result","retryable_transaction_indexes","return_data","return_data","reward_type","rewards","rewards_pool_pubkeys","run_in_background","run_incinerator","runtime_config","scan_all_accounts_with_modified_slots","schedule_termination","schedule_transaction_executions","scheduler","secondary_indexes","send_to_tpu_vote_port_enabled","serialize","serialize","serialize","serialize","set_accounts_data_size_initial_for_tests","set_callback","set_capitalization","set_hashes_per_tick","set_inflation","set_initial_accounts_hash_verification_completed","set_rent_burn_percentage","set_shrink_paths","set_startup_verification_complete","set_sysvar_for_tests","should_bank_still_be_processing_txs","should_include_epoch_accounts_hash","shrink_candidate_slots","signature","signature_count","signature_count","signature_count","signature_count","signature_count","signature_count","simulate_transaction","simulate_transaction_unchecked","skip_rewrite","slot","slot","slot","slot","slot","slot_count_in_two_day","slot_count_in_two_day_helper","slot_count_per_normal_epoch","slot_in_year_for_inflation","slots_per_year","slots_per_year","slots_per_year","slots_per_year","squash","squash_accounts_cache_ms","squash_accounts_index_ms","squash_accounts_ms","squash_accounts_store_ms","squash_cache_ms","stack_height","stake_account","stake_pubkey","stake_reward_info","staked_nodes","stakes","stakes","stakes_cache","status","status_cache","status_cache_ancestors","store_account","store_account_and_update_capitalization","store_accounts","store_executors_which_added_to_the_cache","store_executors_which_were_deployed","store_hash_raw_data_for_debug","store_stake_accounts","store_us","store_vote_accounts","sysvar_cache","sysvar_cache","test_hash_calculation","test_utils","tick_height","tick_height","tick_height","tick_height","ticks_per_slot","ticks_per_slot","ticks_per_slot","ticks_per_slot","time_collecting_rent_us","time_collecting_rent_us","time_loading_accounts_us","time_storing_accounts_us","time_storing_accounts_us","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","total_epoch_stake","transaction_account_state_info","transaction_count","transaction_count","transaction_count","transaction_count","transaction_debug_keys","transaction_entries_count","transaction_entries_count","transaction_error_count","transaction_error_count","transaction_log_collector","transaction_log_collector_config","transactions_per_entry_max","transactions_per_entry_max","transfer","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_process_entry_transactions","try_process_transactions","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unfreeze_for_ledger_tool","units_consumed","unix_timestamp_from_genesis","unlock_accounts","update_accounts_data_size_delta_off_chain","update_accounts_data_size_delta_off_chain_for_tests","update_accounts_data_size_delta_on_chain","update_accounts_hash","update_accounts_hash_for_tests","update_clock","update_epoch_schedule","update_epoch_stakes","update_fees","update_incremental_accounts_hash","update_recent_blockhashes","update_recent_blockhashes_locked","update_rent","update_reward_history","update_rewards_with_thread_pool","update_slot_hashes","update_slot_history","update_stake_history","update_stakes_cache","update_sysvar_account","update_transaction_statuses","use_fixed_collection_cycle","use_multi_epoch_collection_cycle","validator_rate","validator_rewards","variable_cycle_partition_from_previous_slot","variable_cycle_partitions","variable_cycle_partitions_between_slots","vec","verify_accounts_hash","verify_hash","verify_snapshot_bank","verify_transaction","verify_transaction_account_state_changes","versioned_tx_message_enabled","visit_bytes","visit_bytes","visit_bytes","visit_enum","visit_for_abi","visit_for_abi","visit_for_abi","visit_for_abi","visit_for_abi","visit_for_abi","visit_for_abi","visit_for_abi","visit_for_abi","visit_for_abi","visit_map","visit_map","visit_seq","visit_seq","visit_str","visit_str","visit_str","visit_u64","visit_u64","visit_u64","vote_account","vote_accounts","vote_accounts_cache_miss_count","vote_only_bank","vote_only_bank","vote_only_bank","vote_state","vote_with_stake_delegations_map","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wait_for_completed_scheduler","wait_for_completed_scheduler_from_drop","wait_for_completed_scheduler_from_scheduler_drop","wait_for_initial_accounts_hash_verification_completed_for_tests","wait_for_reusable_scheduler","wait_for_scheduler","wait_get_epoch_accounts_hash","warp_from_parent","was_executed","was_executed_successfully","with_scheduler","with_scheduling_context","withdraw","write_cost_tracker","details","tx_executor_cache","NewBankTimings","NewEpochTimings","RewardsMetrics","activate_epoch_time_us","ancestors_time_us","apply_feature_activations_time_us","bank_rc_creation_time_us","blockhash_queue_time_us","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","builtin_programs_time_us","calculate_points_us","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","epoch_stakes_time_us","example","example","example","executor_cache_time_us","feature_set_time_us","fee_components_time_us","fill_sysvar_cache_time_us","fmt","from","from","from","init","init","init","into","into","into","invalid_cached_stake_accounts","invalid_cached_stake_accounts_rent_epoch","invalid_cached_vote_accounts","load_vote_and_stake_accounts_us","redeem_rewards_us","report_new_bank_metrics","report_new_epoch_metrics","rewards_pool_pubkeys_time_us","stakes_cache_time_us","status_cache_time_us","store_stake_accounts_us","store_vote_accounts_us","thread_pool_time_us","total_elapsed_time_us","transaction_debug_keys_time_us","transaction_log_collector_config_time_us","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_epoch_stakes_time_us","update_epoch_time_us","update_rewards_with_thread_pool_time_us","update_sysvars_time_us","vote_accounts_cache_miss_count","vzip","vzip","vzip","goto_end_of_slot","update_vote_account_timestamp","TransactionAccountStateInfo","borrow","borrow_mut","deref","deref_mut","drop","example","from","init","into","rent_state","try_from","try_into","type_id","vzip","BankClient","async_send_versioned_transaction","bank","borrow","borrow_mut","deref","deref_mut","drop","example","from","get_account","get_account_data","get_account_with_commitment","get_balance","get_balance_with_commitment","get_epoch_info","get_fee_calculator_for_blockhash","get_fee_for_message","get_fee_rate_governor","get_latest_blockhash","get_latest_blockhash_with_commitment","get_minimum_balance_for_rent_exemption","get_new_blockhash","get_recent_blockhash","get_recent_blockhash_with_commitment","get_signature_status","get_signature_status_with_commitment","get_slot","get_slot_with_commitment","get_transaction_count","get_transaction_count_with_commitment","init","into","is_blockhash_valid","new","new_shared","poll_for_signature","poll_for_signature_confirmation","run","send_and_confirm_instruction","send_and_confirm_message","set_sysvar_for_tests","tpu_addr","transaction_sender","transfer_and_confirm","try_from","try_into","type_id","vzip","BankCreationFreezingProgress","bank_creation_count","bank_freeze_or_destruction_count","bank_frozen_or_destroyed","borrow","borrow_mut","default","deref","deref_mut","drop","example","fmt","from","get_bank_creation_count","get_bank_frozen_or_destroyed_count","increment_bank_creation_count","increment_bank_frozen_or_destroyed","init","into","last_report","report","try_from","try_into","type_id","vzip","AtomicSlot","BankForks","MAX_ROOT_DISTANCE_FOR_VOTE_ONLY","ReadOnlyAtomicSlot","SetRootMetrics","SetRootTimings","accounts_data_len","accounts_hash_interval_slots","active_bank_slots","ancestors","bank_hash","banks","banks","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","descendants","descendants","do_set_root_return_metrics","drop","drop","drop","drop","drop_parent_banks_ms","dropped_banks_len","example","example","example","example","fmt","fmt","from","from","from","from","frozen_banks","get","get","get_atomic_root","get_vote_only_mode_signal","get_with_checked_hash","highest_slot","in_vote_only_mode","index","init","init","init","init","insert","install_scheduler_into_bank","install_scheduler_pool","into","into","into","into","is_empty","last_accounts_hash_slot","len","new","new_from_banks","prune_non_rooted","prune_non_rooted_ms","prune_remove_ms","prune_slots_ms","relationship","remove","root","root","root_bank","scheduler_pool","set_accounts_hash_interval_slots","set_root","set_snapshot_config","should_request_epoch_accounts_hash","slot","snapshot_config","timings","to_owned","to_owned","total_parent_banks","total_snapshot_ms","total_squash_time","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","tx_count","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","working_bank","find_and_send_votes","setup_bank_and_vote_pubkeys_for_tests","BUILT_IN_INSTRUCTION_COSTS","COMPUTE_UNIT_TO_US_RATIO","INSTRUCTION_DATA_BYTES_COST","MAX_BLOCK_ACCOUNTS_DATA_SIZE_DELTA","MAX_BLOCK_REPLAY_TIME_US","MAX_BLOCK_UNITS","MAX_CONCURRENCY","MAX_VOTE_UNITS","MAX_WRITABLE_ACCOUNT_UNITS","SIGNATURE_COST","WRITE_LOCK_UNITS","__private_field","__stability","__static_ref_initialize","borrow","borrow_mut","deref","deref","deref_mut","drop","example","from","init","into","try_from","try_into","type_id","vzip","BlockhashQueue","FIELDS","FIELDS","HashAge","__Field","__Field","__FieldVisitor","__FieldVisitor","__Visitor","__Visitor","__field0","__field0","__field1","__field1","__field2","__field2","__field3","__ignore","__ignore","ages","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","example","example","example","example","example","example","example","example","example","example","expecting","expecting","expecting","expecting","fee_calculator","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","genesis_hash","get_hash_age","get_lamports_per_signature","get_max_age","get_recent_blockhashes","hash_index","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","is_hash_index_valid","is_hash_valid","is_hash_valid_for_age","last_hash","last_hash","last_hash_index","lifetime","lifetime","marker","marker","max_age","new","register_hash","serialize","serialize","timestamp","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","visit_bytes","visit_bytes","visit_for_abi","visit_for_abi","visit_for_abi","visit_for_abi","visit_map","visit_map","visit_seq","visit_seq","visit_str","visit_str","visit_u64","visit_u64","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","AGE_MS","Age","BucketMapHolder","DEFAULT_AGE_TO_STAY_IN_CACHE","DEFAULT_DISK_INDEX","_phantom","age","age_interval_ms","age_timer","ages_to_stay_in_cache","all_buckets_flushed_at_current_age","all_buckets_flushed_at_current_age_internal","background","bins","borrow","borrow_mut","bucket_flushed_at_current_age","count_buckets_flushed","count_buckets_flushed","current_age","deref","deref_mut","disk","drop","example","fmt","from","future_age_to_flush","future_age_to_flush","future_age_to_flush_cached","get_startup","has_age_interval_elapsed","increment_age","init","into","is_disk_index_enabled","maybe_advance_age","maybe_advance_age_internal","mem_budget_mb","new","next_bucket_to_flush","next_bucket_to_flush","set_startup","should_thread_sleep","startup","stats","threads","throttling_wait_ms","throttling_wait_ms_internal","try_from","try_into","type_id","vzip","wait_dirty_or_aged","wait_for_idle","BucketMapHeldInMemStats","BucketMapHolderStats","STATS_INTERVAL_MS","US_PER_MS","active_threads","add_mem_count","bg_throttling_wait_us","bg_waiting_us","bins","borrow","borrow","borrow_mut","borrow_mut","buckets_scanned","calc_percent","count","count_in_bucket","count_in_mem","dec_mem_count","default","default","deletes","deref","deref","deref_mut","deref_mut","drop","drop","entries_from_mem","entries_missing","entry_mem_us","entry_missing_us","estimate_mem","example","example","failed_to_evict","flush_entries_evicted_from_mem","flush_entries_updated_on_disk","flush_evict_us","flush_grow_us","flush_scan_us","flush_should_evict_us","flush_update_us","fmt","fmt","from","from","get_mem_us","get_missing_us","get_range_us","get_remaining_items_to_flush_estimate","get_stats","gets_from_mem","gets_missing","held_in_mem","inc_delete","inc_insert","inc_insert_count","inc_mem_count","init","init","inserts","into","into","items","items_us","keys","last_age","last_ages_flushed","last_time","last_was_startup","load_disk_found_count","load_disk_found_us","load_disk_missing_count","load_disk_missing_us","ms_per_age","new","per_bucket_count","ref_count","remaining_until_next_interval","report_stats","slot_list_cached","slot_list_len","sub_mem_count","total_count","try_from","try_from","try_into","try_into","type_id","type_id","updates_in_mem","vzip","vzip","Add","Add","Builtin","BuiltinAction","BuiltinFeatureTransition","Builtins","Remove","RemoveOrRetain","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builtin_feature_transitions","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","example","example","example","example","example","example","feature_transitions","fmt","fmt","fmt","fmt","from","from","from","from","genesis_builtins","genesis_builtins","get","get_pubkeys","id","init","init","init","init","into","into","into","into","name","new","process_instruction_with_context","to_action","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","addition_feature_id","builtin","feature_id","previously_added_builtin","removal_feature_id","CacheHashData","CacheHashDataFile","EntryType","Header","PreExistingCacheFiles","SavedType","SavedTypeSlice","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cache_dir","capacity","cell_size","count","delete_old_cache_files","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","example","example","example","from","from","from","get_cache_files","get_cache_hash_data","get_element_offset_byte","get_header_mut","get_mut","get_slice","get_slice_internal","init","init","init","into","into","into","load_map","load_map","map","mmap","new","new_map","pre_existing_cache_files","save","save_internal","stats","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","CacheHashDataStats","accumulate","borrow","borrow_mut","cache_file_count","cache_file_size","create_save_us","decode_us","default","deref","deref_mut","drop","entries_loaded_from_cache","example","fmt","from","init","into","load_us","loaded_from_cache","merge_us","read_us","report","save_us","saved_to_cache","total_entries","try_from","try_into","type_id","unused_cache_files","vzip","write_to_mmap_us","BlockCommitment","BlockCommitmentArray","BlockCommitmentCache","CommitmentSlots","FIELDS","VOTE_THRESHOLD_SIZE","__Field","__FieldVisitor","__Visitor","__field0","__ignore","block_commitment","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate_highest_confirmed_slot","clone","clone","clone_into","clone_into","commitment","commitment_slots","commitment_slots","default","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","drop","drop","drop","eq","equivalent","equivalent","example","example","example","example","example","example","expecting","expecting","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_block_commitment","get_confirmation_count","get_confirmation_stake","get_lockout_count","get_rooted_stake","highest_confirmed_root","highest_confirmed_root","highest_confirmed_slot","highest_confirmed_slot","highest_gossip_confirmed_slot","highest_slot_with_confirmation_count","increase_confirmation_stake","increase_rooted_stake","init","init","init","init","init","init","initialize_slots","into","into","into","into","into","into","lifetime","marker","new","new","new_for_tests","new_for_tests_with_slots","new_from_slot","root","root","serialize","set_all_slots","set_highest_confirmed_root","set_highest_confirmed_slot","slot","slot","slot_with_commitment","to_owned","to_owned","total_stake","total_stake","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","visit_bytes","visit_for_abi","visit_for_abi","visit_map","visit_seq","visit_str","visit_u64","vzip","vzip","vzip","vzip","vzip","vzip","Contains","Item","Iter","contains","contains_iter","CostModel","MAX_WRITABLE_ACCOUNTS","TransactionCost","account_data_size","borrow","borrow","borrow_mut","borrow_mut","bpf_execution_cost","builtins_execution_cost","calculate_account_data_size","calculate_account_data_size_on_deserialized_system_instruction","calculate_account_data_size_on_instruction","calculate_cost","data_bytes_cost","default","deref","deref","deref_mut","deref_mut","drop","drop","example","example","fmt","from","from","get_signature_cost","get_transaction_cost","get_write_lock_cost","init","init","into","into","is_simple_vote","new_with_capacity","reset","signature_cost","sum","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","writable_accounts","write_lock_cost","CostTracker","CostTrackerError","WRITABLE_ACCOUNTS_PER_BLOCK","WouldExceedAccountDataBlockLimit","WouldExceedAccountDataTotalLimit","WouldExceedAccountMaxLimit","WouldExceedBlockMaxLimit","WouldExceedVoteMaxLimit","account_cost_limit","account_data_size","account_data_size_limit","add_transaction_cost","add_transaction_execution_cost","block_cost","block_cost","block_cost_limit","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cost_by_writable_accounts","default","deref","deref","deref_mut","deref_mut","drop","drop","eq","equivalent","equivalent","example","example","example","find_costliest_account","fmt","fmt","from","from","init","init","into","into","new_with_account_data_size_limit","number_of_accounts","remove","remove_transaction_cost","report_stats","set_limits","sub_transaction_execution_cost","to_owned","transaction_count","transaction_count","try_add","try_from","try_from","try_into","try_into","type_id","type_id","update_execution_cost","vote_cost","vote_cost_limit","vzip","vzip","would_fit","CalculationInfo","EpochAccountsHash","EpochAccountsHashManager","__Visitor","as_ref","borrow","borrow","borrow_mut","borrow_mut","calculation_info","calculation_interval","calculation_interval","calculation_offset_start","calculation_offset_start","calculation_offset_stop","calculation_offset_stop","calculation_start","calculation_start","calculation_stop","calculation_stop","clone","clone_into","contains","contains_iter","cvar","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","epoch","eq","equivalent","equivalent","example","example","expecting","first_slot_in_epoch","fmt","fmt","from","from","from","get_hash","hash","init","init","into","into","is_enabled_this_epoch","is_in_calculation_window","last_slot_in_epoch","lifetime","manager","marker","new","serialize","slots_per_epoch","state","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","utils","visit_for_abi","visit_for_abi","visit_newtype_struct","visit_seq","vzip","vzip","InFlight","Invalid","Manager","State","Valid","_new","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cvar","deref","deref","deref_mut","deref_mut","drop","drop","eq","equivalent","equivalent","example","example","fmt","fmt","from","from","init","init","into","into","new_invalid","new_valid","set_in_flight","set_valid","state","to_owned","try_from","try_from","try_get_epoch_accounts_hash","try_into","try_into","type_id","type_id","vzip","vzip","wait_get_epoch_accounts_hash","CalculationInfo","borrow","borrow_mut","calculation_info","calculation_interval","calculation_interval","calculation_offset_start","calculation_offset_start","calculation_offset_stop","calculation_offset_stop","calculation_start","calculation_start","calculation_stop","calculation_stop","clone","clone_into","default","deref","deref_mut","drop","epoch","example","first_slot_in_epoch","fmt","from","init","into","is_enabled_this_epoch","is_in_calculation_window","last_slot_in_epoch","slots_per_epoch","to_owned","try_from","try_into","type_id","vzip","EpochAuthorizedVoters","EpochStakes","FIELDS","FIELDS","NodeIdToVoteAccounts","NodeVoteAccounts","__DeserializeWith","__DeserializeWith","__Field","__Field","__FieldVisitor","__FieldVisitor","__SerializeWith","__Visitor","__Visitor","__field0","__field0","__field1","__field1","__field2","__field3","__ignore","__ignore","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","epoch_authorized_voters","epoch_authorized_voters","eq","eq","equivalent","equivalent","example","example","example","example","example","example","example","example","example","example","example","example","example","expecting","expecting","expecting","expecting","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","lifetime","lifetime","lifetime","lifetime","marker","marker","new","node_id_to_vote_accounts","node_id_to_vote_accounts","parse_epoch_vote_accounts","phantom","phantom","phantom","serialize","serialize","serialize","stakes","stakes","to_owned","to_owned","total_stake","total_stake","total_stake","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","values","visit_bytes","visit_bytes","visit_for_abi","visit_for_abi","visit_for_abi","visit_for_abi","visit_for_abi","visit_for_abi","visit_map","visit_map","visit_seq","visit_seq","visit_str","visit_str","visit_u64","visit_u64","vote_account_stake","vote_accounts","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","GenesisConfigInfo","VALIDATOR_LAMPORTS","ValidatorVoteKeypairs","activate_all_features","activate_feature","bootstrap_validator_stake_lamports","borrow","borrow","borrow_mut","borrow_mut","create_genesis_config","create_genesis_config_with_leader","create_genesis_config_with_leader_ex","create_genesis_config_with_vote_accounts","create_genesis_config_with_vote_accounts_and_cluster_type","deref","deref","deref_mut","deref_mut","drop","drop","example","example","from","from","genesis_config","genesis_sysvar_and_builtin_program_lamports","init","init","into","into","mint_keypair","new","new_rand","node_keypair","stake_keypair","try_from","try_from","try_into","try_into","type_id","type_id","validator_pubkey","vote_keypair","voting_keypair","vzip","vzip","Archive","Ignore","Invalid","Io","MAX_GENESIS_ARCHIVE_UNPACKED_COUNT","MAX_GENESIS_ARCHIVE_UNPACKED_SIZE","MAX_SNAPSHOT_ARCHIVE_UNPACKED_ACTUAL_SIZE","MAX_SNAPSHOT_ARCHIVE_UNPACKED_APPARENT_SIZE","MAX_SNAPSHOT_ARCHIVE_UNPACKED_COUNT","ParallelSelector","Result","UnpackError","UnpackPath","UnpackedAppendVecMap","Valid","all_digits","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check_unpack_result","checked_total_count_increment","checked_total_size_sum","deref","deref","deref","deref_mut","deref_mut","deref_mut","divisions","drop","drop","drop","eq","equivalent","equivalent","example","example","example","fmt","fmt","fmt","from","from","from","from","index","init","init","init","into","into","into","is_valid_genesis_archive_entry","is_valid_snapshot_archive_entry","like_storage","open_genesis_config","provide","sanitize_path","select_index","source","streaming_unpack_snapshot","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unpack_archive","unpack_genesis","unpack_genesis_archive","unpack_snapshot","unpack_snapshot_with_processors","validate_inside_dst","vzip","vzip","vzip","CacheRangesHeld","DidNotExist","EvictionsGuard","ExistedNewEntryNonZeroLamports","ExistedNewEntryZeroLamports","FlushGuard","FlushScanResult","InMemAccountsIndex","InMemMap","InsertNewEntryResults","K","N","PossibleEvictions","StartupInfo","StartupInfoDuplicates","add_hold_range_in_memory_if_already_held","approx_size_of_one_entry","bin","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bucket","cache_ranges_held","default","default","default","delete_disk_key","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","disk_to_cache_entry","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","duplicates","duplicates","duplicates_put_on_disk","evict_from_cache","evictions_age_possible","evictions_random","example","example","example","example","example","example","example","example","flush","flush_internal","flush_scan","flushing","flushing_active","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","gather_possible_evictions","get","get_exceeds_budget","get_internal","get_only_in_mem","get_possible_evictions","get_should_age","get_stop_evictions","get_stop_evictions_changes","hold_range_in_memory","index","init","init","init","init","init","init","init","init","insert","insert","insert_new_entry_if_missing_with_lock","into","into","into","into","into","into","into","into","items","just_set_hold_range_in_memory","just_set_hold_range_in_memory_internal","keys","last_age_flushed","last_age_flushed","len_for_stats","load_account_entry_from_disk","load_from_disk","lock","lock","lock_and_update_slot_list","lock_with","map_internal","move_ages_to_future","new","new","num_ages_to_distribute_flushes","num_state_changes","populate_and_retrieve_duplicate_keys_from_startup","possible_evictions","possible_evictions","put_range_in_cache","random_chance_of_eviction","remaining_ages_to_skip_flushing","remove_if_slot_list_empty","remove_if_slot_list_empty_entry","remove_if_slot_list_empty_value","reset","set_age_to_future","set_has_aged","should_evict_based_on_age","should_evict_from_mem","shrink_to_fit","slot_list_mut","startup_info","startup_insert_only","stats","stop_evictions","stop_evictions","stop_evictions_changes","storage","storage_notifier","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_entry_stats","update_slot_list","update_slot_list_entry","update_stat","update_time_stat","upsert","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write_startup_info_to_disk","ID","check_id","id","program_v1_1_0","ID","check_id","id","Account","GenericTokenAccount","ID","SPL_TOKEN_ACCOUNT_LENGTH","SPL_TOKEN_ACCOUNT_MINT_OFFSET","SPL_TOKEN_ACCOUNT_OWNER_OFFSET","borrow","borrow_mut","check_id","deref","deref_mut","drop","example","from","get_packed_len","id","init","into","native_mint","program_v3_4_0","try_from","try_into","type_id","unpack_account_mint","unpack_account_mint_unchecked","unpack_account_owner","unpack_account_owner_unchecked","unpack_pubkey_unchecked","valid_account_data","valid_account_data","vzip","ACCOUNT_DATA","ID","check_id","id","ID","check_id","id","ACCOUNTTYPE_ACCOUNT","Account","ID","borrow","borrow_mut","check_id","deref","deref_mut","drop","example","from","id","init","into","try_from","try_into","type_id","valid_account_data","vzip","BITS_PER_HEX_DIGIT","BankWithScheduler","InstalledScheduler","InstalledSchedulerBox","InstalledSchedulerBoxInBank","InstalledSchedulerPool","InstalledSchedulerPoolArc","ReinitializedForRecentBlockhash","ResultWithTimings","SchedulerId","SchedulingContext","TerminatedFromBankDrop","TerminatedInternallyByScheduler","TerminatedToFreeze","WaitReason","bank","bank","bank","bank_cloned","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","eq","equivalent","equivalent","example","example","example","example","example","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","into_bank","log_prefix","mode","mode","new","new","replace_scheduling_context","return_to_pool","schedule_execution","schedule_termination","scheduler_id","scheduler_pool","scheduling_context","slot","take_from_pool","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","wait_for_termination","CHUNK_SIZE","create_invoke_instruction","create_program","load_and_finalize_program","load_program","load_program_from_file","load_upgradeable_buffer","load_upgradeable_program","set_upgrade_authority","upgrade_program","FIELDS","MessageProcessor","ProcessedMessageInfo","__Field","__FieldVisitor","__Visitor","__ignore","accounts_data_len_delta","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","drop","drop","eq","equivalent","equivalent","example","example","example","example","example","example","expecting","expecting","fmt","fmt","fmt","fmt","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","lifetime","marker","process_message","serialize","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","visit_bytes","visit_for_abi","visit_for_abi","visit_map","visit_seq","visit_str","visit_u64","vzip","vzip","vzip","vzip","vzip","NonCirculatingSupply","accounts","borrow","borrow_mut","calculate_non_circulating_supply","deref","deref_mut","drop","example","from","init","into","lamports","non_circulating_accounts","try_from","try_into","type_id","vzip","withdraw_authority","advance_nonce_account","authorize_nonce_account","initialize_nonce_account","withdraw_nonce_account","BlockIsAlreadyFinalized","FailGetTransactionAccountLocks","FailGetTransactionPriorityDetails","PrioritizationFee","PrioritizationFeeError","PrioritizationFeeMetrics","accumulate_total_prioritization_fee","accumulate_total_update_elapsed_us","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","example","example","example","fmt","fmt","from","from","from","get_min_transaction_fee","get_writable_account_fee","get_writable_account_fees","get_writable_accounts_count","init","init","init","into","into","into","is_finalized","is_finalized","mark_block_completed","max_prioritization_fee","metrics","min_prioritization_fee","min_transaction_fee","min_writable_account_fees","non_prioritized_transactions_count","prioritized_transactions_count","prune_irrelevant_writable_accounts","relevant_writable_accounts_count","report","report_metrics","total_prioritization_fee","total_update_elapsed_us","total_writable_accounts_count","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update","update_prioritization_fee","vzip","vzip","vzip","BankFrozen","CacheServiceUpdate","Exit","MAX_NUM_RECENT_BLOCKS","PrioritizationFeeCache","PrioritizationFeeCacheMetrics","TransactionUpdate","accumulate_successful_transaction_update_count","accumulate_total_block_finalize_elapsed_us","accumulate_total_cache_lock_elapsed_us","accumulate_total_entry_lock_elapsed_us","accumulate_total_entry_update_elapsed_us","accumulate_total_update_elapsed_us","available_block_count","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cache","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","example","example","example","finalize_priority_fee","finalize_slot","fmt","fmt","from","from","from","get_prioritization_fee","get_prioritization_fees","init","init","init","into","into","into","metrics","new","report","sender","service_loop","service_thread","successful_transaction_update_count","total_block_finalize_elapsed_us","total_cache_lock_elapsed_us","total_entry_lock_elapsed_us","total_entry_update_elapsed_us","total_update_elapsed_us","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update","update_cache","vzip","vzip","vzip","slot","slot","transaction_fee","writable_accounts","MAX_BITS","PubkeyBinCalculator24","bin_from_pubkey","borrow","borrow_mut","deref","deref_mut","drop","example","fmt","from","init","into","log_2","lowest_pubkey_from_bin","new","num_bits","shift_bits","try_from","try_into","type_id","vzip","CACHE_ENTRY_SIZE","ReadOnlyAccountCacheEntry","ReadOnlyAccountsCache","ReadOnlyCacheKey","account","account_size","borrow","borrow","borrow_mut","borrow_mut","cache","cache_len","data_size","data_size","deref","deref","deref_mut","deref_mut","drop","drop","evicts","example","example","fmt","fmt","from","from","get_and_reset_stats","hits","in_cache","index","init","init","into","into","load","max_data_size","misses","new","queue","remove","reset_for_tests","store","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","CollectRent","CollectedInfo","Exempt","FIELDS","NoRentCollectionNow","RENT_EXEMPT_RENT_EPOCH","RentCollector","RentResult","__Field","__FieldVisitor","__Visitor","__field0","__field1","__field2","__field3","__ignore","account_data_len_reclaimed","add","add_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate_rent_result","clone","clone","clone_into","clone_into","clone_with_epoch","collect_from_existing_account","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","drop","drop","drop","epoch","epoch_schedule","eq","eq","equivalent","equivalent","example","example","example","example","example","example","example","expecting","expecting","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_rent_due","init","init","init","init","init","init","into","into","into","into","into","into","lifetime","marker","new","rent","rent_amount","serialize","should_collect_rent","slots_per_year","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","visit_bytes","visit_for_abi","visit_for_abi","visit_map","visit_seq","visit_str","visit_u64","vzip","vzip","vzip","vzip","vzip","vzip","new_rent_epoch","rent_due","RentDebit","RentDebits","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","example","example","fmt","fmt","from","from","get_account_rent_debit","init","init","insert","into","into","into_unordered_rewards_iter","post_balance","rent_collected","to_owned","to_owned","try_from","try_from","try_into","try_into","try_into_reward_info","type_id","type_id","vzip","vzip","EMPTY_HASHSET","RentPayingAccountsByPartition","__private_field","__stability","__static_ref_initialize","accounts","add_account","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref","deref","deref_mut","deref_mut","drop","drop","example","example","fmt","from","from","get_pubkeys_in_partition_index","init","init","into","into","is_initialized","new","partition_count","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","RollingBitField","all_items_in_excess","bits","borrow","borrow_mut","clone","clone_into","contains","contains_assume_in_range","count","default","deref","deref_mut","drop","eq","example","example","excess","fmt","from","get_address","get_all","get_all_less_than","get_prior","init","insert","into","is_empty","len","max_exclusive","max_exclusive","max_inclusive","max_width","min","min","new","purge","range_width","remove","to_owned","try_from","try_into","type_id","vzip","RootBankCache","bank_forks","borrow","borrow_mut","cached_root_bank","deref","deref_mut","drop","example","from","init","into","new","root_bank","root_slot","try_from","try_into","type_id","vzip","RuntimeConfig","borrow","borrow_mut","bpf_jit","clone","clone_into","compute_budget","default","deref","deref_mut","drop","example","example","fmt","from","init","into","log_messages_bytes_limit","to_owned","transaction_account_lock_limit","try_from","try_into","type_id","vzip","DashMapSecondaryIndexEntry","HierarchicalOrderedMap","MAX_NUM_LARGEST_INDEX_KEYS_RETURNED","NUM_LARGEST_INDEX_KEYS_CACHED","RwLockSecondaryIndexEntry","SecondaryIndex","SecondaryIndexEntry","SecondaryIndexLargestKeys","SecondaryIndexStats","SecondaryReverseIndexEntry","account_keys","account_keys","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","example","example","example","example","example","example","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get","get_largest_keys","get_map","index","init","init","init","init","init","init","insert","insert_if_not_exists","insert_if_not_exists","insert_if_not_exists","into","into","into","into","into","into","is_empty","is_empty","is_empty","key_size_index","keys","keys","keys","last_report","len","len","len","log_contents","map","metrics_name","new","new","num_inner_keys","remove_by_inner_key","remove_index_entries","remove_inner_key","remove_inner_key","remove_inner_key","reverse_index","sort_slice_by_value","stats","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","update","update_map","vzip","vzip","vzip","vzip","vzip","vzip","AccountsDbFields","BankHashInfo","FIELDS","MAX_STREAM_SIZE","Newer","ReconstructedAccountsDbInfo","SerdeStyle","SerializableAccountStorageEntry","SerializableAccountsDb","SerializableBankAndStorage","SnapshotAccountsDbFields","SnapshotBankFields","SnapshotStreams","TypeContext","__DeserializeWith","__DeserializeWith","__Field","__FieldVisitor","__Visitor","__Visitor","__field0","__field1","__field2","__ignore","account_storage_entries","accounts_data_len","accounts_db","accounts_delta_hash","accounts_hash","bank","bank_from_streams","bank_to_stream","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","collapse_into","collapse_into","compare_two_serialized_banks","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize_accounts_db_fields","deserialize_bank_fields","deserialize_from","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","expecting","expecting","expecting","fields_from_stream","fields_from_streams","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","full","full_snapshot_accounts_db_fields","full_snapshot_stream","incremental","incremental_snapshot_accounts_db_fields","incremental_snapshot_stream","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","lifetime","lifetime","lifetime","lifetime","marker","marker","newer","phantom","phantom","phantom","phantom","reconstruct_accountsdb_from_fields","reconstruct_bank_from_fields","reconstruct_historical_roots","reconstruct_single_storage","remap_and_reconstruct_single_storage","remap_append_vec_file","reserialize_bank_fields_with_hash","reserialize_bank_fields_with_new_hash","reserialize_bank_with_new_accounts_hash","serialize","serialize","serialize","serialize","serialize_accounts_db_fields","serialize_bank_and_storage","slot","snapshot_storage_lengths_from_fields","snapshot_storages","stats","storage","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","types","utils","value","value","visit_bytes","visit_for_abi","visit_for_abi","visit_for_abi","visit_for_abi","visit_for_abi","visit_for_abi","visit_for_abi","visit_for_abi","visit_map","visit_seq","visit_seq","visit_str","visit_u64","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","AccountsDbFields","Context","DeserializableVersionedBank","FIELDS","FIELDS","SerializableVersionedBank","UnusedAccounts","__Field","__Field","__FieldVisitor","__FieldVisitor","__SerializeWith","__Visitor","__Visitor","__field0","__field0","__field1","__field1","__field10","__field11","__field12","__field13","__field14","__field15","__field16","__field17","__field18","__field19","__field2","__field2","__field20","__field21","__field22","__field23","__field24","__field25","__field26","__field27","__field28","__field29","__field3","__field30","__field31","__field4","__field5","__field6","__field7","__field8","__field9","__ignore","__ignore","accounts_data_len","accounts_data_len","ancestors","ancestors","block_height","block_height","blockhash_queue","blockhash_queue","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capitalization","capitalization","clone","clone","clone_into","clone_into","collected_rent","collected_rent","collector_fees","collector_fees","collector_id","collector_id","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize_accounts_db_fields","deserialize_bank_fields","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","epoch","epoch","epoch_schedule","epoch_schedule","epoch_stakes","epoch_stakes","eq","eq","equivalent","equivalent","equivalent","equivalent","example","example","example","example","example","example","example","example","example","example","example","example","expecting","expecting","expecting","expecting","fee_calculator","fee_calculator","fee_rate_governor","fee_rate_governor","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","genesis_creation_time","genesis_creation_time","hard_forks","hard_forks","hash","hash","hashes_per_tick","hashes_per_tick","inflation","inflation","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","is_delta","is_delta","lifetime","lifetime","marker","marker","max_tick_height","max_tick_height","ns_per_slot","ns_per_slot","parent_hash","parent_hash","parent_slot","parent_slot","phantom","rent_collector","rent_collector","reserialize_bank_fields_with_hash","serialize","serialize","serialize","serialize_accounts_db_fields","serialize_bank_and_storage","signature_count","signature_count","slot","slot","slots_per_year","slots_per_year","stakes","stakes","tick_height","tick_height","ticks_per_slot","ticks_per_slot","to_owned","to_owned","transaction_count","transaction_count","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unused1","unused2","unused3","unused_accounts","unused_accounts","values","visit_bytes","visit_bytes","visit_for_abi","visit_for_abi","visit_for_abi","visit_for_abi","visit_for_abi","visit_for_abi","visit_map","visit_map","visit_seq","visit_seq","visit_str","visit_str","visit_u64","visit_u64","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","FIELDS","SerializableAccountStorageEntry","SerializableStorage","SerializedAppendVecId","__Field","__FieldVisitor","__Visitor","__field0","__field1","__ignore","accounts_current_len","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","current_len","current_len","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","drop","eq","equivalent","equivalent","example","example","example","example","expecting","expecting","fmt","fmt","fmt","from","from","from","from","from","id","id","id","init","init","init","init","into","into","into","into","lifetime","marker","serialize","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","visit_bytes","visit_for_abi","visit_for_abi","visit_map","visit_seq","visit_str","visit_u64","vzip","vzip","vzip","vzip","SerdeAccountsDeltaHash","SerdeAccountsHash","SerdeIncrementalAccountsHash","__Visitor","__Visitor","__Visitor","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","example","example","example","example","example","example","example","example","example","expecting","expecting","expecting","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","into","into","into","into","into","into","lifetime","lifetime","lifetime","marker","marker","marker","serialize","serialize","serialize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","visit_for_abi","visit_for_abi","visit_for_abi","visit_for_abi","visit_for_abi","visit_for_abi","visit_newtype_struct","visit_newtype_struct","visit_newtype_struct","visit_seq","visit_seq","visit_seq","vzip","vzip","vzip","vzip","vzip","vzip","serialize_iter_as_map","serialize_iter_as_seq","serialize_iter_as_tuple","CHUNK_SIZE_DEFAULT","OneSharedBuffer","SharedBuffer","SharedBufferBgReader","SharedBufferInternal","SharedBufferReader","TOTAL_BUFFER_BUDGET_DEFAULT","bg_eof_reached","bg_reader_data","bg_reader_join_handle","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffers","client_done_reading","clients","current_buffer_index","current_data","data","default_error","default_wait_timeout","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","empty_buffer","empty_buffer","error","example","example","example","example","fmt","from","from","from","from","has_reached_eof","index_in_current_data","init","init","init","init","instance","instance","into","into","into","into","my_client_index","new","new","new","new_buffer_signal","new_with_sizes","newly_read_data","newly_read_data_signal","num_buffers","read","read_entire_file_in_bg","set_error","stop","transfer_data_from_bg","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","update_client_index","vzip","vzip","vzip","vzip","wait_for_new_buffer","wait_for_newly_read_data","FullSnapshotArchiveInfo","IncrementalSnapshotArchiveInfo","SnapshotArchiveInfo","SnapshotArchiveInfoGetter","archive_format","archive_format","base_slot","base_slot","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","example","example","example","fmt","fmt","fmt","from","from","from","hash","hash","init","init","init","inner","into","into","into","is_remote","new","new","new_from_path","new_from_path","partial_cmp","partial_cmp","path","path","slot","slot","snapshot_archive_info","snapshot_archive_info","snapshot_archive_info","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","LoadAndGenerate","LoadOnly","SnapshotConfig","SnapshotUsage","accounts_hash_debug_verify","archive_format","bank_snapshots_dir","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref","deref_mut","deref_mut","drop","drop","eq","equivalent","equivalent","example","example","fmt","fmt","from","from","full_snapshot_archive_interval_slots","full_snapshot_archives_dir","incremental_snapshot_archive_interval_slots","incremental_snapshot_archives_dir","init","init","into","into","maximum_full_snapshot_archives_to_retain","maximum_incremental_snapshot_archives_to_retain","new_load_only","packager_thread_niceness_adj","should_generate_snapshots","snapshot_version","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","usage","vzip","vzip","FullSnapshotHash","IncrementalSnapshotHash","SnapshotHash","StartingSnapshotHashes","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","example","example","example","example","fmt","fmt","fmt","fmt","from","from","from","from","full","incremental","init","init","init","init","into","into","into","into","new","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","CHUNK_SIZE","SnapshotMinimizer","accounts_db","add_accounts","bank","borrow","borrow_mut","deref","deref_mut","drop","ending_slot","example","filter_storage","from","get_active_bank_features","get_builtins","get_inactive_bank_features","get_minimized_slot_set","get_owner_accounts","get_programdata_accounts","get_rent_collection_accounts","get_sdk_accounts","get_stake_accounts","get_static_runtime_accounts","get_vote_accounts","init","into","minimize","minimize_accounts_db","minimized_account_set","process_snapshot_storages","purge_dead_slots","starting_slot","try_from","try_into","type_id","vzip","AccountsHashVerifier","AccountsPackage","AccountsPackageType","EpochAccountsHash","FullSnapshot","IncrementalSnapshot","Snapshot","SnapshotPackage","SnapshotType","SupplementalSnapshotInfo","_new","accounts","accounts_hash_for_testing","archive_format","block_height","block_height","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp_accounts_package_types_by_priority","cmp_accounts_packages_by_priority","cmp_snapshot_packages_by_priority","cmp_snapshot_types_by_priority","compare","default_for_tests","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","enqueued","enqueued","epoch_accounts_hash","epoch_schedule","eq","eq","equivalent","equivalent","equivalent","equivalent","example","example","example","example","example","expected_capitalization","fmt","fmt","fmt","fmt","from","from","from","from","from","full_snapshot_archives_dir","incremental_snapshot_archives_dir","init","init","init","init","init","into","into","into","into","into","is_full_snapshot","is_incremental_accounts_hash_feature_enabled","is_incremental_snapshot","new","new_for_epoch_accounts_hash","new_for_snapshot","package_type","rent_collector","retain_max_n_elements","slot","snapshot_archive_info","snapshot_archive_info","snapshot_info","snapshot_links","snapshot_links","snapshot_links_dir","snapshot_storages","snapshot_storages","snapshot_type","snapshot_version","snapshot_version","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","cmp_accounts_package_types_by_priority","cmp_accounts_packages_by_priority","cmp_snapshot_packages_by_priority","cmp_snapshot_types_by_priority","AccountPathsMismatch","Archive","ArchiveFormat","ArchiveGenerationFailure","BANK_SNAPSHOT_PRE_FILENAME_EXTENSION","BadSlotHistory","BankFromArchiveTimings","BankFromDirTimings","BankSnapshotInfo","BankSnapshotType","CrossbeamSend","DEFAULT_ARCHIVE_COMPRESSION","DEFAULT_FULL_SNAPSHOT_ARCHIVE_INTERVAL_SLOTS","DEFAULT_INCREMENTAL_SNAPSHOT_ARCHIVE_INTERVAL_SLOTS","DEFAULT_MAX_FULL_SNAPSHOT_ARCHIVES_TO_RETAIN","DEFAULT_MAX_INCREMENTAL_SNAPSHOT_ARCHIVES_TO_RETAIN","Deterministic","Dir","FULL_SNAPSHOT_ARCHIVE_FILENAME_REGEX","FileNameToStrError","INCREMENTAL_SNAPSHOT_ARCHIVE_FILENAME_REGEX","IncompleteDir","InvalidAccountPath","InvalidAppendVecPath","InvalidBankSnapshotDir","InvalidExtension","InvalidVersion","Io","Io","IoWithSource","IoWithSourceAndFile","MAX_BANK_SNAPSHOTS_TO_RETAIN","MAX_SNAPSHOT_DATA_FILE_SIZE","MAX_SNAPSHOT_VERSION_FILE_SIZE","MismatchedBaseSlot","MismatchedSlotHash","MissingSnapshotFile","MissingStatusCacheFile","MissingVersionFile","NewFromDir","NoSnapshotArchives","NoSnapshotSlotDir","NonDeterministic","PARALLEL_UNTAR_READERS_DEFAULT","ParseError","ParseSnapshotArchiveFileNameError","PathToFileNameError","Post","Pre","Result","SNAPSHOT_ACCOUNTS_HARDLINKS","SNAPSHOT_ARCHIVE_DOWNLOAD_DIR","SNAPSHOT_STATE_COMPLETE_FILENAME","SNAPSHOT_STATUS_CACHE_FILENAME","SNAPSHOT_VERSION_FILENAME","SUPPORTED_ARCHIVE_COMPRESSION","Serialize","SlotGreaterThanMaxRoot","SlotHasMultipleEntries","SlotIsNotRoot","SlotNotFoundInDeltas","SlotNotFoundInHistory","SnapshotError","SnapshotFrom","SnapshotNewFromDirError","SnapshotRootPaths","SnapshotVersion","StorageAndNextAppendVecId","StoragePathSymlinkInvalid","TAR_BZIP2_EXTENSION","TAR_EXTENSION","TAR_GZIP_EXTENSION","TAR_LZ4_EXTENSION","TAR_ZSTD_EXTENSION","TMP_BANK_SNAPSHOT_PREFIX","TMP_SNAPSHOT_ARCHIVE_PREFIX","Tar","TarBzip2","TarGzip","TarLz4","TarZstd","TooManyEntries","UnarchivedSnapshot","UnpackError","UnpackedSnapshotsDirAndVersion","V1_2_0","VERSION_STRING_V1_2_0","VerifyBank","VerifySlotDeltas","VerifySlotDeltasError","VerifySlotDeltasStructuralInfo","__stability","__stability","__static_ref_initialize","__static_ref_initialize","add_bank_snapshot","archive_format","archive_snapshot_package","as_str","bank_fields_from_snapshot_archives","bank_fields_from_snapshots","bank_from_latest_snapshot_archives","bank_from_latest_snapshot_dir","bank_from_snapshot_archives","bank_from_snapshot_dir","bank_to_full_snapshot_archive","bank_to_incremental_snapshot_archive","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_full_snapshot_archive_path","build_incremental_snapshot_archive_path","build_snapshot_archives_remote_dir","build_storage_from_snapshot_dir","build_storage_us","check_are_snapshots_compatible","check_deserialize_file_consumed","clean_orphaned_account_snapshot_dirs","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","create_accounts_run_and_snapshot_dirs","create_all_accounts_run_and_snapshot_dirs","create_snapshot_data_file_stream","create_snapshot_meta_files_for_unarchived_snapshot","create_tmp_accounts_dir_for_tests","default","default","default","delete_contents_of_path","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize_snapshot_data_file","deserialize_snapshot_data_files","deserialize_snapshot_data_files_capped","deserialize_status_cache","do_get_highest_bank_snapshot","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","example","example","example","example","example","example","example","example","example","example","example","example","example","example","example","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","full_snapshot_root_file_path","full_snapshot_untar_us","get_account_path_from_appendvec_path","get_bank_snapshots","get_bank_snapshots_dir","get_bank_snapshots_post","get_bank_snapshots_pre","get_full_snapshot_archives","get_highest_bank_snapshot","get_highest_bank_snapshot_post","get_highest_bank_snapshot_pre","get_highest_full_snapshot_archive_info","get_highest_full_snapshot_archive_slot","get_highest_incremental_snapshot_archive_info","get_highest_incremental_snapshot_archive_slot","get_incremental_snapshot_archives","get_io_error","get_snapshot_accounts_hardlink_dir","get_snapshot_archives","get_snapshot_file_name","get_snapshot_storages","get_storages_to_serialize","hard_link_storages_to_snapshot","incremental_snapshot_root_file_path","incremental_snapshot_untar_us","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","measure_untar","move_and_async_delete_path","new_from_dir","next_append_vec_id","package_and_archive_full_snapshot","package_and_archive_incremental_snapshot","parse_full_snapshot_archive_filename","parse_incremental_snapshot_archive_filename","partial_cmp","path_to_file_name_str","provide","provide","provide","purge_old_bank_snapshots","purge_old_snapshot_archives","rebuild_bank_from_snapshot","rebuild_bank_from_snapshot_us","rebuild_bank_from_snapshots_us","rebuild_bank_from_unarchived_snapshots","remove_bank_snapshot","remove_tmp_snapshot_archives","serialize_snapshot_data_file","serialize_snapshot_data_file_capped","serialize_status_cache","should_take_full_snapshot","should_take_incremental_snapshot","slot","slots","snapshot_dir","snapshot_path","snapshot_storage_rebuilder","snapshot_type","snapshot_version","snapshot_version","snapshot_version_from_file","source","source","spawn_unpack_snapshot_thread","storage","storage","streaming_snapshot_dir_files","streaming_unarchive_snapshot","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unarchive_snapshot","unpack_dir","unpack_snapshot_local","unpacked_snapshots_dir","unpacked_snapshots_dir_and_version","untar_snapshot_create_shared_buffer","untar_snapshot_in","verify_and_unarchive_snapshots","verify_bank_against_expected_slot_hash","verify_slot_deltas","verify_slot_deltas_structural","verify_slot_deltas_with_history","verify_snapshot_archive","verify_snapshot_bank_us","verify_unpacked_snapshots_dir_and_version","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write_snapshot_version_file","ArchiveFormat","DEFAULT_ARCHIVE_COMPRESSION","InvalidExtension","ParseError","SUPPORTED_ARCHIVE_COMPRESSION","TAR_BZIP2_EXTENSION","TAR_EXTENSION","TAR_GZIP_EXTENSION","TAR_LZ4_EXTENSION","TAR_ZSTD_EXTENSION","Tar","TarBzip2","TarGzip","TarLz4","TarZstd","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","example","example","extension","fmt","fmt","fmt","fmt","from","from","from_cli_arg","from_str","init","init","into","into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","BANK_FIELDS_FILE_REGEX","BankFields","RebuiltSnapshotStorage","STORAGE_FILE_REGEX","SnapshotFileKind","SnapshotStorageRebuilder","Storage","VERSION_FILE_REGEX","Version","__private_field","__private_field","__private_field","__stability","__stability","__stability","__static_ref_initialize","__static_ref_initialize","__static_ref_initialize","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_thread_pool","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","eq","example","example","example","example","example","example","file_receiver","fmt","fmt","from","from","from","from","from","from","get_slot_and_append_vec_id","get_snapshot_file_kind","get_unique_append_vec_id","get_version_and_snapshot_files","init","init","init","init","init","init","insert_storage_file","into","into","into","into","into","into","new","next_append_vec_id","num_collisions","num_threads","process_append_vec_file","process_buffered_files","process_complete_slot","process_snapshot_file","processed_slot_count","rebuild_storage","snapshot_from","snapshot_storage_lengths","snapshot_version","spawn_rebuilder_threads","spawn_receiver_thread","storage","storage","storage_paths","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","wait_for_completion","SortedStorages","SortedStoragesIter","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","empty","example","example","from","from","get","init","init","into","into","into_iter","iter_range","max_slot_inclusive","multiunzip","new","new","new_with_slots","next","next_slot","range","range","range","range_width","slot_count","storage_count","storages","storages","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Error","InstructionError","InvalidDelegation","InvalidOwner","StakeAccount","_phantom","account","account","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","delegation","deref","deref","deref_mut","deref_mut","drop","drop","eq","example","example","example","fmt","fmt","fmt","from","from","from","from","init","init","into","into","lamports","provide","source","stake_state","stake_state","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","StakeHistory","StakeHistoryInner","__Visitor","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","eq","equivalent","equivalent","example","example","example","expecting","fmt","fmt","from","from","init","init","into","into","lifetime","marker","serialize","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","visit_for_abi","visit_for_abi","visit_newtype_struct","visit_seq","vzip","vzip","MAX_ALLOWABLE_DRIFT_PERCENTAGE_FAST","MAX_ALLOWABLE_DRIFT_PERCENTAGE_SLOW_V2","MaxAllowableDrift","_MAX_ALLOWABLE_DRIFT_PERCENTAGE","_MAX_ALLOWABLE_DRIFT_PERCENTAGE_SLOW","borrow","borrow_mut","calculate_stake_weighted_timestamp","clone","clone_into","deref","deref_mut","drop","example","fast","from","init","into","slow","to_owned","try_from","try_into","type_id","vzip","Accounts","BadState","Delegations","Error","FIELDS","InvalidCacheEntryReason","InvalidDelegation","InvalidStakeAccount","Missing","StakeAccount","StakeAccountNotFound","Stakes","StakesCache","StakesEnum","StakesHashMap","VoteAccountMismatch","VoteAccountNotCached","VoteAccountNotFound","WrongOwner","_IMPL_NUM_ToPrimitive_FOR_InvalidCacheEntryReason","__Field","__FieldVisitor","__Visitor","__field0","__field1","__field2","__field3","__field4","__ignore","activate_epoch","activate_epoch","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate_stake","check_and_store","clone","clone","clone_into","clone_into","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","epoch","eq","eq","eq","equivalent","equivalent","example","example","example","example","example","example","example","example","example","example","example","expecting","expecting","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","handle_invalid_keys","highest_staked_node","history","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","lifetime","marker","merge","new","new","provide","remove_stake_delegation","remove_vote_account","serde_stakes_enum_compat","serialize","source","stake_delegations","stake_delegations","stake_history","staked_nodes","staked_nodes","stakes","to_i64","to_owned","to_owned","to_string","to_u64","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unused","upsert_stake_delegation","upsert_vote_account","visit_bytes","visit_for_abi","visit_for_abi","visit_map","visit_seq","visit_str","visit_u64","vote_accounts","vote_accounts","vote_accounts","vote_balance_and_staked","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","deserialize","serialize","STATIC_IDS","__private_field","__stability","__static_ref_initialize","borrow","borrow_mut","deref","deref","deref_mut","drop","example","from","init","into","try_from","try_into","type_id","vzip","CACHED_KEY_SIZE","ForkStatus","KeyMap","KeySlice","KeyStatusMap","MAX_CACHE_ENTRIES","SlotDelta","SlotDeltaMap","Status","StatusCache","add_root","append","as_array","borrow","borrow_mut","cache","clear","clear_slot_entries","clone","clone_into","default","deref","deref_mut","drop","eq","example","example","fmt","from","from_slot_deltas","get_status","get_status_any_blockhash","init","insert","insert_with_slice","into","purge_roots","root_slot_deltas","roots","roots","slot_deltas","to_owned","try_from","try_into","type_id","vzip","StorableAccounts","StorableAccountsBySlot","StorableAccountsMovingSlots","account","account","account","account_default_if_zero_lamport","accounts","borrow","borrow","borrow_mut","borrow_mut","contains_multiple_slots","contains_multiple_slots","contains_multiple_slots","deref","deref","deref_mut","deref_mut","drop","drop","example","example","find_internal_index","from","from","has_hash_and_write_version","has_hash_and_write_version","hash","hash","include_slot_in_hash","include_slot_in_hash","include_slot_in_hash","include_slot_in_hash","include_slot_in_hash","init","init","into","into","is_empty","len","len","len","len","new","old_slot","pubkey","pubkey","pubkey","slot","slot","slot","slots_and_accounts","starting_offsets","target_slot","target_slot","target_slot","target_slot","target_slot","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","write_version","write_version","Address","Nonce","System","SystemAccountKind","address","allocate","allocate_and_assign","assign","base","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","create","create_account","default","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","example","example","fmt","fmt","from","from","get_system_account_kind","init","init","into","into","is_signer","process_instruction","to_owned","transfer","transfer_verified","transfer_with_seed","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","TransactionBatch","bank","bank","borrow","borrow_mut","deref","deref_mut","drop","drop","example","from","init","into","lock_results","lock_results","needs_unlock","needs_unlock","new","sanitized_transactions","sanitized_txs","set_needs_unlock","try_from","try_into","type_id","vzip","TransactionErrorMetrics","account_in_use","account_loaded_twice","account_not_found","accumulate","already_processed","blockhash_not_found","blockhash_too_old","borrow","borrow_mut","call_chain_too_deep","default","deref","deref_mut","drop","example","fmt","from","init","instruction_error","insufficient_funds","into","invalid_account_for_fee","invalid_account_index","invalid_program_for_execution","invalid_rent_paying_account","invalid_writable_account","max_loaded_accounts_data_size_exceeded","new","not_allowed_during_cluster_maintenance","report","too_many_account_locks","total","try_from","try_into","type_id","vzip","would_exceed_account_data_block_limit","would_exceed_max_account_cost_limit","would_exceed_max_block_cost_limit","would_exceed_max_vote_cost_limit","GetTransactionPriorityDetails","TransactionPriorityDetails","borrow","borrow_mut","compute_unit_limit","deref","deref_mut","drop","eq","equivalent","equivalent","example","fmt","from","get_transaction_priority_details","init","into","priority","process_compute_budget_instruction","try_from","try_into","type_id","vzip","VerifyAccountsHashInBackground","background_completed","background_finished","borrow","borrow_mut","check_complete","complete","default","deref","deref_mut","drop","example","fmt","from","init","into","start","thread","try_from","try_into","type_id","verification_complete","verified","vzip","wait_for_complete","Error","InstructionError","InvalidOwner","VoteAccount","VoteAccountInner","VoteAccounts","VoteAccountsHashMap","account","account","add_node_stake","add_stake","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","delegated_stakes","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","example","example","example","example","example","example","example","find_max_by_delegated_stake","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_iter","get","get_delegated_stake","init","init","init","init","insert","into","into","into","into","is_deserialized","iter","lamports","len","node_pubkey","owner","provide","remove","serialize","serialize","source","staked_nodes","staked_nodes","sub_node_stake","sub_stake","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","visit_for_abi","visit_for_abi","visit_for_abi","visit_for_abi","vote_accounts","vote_state","vote_state","vzip","vzip","vzip","vzip","ParsedVote","parse_sanitized_vote_transaction","parse_vote_instruction_data","parse_vote_transaction","ReplayVoteReceiver","ReplayVoteSender","Vote","VoteStateUpdate","VoteTransaction","borrow","borrow_mut","deref","deref_mut","drop","eq","equivalent","equivalent","example","fmt","from","from","from","hash","init","into","is_empty","last_voted_slot","last_voted_slot_hash","slots","timestamp","try_from","try_into","type_id","vzip","WaitableCondvar","borrow","borrow_mut","default","deref","deref_mut","drop","event","example","fmt","from","init","into","mutex","notify_all","notify_one","try_from","try_into","type_id","vzip","wait_timeout"],"q":[[0,"solana_runtime"],[84,"solana_runtime::account_info"],[205,"solana_runtime::account_overrides"],[224,"solana_runtime::account_rent_state"],[250,"solana_runtime::account_rent_state::RentState"],[252,"solana_runtime::account_storage"],[431,"solana_runtime::account_storage::meta"],[627,"solana_runtime::accounts"],[763,"solana_runtime::accounts_background_service"],[972,"solana_runtime::accounts_background_service::stats"],[1015,"solana_runtime::accounts_cache"],[1107,"solana_runtime::accounts_db"],[2648,"solana_runtime::accounts_db::AccountShrinkThreshold"],[2650,"solana_runtime::accounts_db::geyser_plugin_utils"],[2673,"solana_runtime::accounts_db::test_utils"],[2675,"solana_runtime::accounts_file"],[2726,"solana_runtime::accounts_hash"],[3079,"solana_runtime::accounts_index"],[3626,"solana_runtime::accounts_index::ScanError"],[3628,"solana_runtime::accounts_index::ouroboros_impl_read_account_map_entry"],[3821,"solana_runtime::accounts_index_storage"],[3882,"solana_runtime::accounts_update_notifier_interface"],[3887,"solana_runtime::active_stats"],[3950,"solana_runtime::ancestors"],[3983,"solana_runtime::ancient_append_vecs"],[4149,"solana_runtime::append_vec"],[4305,"solana_runtime::append_vec::test_utils"],[4324,"solana_runtime::bank"],[5884,"solana_runtime::bank::TransactionExecutionResult"],[5886,"solana_runtime::bank::metrics"],[5963,"solana_runtime::bank::test_utils"],[5965,"solana_runtime::bank::transaction_account_state_info"],[5980,"solana_runtime::bank_client"],[6029,"solana_runtime::bank_creation_freezing_progress"],[6054,"solana_runtime::bank_forks"],[6173,"solana_runtime::bank_utils"],[6175,"solana_runtime::block_cost_limits"],[6203,"solana_runtime::blockhash_queue"],[6393,"solana_runtime::bucket_map_holder"],[6448,"solana_runtime::bucket_map_holder_stats"],[6542,"solana_runtime::builtins"],[6631,"solana_runtime::builtins::BuiltinFeatureTransition"],[6636,"solana_runtime::cache_hash_data"],[6705,"solana_runtime::cache_hash_data_stats"],[6737,"solana_runtime::commitment"],[6890,"solana_runtime::contains"],[6895,"solana_runtime::cost_model"],[6944,"solana_runtime::cost_tracker"],[7012,"solana_runtime::epoch_accounts_hash"],[7087,"solana_runtime::epoch_accounts_hash::manager"],[7135,"solana_runtime::epoch_accounts_hash::utils"],[7171,"solana_runtime::epoch_stakes"],[7410,"solana_runtime::genesis_utils"],[7457,"solana_runtime::hardened_unpack"],[7540,"solana_runtime::in_mem_accounts_index"],[7753,"solana_runtime::inline_spl_associated_token_account"],[7757,"solana_runtime::inline_spl_associated_token_account::program_v1_1_0"],[7760,"solana_runtime::inline_spl_token"],[7791,"solana_runtime::inline_spl_token::native_mint"],[7795,"solana_runtime::inline_spl_token::program_v3_4_0"],[7798,"solana_runtime::inline_spl_token_2022"],[7817,"solana_runtime::installed_scheduler_pool"],[7917,"solana_runtime::loader_utils"],[7927,"solana_runtime::message_processor"],[8031,"solana_runtime::non_circulating_supply"],[8050,"solana_runtime::nonce_keyed_account"],[8054,"solana_runtime::prioritization_fee"],[8128,"solana_runtime::prioritization_fee_cache"],[8205,"solana_runtime::prioritization_fee_cache::CacheServiceUpdate"],[8209,"solana_runtime::pubkey_bins"],[8231,"solana_runtime::read_only_accounts_cache"],[8282,"solana_runtime::rent_collector"],[8422,"solana_runtime::rent_collector::RentResult"],[8424,"solana_runtime::rent_debits"],[8473,"solana_runtime::rent_paying_accounts_by_partition"],[8513,"solana_runtime::rolling_bit_field"],[8557,"solana_runtime::root_bank_cache"],[8576,"solana_runtime::runtime_config"],[8600,"solana_runtime::secondary_index"],[8738,"solana_runtime::serde_snapshot"],[9069,"solana_runtime::serde_snapshot::newer"],[9388,"solana_runtime::serde_snapshot::storage"],[9481,"solana_runtime::serde_snapshot::types"],[9625,"solana_runtime::serde_snapshot::utils"],[9628,"solana_runtime::shared_buffer_reader"],[9725,"solana_runtime::snapshot_archive_info"],[9812,"solana_runtime::snapshot_config"],[9868,"solana_runtime::snapshot_hash"],[9955,"solana_runtime::snapshot_minimizer"],[9992,"solana_runtime::snapshot_package"],[10123,"solana_runtime::snapshot_package::compare"],[10127,"solana_runtime::snapshot_utils"],[10595,"solana_runtime::snapshot_utils::archive_format"],[10658,"solana_runtime::snapshot_utils::snapshot_storage_rebuilder"],[10786,"solana_runtime::sorted_storages"],[10833,"solana_runtime::stake_account"],[10887,"solana_runtime::stake_history"],[10937,"solana_runtime::stake_weighted_timestamp"],[10961,"solana_runtime::stakes"],[11168,"solana_runtime::stakes::serde_stakes_enum_compat"],[11170,"solana_runtime::static_ids"],[11188,"solana_runtime::status_cache"],[11234,"solana_runtime::storable_accounts"],[11303,"solana_runtime::system_instruction_processor"],[11358,"solana_runtime::transaction_batch"],[11383,"solana_runtime::transaction_error_metrics"],[11424,"solana_runtime::transaction_priority_details"],[11447,"solana_runtime::verify_accounts_hash_in_background"],[11472,"solana_runtime::vote_account"],[11589,"solana_runtime::vote_parser"],[11593,"solana_runtime::vote_sender_types"],[11595,"solana_runtime::vote_transaction"],[11623,"solana_runtime::waitable_condvar"]],"d":["AccountInfo represents a reference to AccountSharedData in …","","","Manage the map of slot -&gt; append vec","","Service to clean up dead slots in accounts_db","","Persistent accounts are stored at this path location: …","","","","","","keep track of areas of the validator that are currently …","","helpers for squashing append vecs into ancient append vecs …","Persistent storage for accounts.","The <code>bank</code> module tracks client accounts and the progress of …","","Keep track of how many banks have been created and how …","The <code>bank_forks</code> module implements BankForks a DAG of …","","defines block cost related limits","","","","","Cached data for hashing accounts","Cached data for hashing accounts","","","’cost_model` provides service to estimate a transaction…","<code>cost_tracker</code> keeps tracking transaction cost per chained …","The Epoch Accounts Hash (EAH) is a special hash of the …","","","","","","","","Transaction processing glue code, mainly consisting of …","","","","","","","","ReadOnlyAccountsCache used to store accounts, such as …","calculate and collect rent from Accounts","","Provide fast iteration of all pubkeys which could possibly …","functionally similar to a hashset Relies on there being a …","A wrapper around a root <code>Bank</code> that only loads from bank …","","","","SharedBuffer is given a Reader and SharedBufferReader …","Information about snapshot archives","","Helper types and functions for handling and dealing with …","Used to create minimal snapshots - separated here to keep …","","","","","This module implements clone-on-write semantics for the SDK…","","Stakes serve as a cache of stake and vote accounts to …","","","trait for abstracting underlying storage of pubkey and …","","","","","","at startup, verify accounts hash in the background","","","","","","","","","This is an illegal value for ‘offset’. Account size on …","We have to have SOME value for store_id when we are cached","","offset within an append vec to account data","how large the offset we store in AccountInfo is Note this …","","specify where account data is located","bytes used to store this account in append vec Note this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts the given bytes directly into the bitfield struct.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the underlying bits.","","","","","Returns the value of is_zero_lamport. use 1 bit to specify …","","Returns the value of is_zero_lamport.","Returns an instance with zero initialized data.","","","Returns the value of offset_reduced. this provides 2^31 …","Returns the value of offset_reduced.","offset = ‘packed_offset_and_flags.offset_reduced()’ * …","","Sets the value of is_zero_lamport to the given value.","Sets the value of is_zero_lamport to the given value.","Sets the value of offset_reduced to the given value.","Sets the value of offset_reduced to the given value.","","","index identifying the append storage","","","","","","","","","","","","","","","","","","","","Returns a copy of the bitfield with the value of …","Returns a copy of the bitfield with the value of …","Returns a copy of the bitfield with the value of …","Returns a copy of the bitfield with the value of …","Encapsulates overridden accounts, typically used for …","","","","","","","","","Returns the argument unchanged.","Gets the account if it’s found in the list of overrides","","Calls <code>U::from(self)</code>.","","Sets in the slot history","","","","","account.lamports &gt;= rent-exempt-minimum","0 &lt; account.lamports &lt; rent-exempt-minimum","","account.lamports == 0","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","iterate contents of AccountStorage without exposing …","","","","","","","exists while there is a shrink in progress keeps track of …","","","","","","","","","assert if shrink in progress is active","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return the append vec in ‘slot’ and with id=‘store_id…","return the append vec for ‘slot’ if it exists This is …","return the append vec for ‘slot’ if it exists","id can be read from ‘storage’, but it is an atomic …","","","","","","","","","initialize the storage map to ‘all_storages’","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","iterate through all (slot, append-vec)","","","map from Slot -&gt; the single append vec for the slot","","","","","","newly shrunk store with a subset of contents from ‘…","","","old store which will be shrunk and replaced","remove the append vec at ‘slot’ returns the current …","","while shrink is operating on a slot, there can be 2 append …","called when shrinking begins on a slot and append vec. …","","the single storage for a given slot","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This struct will be backed by mmaped and snapshotted data …","","","Goal is to eliminate copies and data reshaping given …","","References to account data stored elsewhere. Getting an …","Meta contains enough context to recover the index from …","","","","","","","","","","","None if account at index has lamports == 0 Otherwise, …","accounts to store always has pubkey and account may also …","","","","","","","","","","","","","","","","","","","","Return a new Account by copying all the data referenced by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","this account’s data contains a loaded program (and is …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","get all account fields at ‘index’","","if accounts does not have hash and write version, this has …","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","lamports in the account","accounts to write","","","","used when accounts contains hash and write version already","used when accounts does NOT contains hash or write version …","","","","the program that owns this account. If executable, the …","","key for the account","","the epoch at which this account will next owe rent","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","global write version This will be made completely obsolete …","","","This structure handles synchronization for db","","","","","","","","","set of read-only and writable accounts which are currently …","","","Single global AccountsDb","Accumulate loaded account data size into …","Accumulate size of (pubkey + account) into sum. Return …","Add a slot to root.  Root slots cannot be purged","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a hash map of executable program accounts (program …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","If feature <code>cap_transaction_accounts_data_size</code> is active, …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Slow because lock is held for 1 operation instead of many …","","","","","","","","This function will prevent multiple threads from modifying …","","","","","","","","","","","","","","","","scans underlying accounts_db for this delta (slot) with a …","","Store the accounts into the DB","Slow because lock is held for 1 operation instead of many. …","","","","","","","","","","","","","","","Once accounts are unlocked, new transactions that modify …","","","","Only called from startup or test code.","","","","","","","","","","interval to report bank_drop queue events: 60s","","","","","","maximum drop bank signal queue length","","","","","","","","","","What type of request is this?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compare snapshot requests; used to pick the highest …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The instant this request was send to the queue. Used to …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the next snapshot request to handle","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Get the AccountsPackageType from a given SnapshotRequest","","","","","","","","Should be called immediately after …","","","","","","","Stats for Accounts Background Services","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Stats for Accounts Background Services","Manage the Accounts Background Service stats","","","","","Total runtime of all iterations","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Maximum runtime seen for one iteration","Maybe submit the datapoints based on how long it has been …","Calculate the mean runtime of all iterations","Minimum runtime seen for one iteration","Make a new StatsManager","Number of iterations recorded","","Record stats from this iteration","Record stats from this iteration, and maybe submit the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","temporarily here during feature activation since we …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Persistent storage structure holding the accounts","","","","","","hold alive accounts alive means in the accounts index","","","ancient storages are created by appending","","called on a struct while scanning append vecs","An offset into the AccountsDb::storage vector","","","write to cache","","","","Specify the source of the accounts data when calculating …","Which accounts hash calculation is being performed?","","","","while combining into ancient append vecs, we need to keep …","","","","","","","","normal reclaim mode","","","","","","","","","","","","used by tests for ‘include_slot_in_hash’ parameter …","","","","","","","","","","","","","","","","","","","","","","","","do not return reclaims from accounts index upsert","this is the status quo, prior to feature activation …","temporary enum during feature activation of ignore slot …","","","","","Use the following option to shrink all stores whose alive …","this option should not be used. If it is, this is a panic …","","","","","specifies how to return zero lamport accounts from a load","","","","","","","","","","return None if loaded account has zero lamports","","","","ancient storages are created by 1-shot write to pack …","","","","","this is the value once feature activation occurs do NOT …","Removing unrooted slots in Accounts Background Service …","","","","state to keep while scanning append vec accounts for hash …","","","","","separate pubkeys into those with a single refcount and …","","","","","","results from ‘split_storages_ancient’","write to storage","","","","","","","","","","","Measure the total space sparseness across all candidates …","","","Configuration Parameters for running accounts hash and …","","","","","","","","","","","","","index entries that need to be held in memory while shrink …","","","Return Ok(index_of_matching_owner) if the account owner at …","","storage holding the accounts","","","","","","","oldest slot that is not ancient, relative to the highest …","","Keeps tracks of index into AppendVec on a per slot basis","","","GeyserPlugin accounts update notifier","accumulated results","","","","","","","","","","","","add all ‘pubkeys’ into the set of pubkeys that are ‘…","for each account in <code>unrefed_pubkeys</code>, in each …","","","","","all alive accounts","","","","","","","","","total size in storage of all alive accounts","","true if all alive accounts are zero lamport accounts","true if all alive accounts are zero lamports","","","","bank ancestors","if None, ancient append vecs are set to …","Some(offset) iff we want to squash old append vecs …","","","ancient slots","the specific ancient slots","note this requires that ‘slot_and_append_vec’ is Some","","return slot + offset, where offset can be +/-","This is the total number of accounts stored ever since …","","if we ever try to calc hash where there are squashed …","when stakes cache consistency check occurs, assert that …","from AccountsDbConfig","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","given all accounts per ancient slot, in slots that we want …","return alive roots to retain, even though they are ancient","go through all slots and populate ‘SlotInfo’, per slot …","increment store_counts to non-zero for all stores that can …","","Calculate accounts delta hash for <code>slot</code>","","","","","Calculate the incremental accounts hash","","","","","","","chunks to use to iterate the storages","","Call clean_accounts() with the common parameters that …","Reclaim older states of accounts older than …","","","pubkeys_removed_from_accounts_index - These keys have …","","","pubkeys_removed_from_accounts_index - These keys have …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","calculate all storage info for the storages in slots Then, …","Collect all the uncleaned slots, up to a max slot","Combine all account data from storages in ‘sorted_slots…","Combine account data from storages in ‘sorted_slots’ …","","1.13 and some 1.14 could produce legal snapshots with more …","put entire alive contents of ‘old_storage’ into the …","","","","Construct a vec of pubkeys for cleaning from: …","","Number of filler accounts","","Keeps track of the number of accounts stored in a specific …","","how to create ancient storages","from AccountsDbConfig","","","","","","","","","slot we’re currently scanning","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","number of ancient append vecs that were scanned because …","","","Set of stores which are recently rooted or had accounts …","","","if ‘load_into_read_cache_only’, then return value is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","the full accounts hash calculation as of a predetermined …","epoch_schedule","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","called with cli argument to verify refcounts are correct …","","debug feature to scan every append vec and verify …","","","","","","","","Starting file size of appendvecs","number of slots remaining where filler accounts should be …","","","","","true if it is possible that there are filler accounts …","number of filler accounts to add for each slot","","","","return true if this pubkey should be included","","During clean, some zero-lamport accounts that are marked …","","find slot &gt;= ‘slot’ which is a root or in ‘ancestors…","finish shrink operation on slots where a new storage was …","","slot # of beginning of first aligned chunk starting from …","lowest slot that is not an ancient append vec","","","remove all entries from the read only accounts cache …","","flush all accounts in this slot","<code>should_flush_f</code> is an optional closure that determines …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","found <code>account</code> in the append vec","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Get the accounts delta hash for <code>slot</code> in the …","Get the accounts hash for <code>slot</code>","get the oldest slot that is within one epoch of the …","","","return all ancient append vec slots from the early slots …","Get the bank hash stats for <code>slot</code> in the <code>bank_hash_stats</code> map","normal code path returns the common cache path when called …","return ‘AccountSharedData’ and a hash for a filler …","","","Get the incremental accounts hash for <code>slot</code>","‘accounts’ that exist in the current slot we are …","","return pubkeys from <code>many_refs</code> accounts","return <code>slot</code> - slots_in_epoch + 1 The resulting slot is …","if ancient append vecs are enabled, return a slot ‘…","","","helper to return","","given chunk in 0&lt;=chunk&lt;self.chunk_count return the range …","Get storages to use for snapshots, for the requested slots","return all slots that are more than one epoch old and thus …","given ‘normal_chunk’, return the starting slot of that …","get the storage from ‘slot’ to squash or None if this …","return a store that can contain ‘aligned_total’ bytes","","","get all accounts in all the storages passed in for …","for each slot in ‘ancient_slots’, collect all accounts …","","","each slot in ‘dropped_roots’ has been combined into an …","Removes the accounts in the input <code>reclaims</code> from the …","","","","","","","","hash info about ‘storage’ into ‘hasher’ return …","","","","true to ignore mismatches","","","","index entries we need to hold onto to keep them from …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","initialize accumulator","","Gradual means filler accounts will be added over the …","","Insert a default bank hash stats for <code>slot</code>","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","true if drop_callback is attached to the bank.","","","","ancient slots are the first chunks","true if ‘pubkey’ is a filler account","","","","","","","","","","","","","","","","","load the account index entry for the first <code>count</code> items in …","note this returns None for accounts with zero lamports","","Used to disable logging dead slots during removal. allow …","","","get stores for ‘slot’ Drop ‘shrink_in_progress’, …","storages are sorted by slot and have range info. add all …","","","","","filler accounts are space-holding accounts which are …","Startup processes can consume large amounts of memory …","All accounts in ‘slot’ will be moved to ‘…","","","","","","","When calculating accounts hash, we break the …","","","","","","","","create once ancient slots have been identified This is …","","","distribute the accounts across storage lists","non-ancient slots to scan","start and end(exclusive) of normal (non-ancient) slots to …","","Notify the plugins of of account data when AccountsDb is …","hash calc is completed as of ‘slot’ so, any process …","","","","","","","","","","","","","","","","","","Set of storage paths to pick from","","","","","","pubkeys_removed_from_accounts_index - These keys have …","","","","","","Purge the backing storage entries for the given slot, does …","","Purge accounts hashes that are older than …","This should only be called after the <code>Bank::drop()</code> runs in …","","","","","Purges every slot in <code>removed_slots</code> from both the cache and …","","","","","Only guaranteed to be safe when called from rent collection","","","","","","","","","","Remove “bank hash info” for <code>slot</code>","Remove “bank hash info” for <code>slots</code>","","","","","pubkeys_removed_from_accounts_index - These keys have …","","get rid of historical roots that are older than ‘min_root…","common code from shrink and combine_ancient_slots get rid …","","","Remove <code>slots</code> from <code>uncleaned_pubkeys</code> and collect all pubkeys","Remove uncleaned slots, up to a maximum slot, and return …","","Set of slots currently being flushed by <code>flush_slot_cache()</code> …","rent_collector","","","","","","","","","","","","","","","","","After calling <code>shrink_collect()</code> on many slots, any dead …","","","","","","","Scan a specific slot through all the account storage","Scan through all the account storage in parallel. Returns …","","iterate over a single storage, calling scanner on each item","scan ‘storages’, return a vec of ‘CacheHashDataFile…","","","scanning is done","","Given the input <code>ShrinkCandidates</code>, this function sorts the …","","","Set the accounts delta hash for <code>slot</code> in the …","After deserializing a snapshot, set the accounts delta …","Set the accounts hash for <code>slot</code>","After deserializing a snapshot, set the accounts hash for …","","","Set the incremental accounts hash for <code>slot</code>","After deserializing a snapshot, set the incremental …","","set current slot of the scan","","","","true if write cache is too big","return true if the accounts in this slot should be moved …","","","get a sorted list of slots older than an epoch squash …","","","Set of shrinkable stores organized by map of slot to …","shared code for shrinking normal slots and combining into …","","","","","","","Data size per account, in bytes","","true iff we want to skip the initial hash calculation on …","","note this requires that ‘slot_and_append_vec’ is Some","","","slot the accounts are currently stored in","","","","","","","","","","","","return Some(lamports_to_top_off) if ‘account’ would …","","","","","","","","","","","","","","","","","helper function to cleanup call to ‘store_accounts_frozen…","","","true to dump debug log if mismatch happens","","","","","","","","Store the account update. only called by tests","","","","","","","","","Directory of paths this accounts_db needs to hold/remove","true to verify hash calculation","A set of utility functions used for testing and …","Thread pool used for par_iteret of unique keys per slot which is used to drive …","","lookup each pubkey in ‘purged_slot_pubkeys’ and unref …","‘accounts’ are about to be appended to an ancient …","lookup each pubkey in ‘pubkeys’ and unref it in the …","pubkeys that were unref’d in the accounts index because …","","","","","","","When reconstructing AccountsDb from a snapshot, insert the …","Calculate the incremental accounts hash for <code>storages</code> and …","","","","","","","true to use dedicated background thread pool for …","Verify accounts hash at startup (or tests)","","","","Used during generate_index() to:","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","create append vec of size ‘bytes’ write ‘…","For each slot and alive accounts in ‘accounts_to_combine…","","","create packed storage and write contents of ‘packed’ …","write packed storages as described in ‘…","","","","How should zero-lamport accounts be handled by this …","Zero-lamport accounts that are <em>not</em> purged during clean …","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","An enum for accessing an accounts file which can be …","","","Return iterator for account metadata","","Return a vector of account metadata for each account, …","Copy each account metadata, account and hash to the …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Return (account metadata, next_index) pair for the account …","Return the path of the underlying account file.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Create an AccountsFile instance from the specified path.","","","","","By default, all AccountsFile will remove its underlying …","","","","","","","","","1 file containing account hashes sorted by pubkey","Hash of accounts written in a single slot","Hash of accounts","Hash of accounts","","parameters to calculate accounts hash","While scanning appendvecs, this is the info that needs to …","used by merkle tree calculation to lookup account hashes …","","","","","","","","","Hash of accounts that includes zero-lamport accounts Used …","","1 file containing account hashes sorted by pubkey, mapped …","the data passed through the processing functions","","","How should zero-lamport accounts be treated by the …","","","‘ancestors’ is used to get storages","ancient append vecs encountered","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","verify every hash in append vec/write cache with a …","","","","","","","","","","","","","","","","","","","","","hashes stored in this file","","hashes and an open file that will be deleted on drop. None …","look up reader index and offset by overall index","","returns: Vec, with one entry per bin for each entry, Vec …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","does hash calc need to consider account data that exists …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","true if it is possible that there are filler accounts …","given overall start index ‘start’ return (‘start’, …","find the index of the data source that contains ‘start’","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calculate offset from overall index to which file and …","","","return references to cache hash data, grouped by bin, …","","map the file into memory and return a reader that can …","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","return a slice of account hashes starting at ‘index’","source of hashes in order","time spent determining whether to rehash during rehash …","time spent hashing during rehash calls","rehashes that took place and were necessary","rehashes that took place and were UNnecessary","","","","","","","","","","","used for tracking down hash mismatches after the fact","","","","","","","","total # of items referenced","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","true to use a thread pool dedicated to bg operations","","","","","","","","","","","","","","","write ‘hash’ to the file If the file isn’t open, …","","","","","","","","","","one entry in the in-mem accounts index Represents the …","data per entry in in-mem accounts index used to keep track …","","","","T: account info type to interact in in-memory items U: …","","","","","","","","","","","(index entry, index in slot list)","","","","","","","","overwrite existing data in the same slot and do not return …","in-mem-only was specified, no disk index","","specification of how much memory in-mem portion of account …","","","","keep the entry in the in-memory index","limit was specified, use disk index for rest","","","","if the entry is not in the in-memory index, do not add it, …","","previous entry for this slot in the index may need to be …","can be used to pre-allocate structures for insertion into …","previous entry for this slot in the index is expected to …","","","","The self-referencing struct.","","","","","","","","","","","","","","","","reduce refcount by 1","nothing explicit specified, so default","how accounts index ‘upsert’ should handle reclaims","","mark the scan as aborted","checked by the scan. When true, abort scan.","","","scans active currently","","","","","‘age’ at which this entry should be purged from the …","","Current roots where appendvecs or write cache has account …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","When can an entry be purged?","Remove the slot when the storage for the slot is freed …","","return true if pubkey was removed from the accounts index …","","set dirty to false, return true if was dirty","","","","","","","","","","","","","","","","","","","","true to allow return of all matching items and allow them …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","true if entry in in-mem idx has changes and needs to be …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get an account The latest account that appears in <code>ancestors</code>…","","","","","","","","return the lowest original root &gt;= slot, including …","","Given a list of slots, return a new list of only the slots …","","Remove keys from the account index if the key’s slot …","","Set of roots that are roots now or were roots at one point …","","","","","","call func with every pubkey and index visible from a given …","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","true if scan should abort","","","is the accounts index using disk as a backing store","","","","","","","","","","","","log any secondary index counts, if non-zero","","of slots between latest max and latest scan","","synchronization metadata for in-memory state since last …","","","","","create an entry that is equivalent to this process:","","","","","","","","","","","Encapsulates implementation details for a self-referencing …","return Vec&lt;Vec&lt;&gt;&gt; because the internal vecs are already …","","","","","","","","","call func with every pubkey and index visible from a given …","use existing ‘abort’ if available, otherwise allocate …","","number of alive slots that contain &gt;= 1 instances of …","","roots are inserted into ‘historical_roots’ and ‘roots…","","populated at generate_index time - accounts that could …","","","roots added since last check","","","roots removed since last check","","For each pubkey, find the slot list in the accounts index …","call func with every pubkey and index visible from a given …","","when a scan’s accumulated data exceeds this limit, abort …","","","","list of slots in which this pubkey was updated Note that …","","","","","","true if the accounts index is being created as a result of …","","","","","","","","","","","set age to ‘next_age’ if ‘self.age’ is ‘…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","decrement the ref count return true if the old refcount …","","","","Updates the given pubkey at the given slot with the new …","","","","","","","","","","","","","","","","","","","","","","","A struct for holding immutable references to all tail and …","A struct for holding mutable references to all tail fields …","A struct which contains only the head fields of …","The self-referencing struct.","A more verbose but stable way to construct …","A more verbose but stable way to construct …","A more verbose but stable way to construct …","A more verbose but stable way to construct …","A more verbose but stable way to construct …","A more verbose but stable way to construct …","","","","","","","","","","","","","","","","","","","","","","","","","Provides limited immutable access to <code>owned_entry</code>. This …","Provides an immutable reference to <code>slot_list_guard</code>. This …","Calls <code>ReadAccountMapEntry::new()</code> using the provided …","Calls <code>ReadAccountMapEntry::new()</code> using the provided …","Calls <code>ReadAccountMapEntry::new()</code> using the provided …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","This function drops all internally referencing fields and …","Constructs a new instance of this self-referential struct. …","Constructs a new instance of this self-referential struct. …","Constructs a new instance of this self-referential struct. …","","","","","","","","","","","","","","","","","","","","Calls <code>ReadAccountMapEntry::try_new()</code> using the provided …","Calls <code>ReadAccountMapEntry::try_new()</code> using the provided …","Calls <code>ReadAccountMapEntry::try_new()</code> using the provided …","Calls <code>ReadAccountMapEntry::try_new_or_recover()</code> using the …","Calls <code>ReadAccountMapEntry::try_new_or_recover()</code> using the …","Calls <code>ReadAccountMapEntry::try_new_or_recover()</code> using the …","","","","","","","","","","","","","","","","","","","","","(See also <code>ReadAccountMapEntryTryBuilder::try_build()</code>.) …","(See also <code>ReadAccountMapEntryAsyncTryBuilder::try_build()</code>…","(See also …","(See also …","(See also …","(See also …","","","","","","","","","","","","","","","","","","","","","","This method provides immutable references to all tail and …","This method provides mutable references to all tail fields.","Provides limited immutable access to <code>owned_entry</code>. This …","Provides an immutable reference to <code>slot_list_guard</code>. This …","Provides a mutable reference to <code>slot_list_guard</code>. This …","Manages the lifetime of the background processing threads.","low-level managing the bg threads","not startup, but steady state execution","modes the system can be in","startup (not steady state execution) requesting ‘startup…","startup (not steady state execution) but also requesting …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","estimate how many items are still needing to be flushed to …","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","allocate BucketMapHolder and InMemAccountsIndex[]","","","startup=true causes: in mem to act in a way that flushes …","","set_startup(true) creates bg threads which are kept alive …","","","","","","","","","","","","","","","","","Notified when the AccountsDb is initialized at start when …","Notified when an account is updated at runtime, due to …","Notified when all accounts have been notified when …","sole purpose is to handle ‘drop’ so that stat is …","","counters of different areas of a validator which could be …","","","","","","create a stack object to set the state to increment stat …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","update and log the change to the specified ‘item’","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","hold all alive accounts to be shrunk and/or combined","reference a set of accounts to store The accounts may have …","info for all storages in ancient slots ‘all_infos’ …","","intended contents of a packed ancient storage","ancient packing algorithm tuning per pass","","info about a storage eligible to be combined into an …","a set of accounts need to be stored. If there are too many …","Used to hold the result of writing a single ancient storage","","accounts to move into this storage, along with the slot …","slots and alive accounts that must remain in the slot they …","all the rest of alive accounts that can move slots and …","add info for ‘storage’","alive bytes in storage","info on all ancient storages","","","","","","","","","","","","","","","","","total bytes required to hold ‘accounts’","true if storages can be randomly shrunk even if they aren…","total capacity of storage","after this function, only slots that were chosen to shrink …","clear ‘should_shrink’ for storages after a cutoff to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","modify ‘self’ to contain only the slot infos for the …","remove entries from ‘all_infos’ such that combining …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","get the accounts to store in the given ‘storage’","capacity of an ancient append vec","true if a request to ‘get’ ‘Overflow’ would return …","of bytes in an ideal ancient storage size","if ‘accounts’ contains more items than can be …","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","is this a max-size append vec designed to be used as an …","number of ancient slots we should aim to have. If we have …","","break ‘stored_accounts’ into primary and overflow …","return a minimal set of ’PackedAncientStorage’s to …","shrink enough of these ancient append vecs to realize …","true if this should be shrunk due to ratio","indexes to ‘all_info’ for storages that should be …","‘ShrinkInProgress’ instances created by starting a …","","slot of storage","","","slots that contain alive accounts that can move into ANY …","","total alive bytes across all slots","total alive bytes across contents of ‘shrink_indexes’","truncate ‘all_infos’ such that when the remaining …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A thread-safe, file-backed block of memory used to store …","","References to account data stored elsewhere. Getting an …","","","","","","size of the fixed sized fields in an append vec we need to …","","","","","Return iterator for account metadata","Return Ok(index_of_matching_owner) if the account owner at …","account data","Return a vector of account metadata for each account, …","Returns the size this item will take to store plus …","Copy each account metadata, account and hash to the …","A lock used to serialize append operations.","Copy <code>len</code> bytes from <code>src</code> to the first 64-byte boundary …","Copy each value in <code>vals</code>, in order, to the first 64-byte …","","","","","","","","","","","","","","The number of bytes used to store items, not the number of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The number of bytes available for storing items.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return stored account metadata for the account at <code>offset</code> …","","","Get a reference to the data at <code>offset</code> of <code>size</code> bytes if …","Return a reference to the type at <code>offset</code> if its data doesn…","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","A file-backed block of memory that is used to store the …","","","","","","Creates an appendvec from file without performing sanitize …","","","","","","The file path where the data is stored.","","","","how many more bytes can be stored in this append vec","True if the file should automatically be deleted when this …","","","","","","","","","","","","Helpers for AppendVec tests and benches","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","Since <code>apply_feature_activations()</code> has different behavior …","","Manager for the state of all accounts and programs after …","","","Incremental snapshots only calculate their accounts hash …","","","","","","Return the computed values from …","Return the computed values—of each iteration in the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An ordered list of compiled instructions that were invoked …","A list of compiled instructions that were invoked during …","","","","","","","","","Holds fee subtracted nonce info","","Holds limited nonce info available during transaction …","","","","","","","","","","","","","","","","","","","type alias is not supported for trait in rust yet. As a …","","","","","","","","","","Struct to collect stats when scanning all accounts in …","","","","","Type safe representation of a transaction execution …","","","","","A list of log messages emitted during a transaction","","","","","params to <code>verify_accounts_hash</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","map stake delegations into resolved (pubkey, account) pairs","","","","","","","","","where all the Accounts are stored","","","The change in accounts data len for this transaction. …","The change to accounts data size in this Bank, due to …","The change to accounts data size in this Bank, due …","The initial accounts data size at the start of this Bank, …","The maximum allowed size, in bytes, of the accounts data","","","","","Add an instruction processor to intercept instructions …","Add a builtin program account","","Add a precompiled program account","","","","","","","","","","","The set of parents including this bank","","","","","true when the bank’s freezing or destruction has …","","true if rent collection does NOT rewrite accounts whose …","","","","Return the block_height of this bank","","","Bank block_height","","","FIFO queue of <code>recent_blockhash</code> items","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Dynamic feature transitions for builtin programs","","The builtin programs","","","Calculate the data size delta and update the off-chain …","only called from tests or ledger tool","only called from ledger-tool or tests","Compute how much an account has changed size.  This …","Calculate fee for <code>SanitizedMessage</code>","","","","Given all the accounts for a bank, calculate stats","","Return the total capitalization of the Bank","","","Total capitalization, used to calculate inflation","","","","","","","Checks a batch of sanitized transactions again bank for …","","","Forget all signatures. Useful for benchmarking.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Collect rent from <code>accounts</code>","convert ‘partition’ to a pubkey range and ‘…","load accounts with pubkeys in ‘subrange_full’ collect …","","","","Rent that has been collected","","","Fees that have been collected","","","","The pubkey to send transactions fees to.","","<code>committed_transactions_count</code> is the number of transactions …","","","","","","","","","","Total data size of all accountscallback function only to be called when dropping and …","","","","","","","Bank epoch","Convenience fn to get the Epoch Accounts Hash","","Get the fixed authorized voter for the given vote account …","","","","","initialized from genesis","","Get the EpochStakes for a given epoch","","","staked nodes on epoch boundaries, saved off when a …","","Get the fixed stake of the given vote account for the …","vote accounts for the specific epoch along with the stake …","Get the fixed set of vote accounts for the given node id …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Total data size of executable accounts","Execute a transaction using the provided loaded accounts …","","Return the transaction count executed only in this bank","","","","","","Cached executors","","","","","","","","","","","Deprecated, do not use Latest transaction fees for …","","","","","","","","Track cluster signature throughput and adjust fee rate","Transaction fee structure","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","capitalization from the full snapshot","accounts hash from the full snapshot","slot of full snapshot","","","","","genesis time, used for computed clock","","","","","","","","","Each program would need to be able to introspect its own …","","","Get the EAH that will be used by snapshots","given a slot, return the epoch and offset into the epoch …","","","","","Return subset of bank fields representing serializable …","","","","","","","","","","returns the epoch for which this bank’s …","","","","","return all end partition indexes for the given partition …","","","","","","get all pubkeys that we expect to be rent-paying or None, …","","","","","","Return the number of slots per epoch for the given epoch","","Get this bank’s storages to use for snapshots.","Get stake and stake node accounts","","","","","","Get all the accounts for this bank and calculate stats","Get the max number of accounts that a transaction may lock …","","","Vote account for the given vote account pubkey.","","","","slots to hard fork at","return true if bg hash verification is complete return …","","","","","Hash of this Bank’s state. Only meaningful after …","Hash the <code>accounts</code> HashMap. This represents a validator’s …","","Return the number of hashes per tick","","","The number of hashes in each tick. None value means …","","","true if we should include the slot in account hash","","","","capitalization of the accounts in the incremental snapshot …","hash of the accounts in the incremental snapshot slot …","","","Return the inflation parameters of the Bank","","","inflation specs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extract the InnerInstructionsList from a TransactionContext","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","A boolean reflecting whether any entries were recorded …","","","","","","","","Total amount of lamports in rent paying accounts","","","","","Return the last block hash registered.","","","","","","","Load the accounts data size, in bytes","Load the change in accounts data size in this Bank, in …","Load the change in accounts data size in this Bank, in …","Load the change in accounts data size in this Bank, in …","","","","Process a batch of transactions.","","","","","","","","","","","","","","","Return this bank’s max_tick_height","","","","","","","","","","","","","Create a new <code>CollectRentInPartitionInfo</code> from the results …","","","","Create a bank from explicit arguments and deserialized …","Create a new bank that points to an immutable checkpoint …","","","","","","","","","","","The number of non-vote transactions processed without …","","","length of a slot in ns","","","","Total number of accounts","Total number of executable accounts","Total number of rent exempt accounts","Total number of rent paying accounts","Total number of rent paying accounts without data","Return the more recent checkpoint of this bank instance.","Previous checkpoint of this bank","","","","Hash of this Bank’s parent’s state","","","","parent’s slot","Compute all the parents of the bank in order","Compute all the parents of the bank including this bank …","","This is the inverse of pubkey_range_from_partition. return …","","","Load, calculate and payout epoch rewards for stake and …","","","","","","Prepare a transaction batch from a list of legacy …","Prepare a transaction batch from a list of versioned …","Prepare a locked transaction batch from a list of …","Prepare a locked transaction batch from a list of …","","","","","Process entry transactions in a single batch. This is used …","","process for the start of a new epoch","Process a Transaction. This is used for unit tests and …","","Process a Transaction and store metadata. This is used for …","Process multiple transaction in a single batch. This is …","Returns all ancestors excluding self.slot.","","","References to accounts, parent and signature status","","","","","Reduce (i.e. ‘combine’) two <code>CollectRentInPartitionInfo</code>…","Register a new recent blockhash in the bank’s recent …","Tell the bank which Entry IDs exist on the ledger. This …","","Remove a builtin instruction processor if it already exists","Remove an executor from the bank’s cache","","","","","","","","latest rent collector, knows the epoch","","","","","","","","","","","","","","","Protocol-level rewards that were distributed by this bank","","","","Optional config parameters that can override runtime …","","","","","","","","","","","Set the initial accounts data size NOTE: This fn is <em>ONLY </em>…","","Forcibly overwrites current capitalization by actually …","","","Specify that initial verification has completed. Called …","","","This can occur because it completed in the background or …","","","The epoch accounts hash is hashed into the bank’s hash …","","","","","","","","The number of signatures from valid transactions in this …","Run transactions against a frozen bank without committing …","Run transactions against a bank without committing the …","return true iff storing this account is just a rewrite and …","","Current slot","","","Bank slot (i.e. block)","","","","","Return the number of slots per year","","","The number of slots per year, used for inflation","squash the parent’s state up into this Bank, this Bank …","","","","","","Invocation stack height of this instruction. Instruction …","","","","","","","cache of vote_account and stake_account state for this fork","","A cache of signature statuses","","","Technically this issues (or even burns!) new lamports, so …","","Add executors back to the bank’s cache if they were …","Add re-/deployed executors to the bank’s cache","","","","","","","","utility function used for testing and benchmarking.","Return the number of ticks since genesis.","","","Bank tick height","Return the number of ticks per slot","","","The number of ticks in each slot.","","","","","","","","","","","","","","","","","","","","","","Get the fixed total stake of all vote accounts for current …","","Return the accumulated executed transaction count","","","The number of transactions processed without error","","","The number of transaction entries in this slot","","The number of transaction errors in this slot","","","","The max number of transaction in an entry in this slot","Create, sign, and process a Transaction from <code>keypair</code> to <code>to</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Process multiple transaction in a single batch. This is …","Process multiple transaction in a single batch. This is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","computed unix_timestamp at this slot height","","Update the accounts data size delta from off-chain events …","Update the accounts data size off-chain delta NOTE: This …","Update the accounts data size delta from on-chain events …","","","","","","","Calculate the incremental accounts hash from <code>base_slot</code> to …","","","","","","","","","a bank-level cache of vote accounts and stake delegation …","","","","","","","used only by filler accounts in debug path previous means …","","","","Recalculate the hash_internal_state from the account …","","A snapshot bank should be purged of 0 lamport accounts …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","current vote accounts for this bank along with the stake …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If the epoch accounts hash should be included in this …","Like <code>new_from_parent</code> but additionally:","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","Create and process a transaction from a single instruction.","","","","","Transfer <code>lamports</code> from <code>keypair</code> to <code>pubkey</code>","","","","","Keeps track of when all banks that were started as of a …","Incremented each time a bank is created. Starting now, …","Incremented each time a bank is frozen or destroyed. At …","enable waiting for bank_freeze_or_destruction_count to …","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Create a map of bank slot id to the set of ancestors for …","","","","","","","","","","","","","","","","","","","","","","","","","","Create a map of bank slot id to the set of all of its …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Gets a read-only wrapper to an atomic slot holding the …","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","After setting a new root, prune the banks that are no …","","","","","","","","","","","","","Determine if this bank should request an epoch accounts …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Number of compute units for each built-in programs","Cluster averaged compute unit to micro-sec conversion rate","Number of data bytes per compute units","The maximum allowed size, in bytes, that accounts data can …","Static configurations:","Statically computed data:","number of concurrent processes,","Number of compute units that a block can have for vote …","Number of compute units that a writable account in a block …","Number of compute units for one signature verification.","Number of compute units for one write lock","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Low memory overhead, so can be cloned for every checkpoint","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Check if the age of the hash is within the queue’s max …","Check if the age of the hash is within the specified age","","last hash to be registered","index of last hash to be registered","","","","","hashes older than <code>max_age</code> will be dropped from the queue","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","These three ages are individual atomics because their …","prepare for this to be dynamic if necessary For example, …","","how many ages should elapse from the last time an item is …","have all buckets been flushed at the current age?","have all buckets been flushed at the current age?","","","","","","","","","","","","","","","Returns the argument unchanged.","","rolling age that is ‘ages_to_stay_in_cache’ + ‘age’","rolling age that is effectively ‘age’ - 1 these items …","used by bg processes to determine # active threads and how …","","","","Calls <code>U::from(self)</code>.","is the accounts index using disk as a backing store","if all buckets are flushed at the current age and time has …","if all buckets are flushed at the current age and time has …","","","","","startup=true causes: in mem to act in a way that flushes …","true if this thread can sleep","startup is a special time for flush to focus on moving …","","","Check progress this age. Return ms to wait to get closer …","return an amount of ms to sleep","","","","","","return when the bg threads have reached an ‘idle’ state","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","This is an estimate of the # of items in mem that are …","return min, max, sum, median of data","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Add a builtin program if a feature is activated.","","Actions taken by a bank when managing the list of active …","State transition enum used for adding and removing builtin …","","","Remove a builtin program if a feature is activated or …","","","","","","","","","Dynamic feature transitions for builtin programs","","","","","","","","","","","","","","","","","","","","","","","","","","","Dynamic feature transitions for builtin programs","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Builtin programs that are always available","Builtin programs that are always available","","Returns the addresses of all builtin programs.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","return a slice of a reference to all the cache hash data …","return byte offset of entry ‘ix’ into a slice which …","","get ‘&amp;mut EntryType’ from cache file [ix]","get ‘&amp;EntryType’ from cache file [ix..]","get the bytes representing cache file [ix]","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","map ‘file_name’ into memory","create and return a MappedCacheFile for a cache file path","","","","","save ‘data’ to ‘file_name’","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","A node’s view of cluster commitment as per a particular …","","","","","","","","","Map of all commitment levels of current ancestor slots, …","","","","","","","","","","","","","","","","","","","","Cache slot details. Cluster data is calculated from the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Highest cluster-confirmed root","","Highest cluster-confirmed slot","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","The current node root","","","","","","The slot of the bank from which all other slots were …","","","","","Total stake active during the bank’s epoch","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","eventually, potentially determine account data size of all …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","would exceed account data block limit","would exceed account data total limit","would exceed account max limit","would exceed block max limit","would exceed vote max limit","","","The amount of total account data size remaining.  If <code>Some</code>, …","","Apply additional actual execution units to cost_tracker","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Construct and new CostTracker and set the account data …","count number of none-zero CU accounts","","","","allows to adjust limits initiated during construction","Subtract extra execution units from cost_tracker","","","","","","","","","","","","","","","","","All the EAH calculation information for a specific epoch","The EpochAccountsHash holds the result after calculating …","Manage the epoch accounts hash","","","","","","","For the epoch that <code>bank</code> is in, get all the EAH calculation …","Get the number of slots from EAH calculation start to …","Number of slots from EAH calculation start to stop","Calculation of the EAH occurs once per epoch.  All nodes …","Offset into the epoch when the EAH calculation starts","Calculation of the EAH occurs once per epoch.  All nodes …","Offset into the epoch when the EAH calculation stops","For the epoch that <code>bank</code> is in, get the slot that the EAH …","Absolute slot where the EAH calculation starts","For the epoch that <code>bank</code> is in, get the slot that the EAH …","Absolute slot where the EAH calculation stops","","","","","This condition variable is used to wait for an in-flight …","","","","","","","","The epoch this information applies to","","","","","","","First slot in this epoch","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Is the EAH enabled this Epoch?","Is this bank in the calculation window?","Last slot in this epoch","","","","Make an EpochAccountsHash from a regular accounts hash","","Number of slots in this epoch","Current state of the epoch accounts hash","","","","","","","","Utility functions and types for Epoch Accounts Hash","","","","","","","An EAH calculation has been requested (for <code>Slot</code>) and is in …","The initial state of the EAH.  This can occur when loading …","Manage the epoch accounts hash","The EpochAccountsHash is calculated in the background via …","The EAH calculation is complete (for <code>Slot</code>) and the EAH …","","","","","","","","This condition variable is used to wait for an in-flight …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new epoch accounts hash manager, with the initial …","Create a new epoch accounts hash manager, with the initial …","An epoch accounts hash calculation has been requested; …","An epoch accounts hash calculation has completed; update …","Current state of the epoch accounts hash","","","","Get the epoch accounts hash","","","","","","","Get the epoch accounts hash","All the EAH calculation information for a specific epoch","","","For the epoch that <code>bank</code> is in, get all the EAH calculation …","Get the number of slots from EAH calculation start to …","Number of slots from EAH calculation start to stop","Calculation of the EAH occurs once per epoch.  All nodes …","Offset into the epoch when the EAH calculation starts","Calculation of the EAH occurs once per epoch.  All nodes …","Offset into the epoch when the EAH calculation stops","For the epoch that <code>bank</code> is in, get the slot that the EAH …","Absolute slot where the EAH calculation starts","For the epoch that <code>bank</code> is in, get the slot that the EAH …","Absolute slot where the EAH calculation stops","","","","","","","The epoch this information applies to","","First slot in this epoch","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Is the EAH enabled this Epoch?","Is this bank in the calculation window?","Last slot in this epoch","Number of slots in this epoch","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Map from AppendVec file name to unpacked file system …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Unpacks snapshots and sends entry file paths through the …","","","","","","","","","","","","","","Unpacks snapshot and collects AppendVec file names &amp; paths","","","","","","","","Disable (and safely enable) the background flusher from …","","","An RAII implementation of a scoped lock for the …","result from scanning in-mem index during flush","","","","","","","","","Look at the currently held ranges. If ‘range’ is …","assumes 1 entry in the slot list. Ignores overhead of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","entries that were found to have duplicate index entries. …","pubkeys with more than 1 entry","pubkeys that were already added to disk and later found to …","","pubkeys whose age indicates they may be evicted now, …","pubkeys chosen to evict based on random eviction","","","","","","","","","","synchronize the in-mem index with the disk index","scan loop holds read lock identifies items which are …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","fill in <code>possible_evictions</code> from <code>iter</code> by checking age","lookup ‘pubkey’ in index (in mem or on disk)","calculate the estimated size of the in-mem index return …","lookup ‘pubkey’ in index (in_mem or disk). call ‘…","lookup ‘pubkey’ by only looking in memory. Does not …","remove the possible evictions. This is required because we …","true if this bucket needs to call flush for the current age","returns true if there are active requests to stop evictions","return count of calls to ‘start_stop_evictions’, …","if ‘start_holding’=true, then: at the end of this …","next index to use into ‘possible_evictions’ if ‘index…","","","","","","","","","insert ‘entry’ at ‘relative_age’ in the future …","entries to add next time we are flushing to disk","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","if ‘start_holding’, then caller wants to add ‘range…","","","","","","","Set the <code>flushing</code> atomic flag to true.  If the flag was …","","Try to update an item in the slot list the given <code>slot</code> If …","","","for each key in ‘keys’, look up in map, set age to the …","","","an individual bucket will evict its entries and write to …","The number of times that evictions have been disabled or …","pull out all duplicate pubkeys from ‘startup_info’ …","possible evictions for next few slots coming up","vec per age in the future, up to size ‘…","","returns true if a dice roll indicates this call should …","how many more ages to skip before this bucket is flushed …","","return false if the entry is in the index (disk or memory) …","","clear existing data and prepare to add ‘entries’ more …","set age of ‘entry’ to the future if ‘is_cached’, …","called after flush scans this bucket at the current age","","return true if ‘entry’ should be evicted from the …","Release entire in-mem hashmap to free all memory …","","info to streamline initial index generation","Queue up these insertions for when the flush thread is …","","","The number of active callers disabling evictions","","","Who will be notified after the evictions are re-enabled","","","","","","","","","","","","","","","","","","","","","","","","","","modifies slot_list any entry at ‘slot’ or slot ‘…","update ‘entry’ with ‘new_value’","","","","","","","","","","","","","The const program ID.","Returns <code>true</code> if given pubkey is the program ID.","Returns the program ID.","","The const program ID.","Returns <code>true</code> if given pubkey is the program ID.","Returns the program ID.","","","The const program ID.","","","","","","Returns <code>true</code> if given pubkey is the program ID.","","","","","Returns the argument unchanged.","","Returns the program ID.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","The const program ID.","Returns <code>true</code> if given pubkey is the program ID.","Returns the program ID.","The const program ID.","Returns <code>true</code> if given pubkey is the program ID.","Returns the program ID.","","","The const program ID.","","","Returns <code>true</code> if given pubkey is the program ID.","","","","","Returns the argument unchanged.","Returns the program ID.","","Calls <code>U::from(self)</code>.","","","","","","","","Schedules, executes, and commits transactions under …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Resultant information gathered from calling …","","","","","The change in accounts data len","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Process a message. This method calls each instruction in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Block minimum prioritization fee stats, includes the …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Accounts that have minimum fees lesser or equal to the …","","","","","","","","","","","","","","","","Update self for minimum transaction fee in the block and …","","","","","","","","The maximum number of blocks to keep in …","Stores up to MAX_NUM_RECENT_BLOCKS recent block’s …","","","","","","","","","Returns number of blocks that have finalized minimum fees …","","","","","","","","","","","","","","","","","","","","","","","Finalize prioritization fee when it’s bank is completely …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get prioritization fee entry, create new entry if necessary","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Update with a list of non-vote transactions’ …","Internal function is invoked by worker thread to update …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","true if pubkey is in cache at slot","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","reset the read only accounts cache useful for benches/tests","","","","","","","","","","collect rent","Information computed during rent collection","this account will never have rent collected from it","","maybe we collect rent later, but not now","When rent is collected from an exempt account, rent_epoch …","","when rent is collected for this account, this is the …","","","","","","","","","Size of data reclaimed from account (happens when account…","","","","","","","","","","","","","","","determine what should happen to collect rent from this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","given an account that ‘should_collect_rent’ returns …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Amount of rent collected from account","","true if it is easy to determine this account should …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","populated at startup with the accounts that were found …","","","","1st index is partition end index, 0..=432_000 2nd …","Remember that ‘pubkey’ can possibly be rent paying.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","return all pubkeys that can possibly be rent paying with …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","create new struct. Need slots per epoch from ‘…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","return all items &lt; ‘max_slot_exclusive’","return highest item &lt; ‘max_slot_exclusive’","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","remove key from set, return if item was in the set","","","","","","Cached root bank that only loads from bank forks if the …","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Encapsulates flags that can be used to tweak the runtime …","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","log top 20 (owner, # accounts) in descending order of # …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This struct contains side-info while reconstructing the …","","","","","Helper type to wrap AccountsDbFields when reconstructing …","Helper type to wrap BankFields when reconstructing Bank …","Helper type to wrap BufReader streams when deserializing …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Collapse the SnapshotBankFields into a single (the latest) …","Collapse the SnapshotAccountsDbFields into a single …","used by tests to compare contents of serialized bank fields","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","populate ‘historical_roots’ from ‘…","","","","deserialize the bank from ‘stream_reader’ modify the …","deserialize the bank from ‘stream_reader’ modify the …","effectively updates the accounts hash in the serialized …","","","","","","","","Get snapshot storage lengths from accounts_db_fields","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Types used by snapshots for safe …eturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","deserialize the bank from ‘stream_reader’ modify the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The serialized AppendVecId type is fixed as usize","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Snapshot serde-safe accounts delta hash","Snapshot serde-safe accounts hash","Snapshot serde-safe incremental accounts hash","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Information about a full snapshot archive: its path, slot, …","Information about an incremental snapshot archive: its …","Common information about a snapshot archive","Trait to query the snapshot archive information","","Archive format for the snapshot file","","The slot that the incremental snapshot was based from.  …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Hash for the snapshot","","","","Use the <code>SnapshotArchiveInfo</code> struct for the common fields: …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Parse the path to a full snapshot archive and return a new …","Parse the path to an incremental snapshot archive and …","","","","Path to the snapshot archive file","","Slot that the snapshot was made","","","","","","","","","","","","","","","","","","","Snapshots are used everywhere; both at startup (i.e. load) …","Snapshots are only used at startup, to load the accounts …","Snapshot configuration and runtime information","Specify the ways that snapshots are allowed to be used","This is the <code>debug_verify</code> parameter to use when calling …","The archive format to use for snapshots","Path to the directory where bank snapshots are stored","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Generate a new full snapshot archive every this many slots","Path to the directory where full snapshot archives are …","Generate a new incremental snapshot archive every this …","Path to the directory where incremental snapshot archives …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Maximum number of full snapshot archives to retain","Maximum number of incremental snapshot archives to retain …","A new snapshot config used for only loading at startup","","Should snapshots be generated?","Snapshot version to generate","","","","","","","","","Specifies the ways thats snapshots are allowed to be used","","","Used by SnapshotPackagerService and SnapshotGossipManager, …","Used by SnapshotPackagerService and SnapshotGossipManager, …","The hash used for snapshot archives","At startup, when loading from snapshots, the starting …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Make a snapshot hash from an accounts hash and epoch …","","","","","","","","","","","","","","","","","","","","","","Used to modify bank and accounts_db to create a minimized …","Convenience function for getting accounts_db","Helper function to measure time and number of accounts …","","","","","","","","","Creates new storage replacing <code>storages</code> that contains only …","Returns the argument unchanged.","Used to get active bank feature accounts in <code>minimize</code>.","Used to get builtin accounts in <code>minimize</code>","Used to get inactive bank feature accounts in <code>minimize</code>","Determines minimum set of slots that accounts in …","Used to get owner accounts in <code>minimize</code> For each account in …","Used to get program data accounts in <code>minimize</code> For each …","Used to get rent collection accounts in <code>minimize</code> Add all …","Used to get sdk accounts in <code>minimize</code>","Used to get stake accounts in <code>minimize</code> Add all pubkeys …","Used to get static runtime accounts in <code>minimize</code>","Used to get vote and node pubkeys in <code>minimize</code> Add all …","","Calls <code>U::from(self)</code>.","Removes all accounts not necessary for replaying slots in …","Remove accounts not in <code>minimized_accoun_set</code> from …","","Process all snapshot storages to during <code>minimize</code>","Purge dead slots from storage and cache","","","","","","","This struct packages up fields to send from …","Accounts packages are sent to the Accounts Hash Verifier …","","","","","This struct packages up fields to send from …","Snapshots come in two flavors, Full and Incremental.  The …","Supplemental information needed for snapshots","","","","","","","","","","","","","","","","","","","","","Compare accounts package types by priority","Compare accounts packages by priority; first by type, then …","Compare snapshot packages by priority; first by type, then …","Compare snapshot types by priority","","Create a new Accounts Package where basically every field …","","","","","","","","","","","","","","","","The instant this accounts package was send to the queue. …","The instant this snapshot package was sent to the queue. …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Package up fields needed to compute an EpochAccountsHash","Package up bank files, storages, and slot deltas for a …","","","Helper function to retain only max n of elements to the …","","","","Supplemental information needed for snapshots","","","Returns the path to the snapshot links directory","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compare accounts package types by priority","Compare accounts packages by priority; first by type, then …","Compare snapshot packages by priority; first by type, then …","Compare snapshot types by priority","","Build from the snapshot archive","The different archive formats used for snapshots","","","","","","Information about a bank snapshot. Namely the slot of the …","Bank snapshots traditionally had their accounts hash …","","","","","","","the bank’s serialized format is expected to be identical …","Build directly from the bank snapshot directory","","","","","","","","","","","","","","","","","","","","","","","","","the serialized bank was ‘reserialized’ into a …","","","","","This bank snapshot <em>has</em> had its accounts hash calculated","This bank snapshot has <em>not</em> yet had its accounts hash …","","","","","","","","","","","","","","","When constructing a bank a snapshot, traditionally the …","","Helper type when rebuilding from snapshots.  Designed to …","","Helper type for passing around account storage map and …","","","","","","","","","","","","","","","Helper type to bundle up the results from …","","Helper type for passing around the unpacked snapshots dir …","","","allow tests to specify what happened to the serialized …","","Errors that can happen in <code>verify_slot_deltas()</code>","Computed information from <code>verify_slot_deltas_structural()</code>, …","","","","","Serialize a bank to a snapshot","","Make a snapshot archive out of the snapshot package","","Utility for parsing out bank specific information from a …","","Rebuild bank from snapshot archives.  This function …","follow the prototype of fn …","Rebuild bank from snapshot archives.  Handles either just …","Build bank from a snapshot (a snapshot directory, not a …","Convenience function to create a full snapshot archive out …","Convenience function to create an incremental snapshot …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Build the full snapshot archive path from its components: …","Build the incremental snapshot archive path from its …","","Perform the common tasks when deserialize a snapshot.  …","","Check if an incremental snapshot is compatible with a full …","After running the deserializer function, perform common …","The account snapshot directories under &lt;…","","","","","","","","","","To allow generating a bank snapshot directory with full …","For all account_paths, create the run/ and snapshot/ sub …","Before running the deserializer function, perform common …","BankSnapshotInfo::new_from_dir() requires a few meta files …","","","","","Delete the files and subdirectories in a directory. This …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Return account path from the appendvec path after checking …","Get the bank snapshots in a directory","","Get the bank snapshots in a directory","Get the bank snapshots in a directory","Get a list of the full snapshot archives from a directory","Get the bank snapshot with the highest slot in a directory","Get the bank snapshot with the highest slot in a directory","Get the bank snapshot with the highest slot in a directory","Get the path (and metadata) for the full snapshot archive …","Get the highest slot of the full snapshot archives in a …","Get the path for the incremental snapshot archive with the …","Get the highest slot of the incremental snapshot archives …","Get a list of the incremental snapshot archives from a …","","From an appendvec path, derive the snapshot hardlink path. …","Walk down the snapshot archive to collect snapshot archive …","","Get the snapshot storages for this bank","serializing needs Vec&lt;Vec&lt;Arc&gt;&gt;, but data structure at …","Hard-link the files from accounts/ to snapshot/&lt;…","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Delete directories/files asynchronously to avoid blocking …","","","Helper function to hold shared code to package, process, …","Helper function to hold shared code to package, process, …","Parse a full snapshot archive filename into its Slot, …","Parse an incremental snapshot archive filename into its …","","Get the <code>&amp;str</code> from a <code>&amp;Path</code>","","","","Remove outdated bank snapshots","","","","","","Remove the snapshot directory for this slot","If the validator halts in the middle of …","","","","","","Slot of the bank","All the slots in the slot deltas","Path to the bank snapshot directory","","Provides interfaces for rebuilding snapshot storages","Type of the snapshot","Snapshot version","","Reads the <code>snapshot_version</code> from a file. Before opening the …","","","Spawns a thread for unpacking a snapshot","","","Streams snapshot dir files across channel Follow the flow …","Streams unpacked files across channel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Perform the common tasks when unarchiving a snapshot.  …","","","","","","","","Check to make sure the deserialized bank’s slot and hash …","Verify that the snapshot’s slot deltas are not …","Verify that the snapshot’s slot deltas are not …","Verify that the snapshot’s slot deltas are not …","","","","","","","","","","","","","","","","","","","Write the snapshot version as a file into the bank …","The different archive formats used for snapshots","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the file extension for the ArchiveFormat","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Convenient wrapper for snapshot version and rebuilt …","","Used to determine if a filename is structured like a …","Stores state for rebuilding snapshot storages","","","","","","","","","","","","","","","","","","","","","","","","","Builds thread pool to rebuild with","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Receiver for unpacked snapshot storage files","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the slot and append vec id from the filename","Determines <code>SnapshotFileKind</code> for <code>filename</code> if any","increment <code>next_append_vec_id</code> until there is no file in …","Waits for snapshot file Due to parallel unpacking, we may …","","","","","","","Insert storage path into slot and return the number of …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create the SnapshotStorageRebuilder for storing state …","Tracks next append_vec_id","Tracks the number of collisions in AppendVecId","Number of threads to rebuild with","Process an append_vec_file","Processes buffered append_vec_files","Process a slot that has received all storage entries","Process the snapshot file to get the size of each snapshot …","Tracker for number of processed slots","Synchronously spawns threads to rebuild snapshot storages","Rebuild from the snapshot files or archives","Snapshot storage lengths - from the snapshot file","Snapshot version","Spawn threads for processing buffered append_vec_files, …","Spawn a single thread to process received append_vec_files","Rebuilt storages","Container for storing rebuilt snapshot storages","Container for storing snapshot file paths","","","","","","","","","","","","","","","","","","","","","","","","","Wait for the completion of the rebuilding threads","Provide access to SnapshotStorageOnes by slot","Iterator over successive slots in ‘storages’ within ‘…","","","","","","","","","","","containing nothing","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","primary method of retrieving […","","","","","create <code>SortedStorages</code> from <code>source</code> iterator. <code>source</code> …","","the slot to be returned the next time ‘Next’ is called","","range of slots where storages exist (likely sparse)","range for the iterator to iterate over …","","","","the actual storages A HashMap allows sparse storage and …","the data to return per slot","","","","","","","","","","","","","An account and a stake state deserialized from the account.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","The SDK’s stake history with clone-on-write semantics","The inner type, which is the SDK’s stake history","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","The generic type T is either Delegation or StakeAccount. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sum the stakes that point to the given voter_pubkey","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","current epoch, used to calculate current stake","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Creates a Stake from Stake by loading the full account …","","","","","","","","stake_delegations","history of staking levels","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","unused","","","","","","","","","","","","vote accounts","Sum the lamports of the vote accounts and the delegated …","","","","","","","","","","","Vector of static token &amp; mint IDs","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Add a known root fork.  Roots are always valid ancestors. …","","","","","","Clear for testing","","","","","","","","","","","","Returns the argument unchanged.","","Check if the key is in any of the forks in the ancestors …","Search for a key with any blockhash Prefer get_status for …","","Insert a new key for a specific slot.","","Calls <code>U::from(self)</code>.","","Get the statuses for all the root slots","","","all keys seen during a fork/slot","","","","","","abstract access to pubkey, account, slot, target_slot of …","holds slices of accounts being moved FROM a common source …","accounts that are moving from ‘old_slot’ to ‘…","account at ‘index’","","","None if account is zero lamports","","","","","","are there accounts from multiple slots only used for an …","","true if there is more than 1 slot represented in …","","","","","","","","","given an overall index for all accounts in self: return …","Returns the argument unchanged.","Returns the argument unchanged.","true iff the impl can provide hash and write_version …","","return hash for account at ‘index’ Should only be …","","true iff hashing these accounts should include the slot","","","This is temporarily here until feature activation.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","true if no accounts to write","accounts to write","","","total len of all accounts, across all slots_and_accounts","each element of slots_and_accounts is (source slot, …","slot where accounts are currently stored","pubkey at ‘index’","","","","","","each element is (source slot, accounts moving FROM source …","This is calculated based off slots_and_accounts. …","slot that all accounts are to be written to","","","accounts will be written to this slot","","","","","","","","","","return write_version for account at ‘index’ Should …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","set when background thread has completed","notify that the bg process has completed","","","return true if bg hash verification is complete return …","enable waiting for verification to become complete","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","start the bg thread to do the verification","thread doing verification","","","","notify that verification was completed successfully This …","true when verification has completed or never had to run …","","block until bg process is complete","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","VoteState.node_pubkey of this vote-account.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","wake up all threads waiting on this event","wake up one thread waiting on this event","","","","","wait on the event return true if timed out, false if event …"],"if":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[1,1],[2,2],[3,3],[[]],[[]],[[]],[[],1],[[],2],[[],3],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[5,5],6],[[1,1],6],[[2,2],6],[[3,3],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[5,7],8],[[1,7],8],[[2,7],8],[[3,7],8],[[]],[[]],[[]],[[]],[[],1],[4,9],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[1],[5,6],[2,6],[[5,5],6],[[5,5],6],[1],[2,6],[1,[[11,[10]]]],[[],1],[[5,12],2],[2,13],[1],[1,[[11,[10]]]],0,[9,13],[1],[1,[[11,[14]]]],[1],[1,[[11,[14]]]],[2,5],[2,15],0,[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[],16],[[]],[[]],[[]],[[]],[1,1],[1,[[11,[1,14]]]],[1,1],[1,[[11,[1,14]]]],0,0,[[]],[[]],[[],17],[4],[4],[4],[[]],[[]],[[17,18],[[20,[19]]]],[[],4],[[]],[[17,18,[20,[19]]]],[[17,[20,[19]]]],[[],11],[[],11],[[],16],[[]],0,0,0,0,[[]],[[]],[[[20,[21]],[20,[21]],22,23,6],24],[[21,21,18,19,[20,[23]]],24],[4],[4],[4],[[21,21],6],[[],6],[[],6],[[]],[[21,7],8],[[]],[[19,25],21],[[],4],[[]],[[21,21]],[[21,21],6],[[],11],[[],11],[[],16],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[26,[[28,[27]]]],[26],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[29,29],[30,30],[[]],[[]],[[],26],[[],30],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[31,[[11,[30]]]],[31,[[11,[32]]]],[4],[4],[4],[4],[33],[4],[4],[4],[4],[[30,30],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[],30],[[]],[[]],[[]],[[34,7],8],[[35,7],8],[[29,7],8],[[26,7],8],[[33,7],8],[[30,7],8],[7,[[11,[36]]]],[7,[[11,[36]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[26,27,15],[[20,[[38,[37]]]]]],[[26,27],[[20,[[38,[37]]]]]],[[26,27],[[20,[[38,[37]]]]]],0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[26,39]],[[26,27,[38,[37]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[26,40],0,0,0,0,0,[[]],[26,40],[33,[[38,[37]]]],0,[40,20],[33,[[38,[37]]]],0,[[26,27,6],[[20,[[38,[37]]]]]],[[30,41],11],0,[[26,27,[38,[37]]],33],0,0,0,[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[34,[[11,[42]]]],[[35,43],11],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[[30,44],46],[[34,47],[[11,[42]]]],[[34,12],[[11,[42]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[53,[[0,[48,49]],[50,[[0,[48,49]]]],[52,[51]]]],4],[[20,[[0,[48,49]]]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[54,54],[55,55],[56,56],[57,19],[[]],[[]],[[]],[57],[57],[57,12],0,[[],56],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[31,[[11,[56]]]],[31,[[11,[58]]]],[4],[4],[4],[4],[4],[4],[4],[4],[[57,57],6],[[55,55],6],[[56,56],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[57,6],0,[[59,7],8],[[60,7],8],[[54,7],8],[[57,7],8],[[55,7],8],[[56,7],8],[7,[[11,[36]]]],[7,[[11,[36]]]],[[]],[[]],[[]],[[]],[[[20,[48]]],56],[48,56],[[]],[[]],[[]],[[]],[[[53,[[0,[48,49]],[50,[[0,[48,49]]]],[52,[51]]]],4]],[57,51],0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[53,[[0,[48,49]],[50,[[0,[48,49]]]],[52,[51]]]]],6],[57,6],[57,12],0,[[[53,[[0,[48,49]],[50,[[0,[48,49]]]],[52,[51]]]]],4],0,0,[57,55],[[[50,[[0,[48,49]]]]],[[53,[[0,[48,49]],[50,[[0,[48,49]]]],[52,[51]]]]]],[[[50,[[0,[48,49]]]],[28,[[52,[51]]]],[28,[61]]],[[53,[[0,[48,49]],[50,[[0,[48,49]]]],[52,[51]]]]]],[57,4],0,[57,18],0,[57,18],0,[57,62],0,[57,6],[[56,41],11],[[57,55]],0,[57,4],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[59,[[11,[42]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[[60,63],11],[[60,64],11],[[59,47],[[11,[42]]]],[[59,12],[[11,[42]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[57,61],0,0,0,0,0,0,0,0,0,0,0,[[65,18],6],0,[[18,66,67,[68,[18,18]]],[[24,[19]]]],0,0,[[4,4,[20,[69]],70],24],[[71,19,[20,[4]]],6],[[65,27],72],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[19,4],[73,73],[[]],[[65,74,75,12]],[[76,6],19],[[],77],[[],65],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[73,73],6],[[],6],[[],6],[[]],[[]],[[],77],[[],65],[[]],[[]],[[65,78,79],[[68,[18,18]]]],[[77,7],8],[[65,7],8],[[73,7],8],[[]],[[]],[[]],[[]],[[80,66],[[24,[[20,[69]]]]]],[[65,[0,[[81,[18]],82,49]],6,83]],[[],4],[[],4],[[],4],[[],4],[[77,18]],[[]],[[]],[[]],[[]],[12,6],[[77,18],6],[[77,18],6],[[65,78,[28,[84]],79,70,74,66,85,[20,[17]],[68,[18,18]],[68,[18,[38,[67]]]]],[[28,[86]]]],[[65,78,87],[[89,[[28,[88]]]]]],[[65,78,87,90,91,92,[20,[4]]],[[89,[[28,[93]]]]]],[[65,78,87,18,92],[[89,[[28,[93]]]]]],[[65,27,[20,[18]]],[[28,[93]]]],[[65,78,87,18,91,92],[[89,[[28,[93]]]]]],[[65,78,87,4,[94,[18]],95],[[89,[28]]]],[[65,78,96,97],[[11,[98,99]]]],[[65,78,18,100],20],[[65,78,[0,[[81,[18]],82]]],[[28,[88]]]],[[65,78,80,12,70,74,66,[20,[17]],[68,[18,18]],[68,[18,[38,[67]]]]],[[24,[73]]]],[[[28,[93]],20,91]],[[65,78,18],20],[[[28,[88]],20]],[[65,78,18],20],[[65,77,[28,[18]],[28,[18]]],24],[[65,101,4],[[28,[24]]]],[[65,[28,[[24,[102]]]]],[[28,[24]]]],[[65,101,101,4],[[28,[24]]]],[[77,18],6],[[[89,[[28,[93]]]],92],[[89,[[28,[93]]]]]],[[[38,[103]]],65],[103,65],[[[28,[104]],105,106,107,[20,[108]],[20,[109]],[38,[110]]],65],[[[28,[104]],105,106,107],65],[[[28,[104]],105,106,107],65],[[18,19,24,6,20,75,12],6],0,0,0,0,[[65,78,87,111],89],[[65,27,[0,[91,112,49]]],[[28,[[0,[49,112,113,114]]]]]],[[65,[50,[[0,[48,49,115]]]]]],[[65,27,74,75,12,116]],[[65,27,18,19]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[],16],[[65,77,[28,[18]],[28,[18]]]],[[65,101]],[[77,18]],[[77,18]],[[18,19,23,70,74,66,12],24],[[65,27,12,20,117],6],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],118],[[],118],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[119,120]],[119,119],[121,121],[122,122],[119,[[124,[123]]]],[[]],[[]],[[]],[[],125],[[],118],[[],122],[4],[4],[4],[4],[4],[4],[126,118],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],0,[[121,121],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[120,127]],[[128,7],8],[[118,7],8],[[119,7],8],[[121,7],8],[[129,7],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[130,[20,[27]]],20],[[129,120,6],4],[[130,6,131,[20,[27]],128,132],[[11,[12,133]]]],[[130,6,131,[20,[27]]],[[20,[[11,[12,133]]]]]],[[134,6,131,[20,[27]]],[[20,[[11,[12,133]]]]]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[122,6],[135,136],0,[[[38,[[138,[137]]]],[38,[110]],134,6,[20,[27]]],135],[139,119],[140,122],[[128,141,[20,[27]]],132],0,0,[[129,120,4,12]],[[118,4]],0,[[122,128],[[11,[[142,[128]]]]]],0,[[[38,[[138,[137]]]]],143],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],0,[[],144],[4],[4],[4],[4],[4],[4],[[]],[[]],[[145,7],8],[[144,7],8],[[]],[[]],[[],4],[[],4],[[]],[[]],0,[145],[144,146],0,[[],145],0,0,[[144,146]],[[145,146]],0,[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[]],[[]],0,0,0,0,0,0,[[147,27]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[147,[[28,[27]]]],[[147,[20,[27]]],[[148,[27]]]],[[147,27],6],[[147,27],6],[[],147],[4],[149],[4],[4],[4],[4],[4],[149],[4],[4],[4],[[]],[[]],[[]],[147,27],[[149,7],8],[[150,7],8],[[147,7],8],[[]],[[]],[[]],[149,[[28,[18]]]],[[149,18],[[20,[151]]]],[150,51],0,0,[[],4],[[],4],[[],4],[[149,18,19,[20,[[52,[51]]]],27,116],151],[[]],[[]],[[]],[149,6],0,[[147,27,18],[[20,[151]]]],[149],0,0,[147,152],[147,4],[150,18],0,[[147,27],[[20,[152]]]],[[147,27],28],[147],[149],0,0,[[147,27]],[147,12],0,0,[[147,27],[[20,[152]]]],[[147,27,18,19,[20,[[52,[51]]]],116],151],[149,12],0,0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[147,12],0,[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[103,153,154,155,156,104],[[11,[157]]]],0,0,[158,[[11,[4,159]]]],[[103,78,18],[[11,[4,159]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[160,160]],[[161,161]],[[162,162]],0,[[12,57]],[[163,12,57]],[[164,12,57]],[[37,4]],[[165,[28,[[38,[37]]]]]],[[165,[38,[37]]]],[[103,27],72],[[103,27,101]],[[103,166]],0,[[],[[28,[57]]]],[163,[[28,[57]]]],[164,[[28,[57]]]],0,0,0,[[],4],[163,4],[164,4],[37,4],0,0,0,[37,[[28,[57]]]],0,0,[103,[[28,[27]]]],0,0,0,0,0,0,0,0,0,[167,[[38,[37]]]],[37,15],[[27,168],27],0,[37,4],[[103,27,169]],0,0,[[[170,[151]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[103,4],61],0,0,0,0,[[103,28],166],[[103,27],[[94,[27]]]],[[103,[28,[27]],6],171],[[[68,[18]],[68,[27]],[20,[27]]]],0,[[103,27],172],[[103,173,27,153],[[11,[157]]]],[[103,27,153],[[11,[157]]]],[[103,153,154,155],[[11,[157]]]],[[103,173,6,27,153,[20,[12]]],[[11,[157]]]],[[103,153,154,155],[[11,[157]]]],[37,12],0,0,[158,174],[[12,12],12],[101,12],0,[[103,[20,[27]],6,[20,[27]]]],[103],[[103,[28,[18]],[20,[27]],175]],0,0,[[103,[0,[101,176]],94,[20,[[68,[18,[94,[27]]]]]],[94,[18]]]],0,0,[[103,[94,[27]],[20,[[68,[18,[94,[27]]]]]],[94,[18]]]],0,0,[116,116],[177,177],[117,117],[178,178],[179,179],[108,108],[107,107],[100,100],[160,160],[180,180],[173,173],[156,156],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[163,163]],[[164,164]],0,[[103,[28,[27]],181],171],[[103,27],[[28,[27]]]],[[103,[28,[27]],6]],[[103,[28,[27]],6]],[[103,[28,[27]],181,162]],[[182,15,27,[68,[15,[38,[37]]]]],[[38,[37]]]],[[103,27,[38,[37]],167,183,[28,[27]]]],[[174,27,18,116],51],0,[[],179],[[103,[20,[27]],6,[20,[27]],184]],[37,4],0,0,0,[[167,27,103],33],0,0,[[103,27,12,47],[[38,[37]]]],0,0,[[103,27,12,47],[[38,[37]]]],[[103,139],119],[[167,27,103],[[20,[33]]]],[[103,27,12,47],[[38,[37]]]],0,0,[174],0,[[],177],[[],163],[[],167],[[],183],[[],179],[[],108],[[],107],[[],185],[[],186],[[],187],[[],188],[[],184],[[],160],[[],161],[[],165],[[],189],[[],190],[[],191],[[],192],[[],193],[[],194],[[],195],[[],196],[[],162],[[],197],[[],103],[[[198,[2,2]],[20,[104]]],103],0,0,0,0,0,[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[31,[[11,[160]]]],[31,[[11,[199]]]],0,0,0,0,[[103,27,152,[20,[111]],[20,[27]]],193],[[103,78,18,[20,[27]],100,178],20],[[103,78,18,[20,[27]],100,6,178],20],[[103,[20,[27]]]],[[103,27,[38,[37]]]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[103,[28,[[38,[37]]]],197]],0,0,0,0,[165,4],0,0,[[177,177],6],[[188,188],6],[[100,100],6],[[160,160],6],[[192,192],6],[[173,173],6],[[156,156],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],160],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[174,6],[[103,[20,[27]]]],0,0,[103,105],[[200,7],8],[[201,7],8],[165,[[28,[[38,[37]]]]]],[103],0,[103,12],0,0,0,0,0,0,[103,6],0,[[],4],[[],4],[[],4],[18,6],[[180,18],6],[[103,[20,[27]],[20,[27]],[68,[27]],[68,[18]]]],[[103,27,4],[[38,[37]]]],[[103,27,[20,[78]]],[[20,[27]]]],[[103,166,202,162]],0,0,0,[37,[[11,[203]]]],[[103,6,[20,[27]]]],[103],[[103,[20,[27]],20]],[[103,27],[[20,[193]]]],[[103,[20,[111]],[20,[27]]],[[20,[193]]]],[[116,7],8],[[177,7],8],[[204,7],8],[[163,7],8],[[164,7],8],[[117,7],8],[[205,7],8],[[183,7],8],[[[207,[[0,[82,206]]]],7],8],[[179,7],8],[[108,7],8],[[107,7],8],[[185,7],8],[[186,7],8],[[187,7],8],[[188,7],8],[[100,7],8],[[158,7],8],[[157,7],8],[[37,7],8],[[160,7],8],[7,[[11,[36]]]],[7,[[11,[36]]]],[[161,7],8],[[165,7],8],[[189,7],8],[[103,7],8],[[190,7],8],[[191,7],8],[[192,7],8],[[193,7],8],[[194,7],8],[[195,7],8],[[196,7],8],[[162,7],8],[[197,7],8],[[173,7],8],[[156,7],8],[174],[[180,174]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[103,[20,[4]],6,208],185],[[103,[68,[18,209]],27,74],186],[[103,27,18,5],158],[[103,27],[[20,[172]]]],[[103,27],20],[103,27],[[],210],[180,210],[[27,154],[[28,[27]]]],[[103,27],[[20,[160]]]],[[104,153,27],211],[[103,25]],[[103,18],18],[[103,4],[[28,[18]]]],[[103,27],20],[[[94,[18]]],[[94,[18]]]],[158,[[20,[174]]]],[[[207,[164]]],[[28,[18]]]],[[27,169],27],[[103,27,153],27],[37,104],[[103,27],[[20,[27]]]],[[103,27]],[[103,27],[[28,[27]]]],[[192,4],[[20,[[212,[27]]]]]],[[103,[0,[[81,[27]],49]]]],[103,[[28,[27]]]],[[192,4],27],[[103,27,167,6],[[20,[[38,[37]]]]]],[[103,27,12],33],[[37,4],[[20,[57]]]],[213,214],[[103,[38,[37]]],215],[103,28],[[103,[38,[37]],197],215],0,[[103,101]],[[103,[20,[101]],[20,[27]],20,6,[94,[18]]]],0,0,0,[37,6],[[103,27,12],6],[[27,48,18,116],51],[[27,12,18,6,62,18,116],51],[[216,[20,[[38,[37]]]],27],6],0,0,0,0,0,0,0,0,0,0,[[103,78,87,90,111,92],[[89,[6]]]],0,0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[4],[[180,4]],[[103,27]],0,[[103,27,27]],[[103,27,[38,[37]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[174,6],[204,6],[[103,[38,[37]],6],6],[[192,4],6],[[103,18],6],[[18,[20,[18]]],6],[[27,[38,[37]]],6],[165,217],[174,12],0,0,0,0,0,[[],4],[163,4],[164,4],0,[[103,78,18,100],20],[[103,78,18,[20,[27]],100],[[20,[51]]]],[[103,78,18]],[[103,197,27],[[218,[206]]]],[[103,78,18],20],[174,51],0,[[],83],0,[[103,27,6,[20,[33]],6],[[28,[[38,[37]]]]]],[[103,154,27,155]],[[103,27]],0,0,[[103,[20,[27]]],[[20,[27]]]],[[103,169,27]],[103],[[183,27,103,167,219]],0,0,0,[[175,12,12],220],[[27,[38,[37]]],167],[[182,27,15,12],37],[[27,154],192],[[27,15,221,4],37],[[[28,[104]],105],103],[[[28,[104]],105],103],[[],103],[[],103],[106,103],[[103,27,182,12],37],[[[212,[27]],[28,[27]],27],192],[[[28,[104]],105,106,107,[20,[108]],[20,[109]],[38,[110]]],103],[103,15],0,0,0,[[103,27,19,[20,[80]],18,101]],[103],[[103,27,169]],[[103,27,[94,[18]],222]],[[103,27,[94,[18]],[68,[18,57]],222]],0,0,0,0,0,0,0,0,0,0,0,0,0,[174,18],[12,12],0,0,0,[[103,47]],[[103,47]],[[103,47]],[[103,[94,[27]],[20,[[68,[18,[94,[27]]]]]],191,[94,[18]]]],[[103,[38,[37]]],[[68,[18,209]]]],[174,18],0,0,0,[[103,[0,[101,176]],191]],[[103,101]],[[103,27]],[[103,27,87,6]],[[103,27,152]],[[103,27,94,28,6,[94,[18]]]],[[103,27,191]],[[103,[0,[101,176]]]],[[103,[0,[101,176]],191,6]],0,[[],4],0,0,[[103,47,78,[0,[[81,[18]],82]],92,111]],[[103,78,18,[20,[27]],6],20],0,[[37,27,15]],[[103,4],12],0,0,0,0,[[37,4,6],4],[[103,27]],[[103,223]],0,[[103,101,[20,[27]],[20,[[68,[27,[94,[4]]]]]],6],[[94,[27]]]],0,0,[[103,[0,[101,176]],94,[20,[[68,[18,[94,[27]]]]]],[94,[18]]]],[[165,4],[[38,[37]]]],[[103,27]],[[103,[207,[206]],197,[20,[33]],6]],0,0,[[103,[28,[27]]],[[28,[[28,[18]]]]]],[[103,27],[[28,[[28,[18]]]]]],[103],0,0,[174,62],0,0,0,[[220,12]],[187],[[191,47,[20,[12]]]],[194],[195],[196],[197],0,[103],[103],0,[[103,27,5,78,18,[20,[27]],100],20],[[103,[207,[164]]]],0,0,0,0,0,0,[[103,27,[0,[91,49]],[0,[91,49]]],[[224,[112,[0,[112,113,49]]]]]],[[103,211,153,154,225,[212,[4]],155],[[28,[226]]]],[[103,78,87,111,92],89],[[[38,[37]],225]],[[103,211,154,155,4,[212,[4]],153,[20,[18]]],[[11,[[28,[226]],157]]]],0,0,[[],210],[180,210],[[[68,[27,[38,[37]]]],227,[20,[27]]]],0,[[160,41],11],[[103,27,172],[[20,[172]]]],[[103,27,228],[[20,[172]]]],[[103,27],20],[[103,27,229,12],20],[210],[[180,210]],[[103,27],20],[[103,27,230,12],20],[[103,[28,[104]]]],[27],[[180,27]],[[37,30]],[[103,[231,[15,188]],187]],[103,6],[[103,[38,[37]],167,27,6],6],[[12,12],6],[[103,6,[20,[27]]]],[103],0,[103,4],0,[[103,[38,[37]],215,197],[[207,[206]]]],0,0,[[103,27]],0,0,0,0,0,0,0,[167,27],[37,27],0,0,0,0,0,0,0,0,[210],0,0,[103],0,[[18,48,74],[[20,[12]]]],[37,30],0,0,0,0,0,[[103,[50,[[0,[48,49,115]]]],204,20,232]],0,0,[[103,[50,[[0,[48,49,115]]]],[20,[[28,[[52,[51]]]]]],[20,[[124,[101]]]],204,6,20,232],161],0,0,[[103,[50,[[0,[48,49,115]]]],[20,[[28,[[52,[51]]]]]],[38,[37]],[20,[[124,[101]]]],232],161],0,[[103,[50,[[0,[48,49,115]]]],[20,[[28,[[52,[51]]]]]],101,204,20],[[28,[2]]]],[[103,[50,[[0,[48,49,115]]]],[20,[[28,[[52,[51]]]]]],204,20,232]],[[167,103,219,233],161],0,[[103,[50,[[0,[48,49,115]]]],20]],0,0,0,0,0,0,0,0,[[103,27]],0,0,0,0,0,0,[174,19],0,0,0,0,0,0,[174,19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[165,12],0,0,0,0,0,0,0,0,0,0,0,0,[37,6],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[103,27,12,12],[[20,[[38,[37]]]]]],[[103,27,12,12],[[20,[[38,[37]]]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],0,[[103,47,78,111,92]],0,0,[[103,94,[68,[18,[94,[27]]]],[94,[18]]]],[[103,[94,[18]]]],[[103,[0,[101,176,112,49]],4,[94,[18]]]],0,0,0,[[160,[0,[48,115]]]],[[194,234]],[[103,173,6,27,78,[20,[12]],169,74,6]],[[103,27,78,6,6]],[[103,27,160],[[20,[160]]]],[[103,153,154,27,155],[[11,[157]]]],[[103,[28,[2]],[50,[[0,[48,49]]]],235],[[236,[2]]]],0,0,[[103,155,[20,[[38,[37]]]]]],[[197,162]],[[[231,[15,188]],[68,[18,209]],[237,[187]]]],0,[[103,27,12,20,117],[[11,[157]]]],0,[[],12],[200,[[11,[42]]]],[[103,74,187]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[[201,63],11],[[201,64],11],[[200,47],[[11,[42]]]],[[200,12],[[11,[42]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[4,27]],[[4,27],163],[[4,27],164],[[103,27,[50,[[0,[48,49]]]],[124,[101]],116,101],[[28,[2]]]],[[103,27,37,[53,[[0,[48,49]],[50,[[0,[48,49]]]],[52,[51]]]]],[[28,[2]]]],[[103,12,[50,[[0,[48,49,115]]]],202]],[[103,101,202]],0,0,[[103,238,27,202]],[[103,166,[28,[238]]],202],0,0,[37,12],[156,239],0,0,0,0,[[]],[[]],[[],222],[4],[4],[4],0,0,[[]],[[]],[[],4],[[]],0,[222],0,0,0,0,[[],11],[[],11],[[],16],[[]],[[65,[28,[18]],4,27]],[[65,12]],0,0,0,0,[221,240],[[221,4],[[11,[4,159]]]],[[221,4],[[28,[57]]]],[[221,[53,[[0,[48,49]],[50,[[0,[48,49]]]],[52,[51]]]],4],[[20,[[28,[54]]]]]],[[]],[[]],[[]],[[]],[221,12],[4],[4],[4],[4],[4],[4],[[]],[[]],0,[[27,241],242],[221,214],[[221,7],8],[[]],[[]],[[221,4],20],[221,104],[[],4],[[],4],[[]],[[]],[[]],[221,6],[221,4],[221,240],[[[243,[182]],4],214],[240,20],0,[221,12],[221],[221],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[28,51],0,0,0,[244,51],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[155],[[[28,[[28,[51]]]]]],[[4,4,[20,[4]],[20,[4]]]],0,[131,12],[245,245],[239,239],[244,244],[246,246],[247,247],[172,172],[[]],[[]],[[]],[[]],[[]],[[]],0,[[245,245],125],[[28,4],51],[[4,4,[20,[4]],[0,[91,49]],[20,[4]]]],[[[28,[51]],4,[20,[4]],[20,[4]]]],[[[28,[49]],4,[0,[91,49]]],51],[[[28,[51]],4],51],[248,4],0,0,0,0,[[249,155,4]],[[249,4]],[[],248],[[],155],[[],245],[[],250],[[],251],[[],252],[[],249],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[4,4],4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],0,[[245,245],6],[[250,250],6],[[239,239],6],[[244,244],6],[[246,246],6],[[247,247],6],[[172,172],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[250,4]],0,[249,6],[[251,4]],[[251,4],4],[[153,7],8],[[155,7],8],[[245,7],8],[[250,7],8],[[251,7],8],[[249,7],8],[[239,7],8],[[244,7],8],[[246,7],8],[[247,7],8],[[172,7],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[246,244],[247,244],[[]],[229,246],[230,247],[[]],[[]],[228,172],[[[28,[248]]],252],[[],251],[[],251],[[28,4,[212,[4]]],[[28,[28]]]],[[4,4,[28,[18]],[28,[4]]],245],[248,20],[[251,253,4]],[[252,4]],0,0,0,0,0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[249,18],6],0,[155],0,0,0,0,0,[[51,12,18],245],[[[28,[4]],4],250],[101,251],0,0,0,0,0,[[254,4]],0,0,0,0,0,0,[[249,[28,[255]],155]],0,0,0,[28],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[252,4],0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[248,51]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[92],0,0,0,0,[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],27]],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],223]],[[[260,[256]]]],[[[260,[256]]],261],0,0,0,[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]]],[[28,[27]]]],[[27,256,[38,[[262,[256,[0,[257,[258,[256]],[259,[256]]]]]]]]],[[38,[[260,[256]]]]]],[[[20,[263]],[38,[110]]]],0,0,[[[264,[256,[0,[257,[258,[256]],[259,[256]]]]]],[265,[18]],4],4],[[[264,[256,[0,[257,[258,[256]],[259,[256]]]]]]]],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]]],4],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[27,27,27],6],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],27,234],6],0,[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],18,[236,[256]],[20,[27]]],6],0,[[[260,[256]]],6],[235,235],[90,90],[266,266],[267,267],[268,268],[263,263],[106,106],[269,269],[[[265,[18]]],[[265,[18]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]]],[[94,[27]]]],0,0,[[106,266],6],[[],92],[[],268],[[],263],[[],106],[[],270],[[],[[260,[113]]]],[[],271],[[],234],[[],272],[[],[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]]]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[[260,[256]]],6],0,[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],47,78,87,111,[273,[[0,[[81,[18]],82]]]],92],[[11,[274]]]],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],47,78,111,[20,[[0,[[81,[18]],82]]]],[20,[27]],92]],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],78,111,[276,[[0,[275,113,49,112]]]],18,[20,[27]],92]],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],47,78,111,[20,[[0,[[81,[18]],82]]]],92]],0,[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[[264,[256,[0,[257,[258,[256]],[259,[256]]]]]]],4],0,[[235,235],6],[[274,274],6],[[266,266],6],[[267,267],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[235,7],8],[[92,7],8],[[274,7],8],[[274,7],8],[[90,7],8],[[266,7],8],[[267,7],8],[[268,7],8],[[263,7],8],[[106,7],8],[[270,7],8],[[[260,[82]],7],8],[[271,7],8],[[234,7],8],[[272,7],8],[[[198,[[0,[82,256]],[0,[82,257,[258,[[0,[82,256]]]],[259,[[0,[82,256]]]]]]]],7],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],18,[20,[78]],[20,[27]]],[[277,[256]]]],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],18],[[20,[[278,[256]]]]]],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],18,[279,[256,[0,[257,[258,[256]],[259,[256]]]]]]],[[20,[[278,[256]]]]]],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],18],[[279,[256,[0,[257,[258,[256]],[259,[256]]]]]]]],[[[0,[280,281]],282],12],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],266,18],[[20,[4]]]],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],266,4],28],[[283,[284,[256]],[20,[27]]],27],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],27,[20,[78]]],[[20,[27]]]],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],[284,[256]],[20,[27]]],[[236,[256]]]],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],101],[[28,[27]]]],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]]],4],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],106],[[94,[18]]]],[[266,216]],0,0,[[[264,[256,[0,[257,[258,[256]],[259,[256]]]]]],[0,[[81,[18]],82,49]],6,83]],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],[0,[[81,[18]],82,49]],6,83]],[[106,18],6],0,[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],78,87,90,111,92],[[11,[274]]]],0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],27,4,101]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[285,[256]],[38,[[262,[256,[0,[257,[258,[256]],[259,[256]]]]]]]]],[[38,[[260,[256]]]]]],[[]],[92,6],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],27],6],[[],6],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]]],6],[106,6],0,[272,6],0,[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],27],6],[[],6],[[[285,[256]]],6],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],[20,[[81,[18]]]],6],[[264,[256,[0,[257,[258,[256]],[259,[256]]]]]]]],0,0,[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],[20,[78]],[284,[256]],[20,[27]]],[[20,[4]]]],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]]]],[272],0,[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]]],27],0,[271,[[20,[27]]]],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]]],[[20,[27]]]],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]]],[[20,[27]]]],[[[286,[27,12]]],[[20,[27]]]],[[27,256,[38,[[262,[256,[0,[257,[258,[256]],[259,[256]]]]]]]],6],[[285,[256]]]],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],[20,[[81,[18]]]],6],[[264,[256,[0,[257,[258,[256]],[259,[256]]]]]]]],[6,92],[[[236,[256]],287,270],[[260,[256]]]],[12,271],[[[20,[263]],[38,[110]]],[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]]]],[[[38,[[262,[256,[0,[257,[258,[256]],[259,[256]]]]]]]]],270],[[[38,[[262,[256,[0,[257,[258,[256]],[259,[256]]]]]]]],6],270],[[[264,[256,[0,[257,[258,[256]],[259,[256]]]]]]],20],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]]],4],0,0,[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]]],[[28,[28]]]],0,0,0,[288],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],18,[289,[27]],[236,[256]]],6],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],[236,[256]],[236,[256]],[20,[27]]]],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],18,106]],[[[279,[256,[0,[257,[258,[256]],[259,[256]]]]]],[0,[[81,[18]],82]],6],28],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],47,78,[0,[[81,[18]],82]],92,111]],[92,92],[[[260,[256]]],287],0,[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],18],287],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],27,[94,[27]]]],0,0,[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],[20,[27]]],[[94,[27]]]],0,0,0,0,0,0,[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],101,111,[20,[269]],6]],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],78,87,111,92],[[11,[274]]]],0,0,[[[260,[256]],261]],[[[260,[256]],6]],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],290]],0,[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],18,291],20],0,0,[[[264,[256,[0,[257,[258,[256]],[259,[256]]]]]]],4],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],242],[[[260,[256]],261,261]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],47,78,111,92]],0,[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]]],4],0,[[[260,[256]]],6],0,[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],18,48,106]],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],18,18,18,106]],[[[198,[256,[0,[257,[258,[256]],[259,[256]]]]]],27,27,18,48,106,256,[236,[256]],235]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[278,[256]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[278,[256]]],[[38,[[260,[256]]]]]],[[[278,[256]]],[[292,[[236,[256]]]]]],[[[293,[256,291]]],[[278,[256]]]],[[[294,[256,291]]],[[278,[256]]]],[[[295,[256,291]]],[[278,[256]]]],[[[38,[[260,[256]]]],291]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[278,[256]],7],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[38,[[260,[256]]]]],[[278,[256]]]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[278,[256]]],[[296,[256]]]],[[[38,[[260,[256]]]],291],[[278,[256]]]],[[[38,[[260,[256]]]],291],[[278,[256]]]],[[[38,[[260,[256]]]],291],[[278,[256]]]],0,0,0,0,0,0,0,0,0,[[[278,[256]]],287],[[[278,[256]]],[[236,[256]]]],0,0,0,0,0,0,0,0,[[[297,[256,291]]],[[11,[[278,[256]]]]]],[[[298,[256,291]]],[[11,[[278,[256]]]]]],[[[299,[256,291]]],[[11,[[278,[256]]]]]],[[[297,[256,291]]],[[11,[[278,[256]]]]]],[[[298,[256,291]]],[[11,[[278,[256]]]]]],[[[299,[256,291]]],[[11,[[278,[256]]]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[[38,[[260,[256]]]],291],[[11,[[278,[256]]]]]],[[[38,[[260,[256]]]],291],[[11,[[278,[256]]]]]],[[[38,[[260,[256]]]],291],[[11,[[278,[256]]]]]],[[[38,[[260,[256]]]],291],[[11,[[278,[256]]]]]],[[[38,[[260,[256]]]],291],[[11,[[278,[256]]]]]],[[[38,[[260,[256]]]],291],[[11,[[278,[256]]]]]],[[]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[278,[256]],291]],[[[278,[256]],291]],[[[278,[256]],291]],[[[278,[256]],291]],[[[278,[256]],291]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[4],[4],[4],[4],[4],[4],[4],[300],[4],[4],[[]],[[]],[[]],0,0,[[[301,[256,[0,[257,[258,[256]],[259,[256]]]]]],7],8],[[]],[[]],[[]],[[[301,[256,[0,[257,[258,[256]],[259,[256]]]]]]],4],0,0,[[],4],[[],4],[[],4],[[]],[[]],[[]],[[4,[20,[263]],[38,[110]]],[[301,[256,[0,[257,[258,[256]],[259,[256]]]]]]]],[[[38,[[262,[256,[0,[257,[258,[256]],[259,[256]]]]]]]],4,6,[38,[110]]],300],[[],4],[[[301,[256,[0,[257,[258,[256]],[259,[256]]]]]],290]],[[[301,[256,[0,[257,[258,[256]],[259,[256]]]]]]]],0,0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[]],[[]],[[]],0,0,0,[[27,57]],[[27,19,[20,[80]],18,12]],[[]],0,0,0,0,0,0,0,0,[[302,303],304],[[]],[[]],[[]],[[]],[[]],[[]],0,[303,303],[[]],[[],302],[4],[4],[4],[4],[4],[4],[4],[304],[4],[4],[[]],[[]],[[]],0,[[302,7],8],[[303,7],8],[[]],[[]],[[]],0,[[],4],[[],4],[[],4],[[]],[[]],[[]],0,0,0,0,[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[302,303,91]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[78,78],[[]],[[78,27],6],[[],78],[4],[4],[4],[[78,78],6],[[]],[[],78],[[78,7],8],[[]],[[[28,[27]]],78],[[[68,[27,4]]],78],[[],4],[[]],[78,6],[78,[[28,[27]]]],[78,4],[78,27],[78,27],[[78,27]],[[]],[[],11],[[],11],[[],16],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[171,27,[38,[37]],6]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[171,12]],[[171,12]],[233,233],[[]],[[],171],[[],202],[[],166],[[],238],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[233,233],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[171,181]],[[171,4,305]],[[181,7],8],[[306,7],8],[[171,7],8],[[202,7],8],[[166,7],8],[[233,7],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[219,233]],[[],12],[219,6],0,0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[221,6],0,0,[[12,4,27],219],[[101,305],[[28,[238]]]],0,0,0,0,0,0,[171],0,0,[[]],0,0,[[171,4,305]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[],175],[[],175],[307,308],[[307,4],[[11,[4,159]]]],0,[[307,4],[[28,[57]]]],[4,4],[[307,[53,[[0,[48,49]],[50,[[0,[48,49]]]],[52,[51]]]],4],[[20,[[28,[54]]]]]],0,[[307,4,309,4]],[[307,4],[[20,[4]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[307,12],[310,19],0,[310],[310],0,[310,12],[4],[4],[4],[4],[4],[311,175],[4],[4],[4],[4],[4],[4],[4],[4],[307],[4],[4],[[159,159],6],[[310,310],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[],307],[[]],[[]],[310,6],[[27,241],242],0,[307,214],[[159,7],8],[[159,7],8],[[310,7],8],[[307,7],8],[[]],[[]],[[]],[[]],[[]],[[307,4],20],[[307,4],[[20,[56]]]],[307,104],[[307,4,4],20],[[307,4],20],[310,51],0,[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[307,6],[310,12],[307,4],0,[310,55],0,[307,308],[[182,6,4],307],[[[243,[182]],4],214],[[[243,[182]],4],[[214,[307]]]],[308,20],[310,4],0,0,[310,18],0,[288],[310,18],[310,309],[307,12],0,[310,62],[307],[310,6],[310,6],[310,6],[307],[[4,4],214],[[310,55]],[307],[310,4],0,0,[[],242],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[],16],[[],16],[[]],[[]],[[]],[[]],[[]],[310,61],0,[[]],[[]],[4],[4],[4],[312],[4],[[]],[[]],[[],242],[47,312],[[],4],[[]],0,[[],11],[[],11],[[],16],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[120,83,[20,[313]]],314],[[120,83,[20,[313]]],314],[[[38,[120]],18,27,[20,[313]],315],120],[[],19],[316,19],[317,19],0,0,[[120,18],6],[120,[[38,[65]]]],0,0,0,0,0,0,0,[120,12],0,[[318,18,19,74]],[[120,18]],[[319,319]],[[120,47,18,320]],[[120,47,18,6]],[[120,18]],[[120,18]],[[120,18,18]],[[],18],[316,18],[317,18],0,0,0,[[120,19]],0,0,0,[[120,6,[94,[18]]]],[[120,321,6]],[[120,12]],[120],0,[120],[120,6],[120,87],0,0,[120,12],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[120,18,19]],[120,[[20,[4]]]],[[120,4,4]],[[120,6],6],[[120,6],12],[[4,4],168],[[76,12,85,6,6,6,6,6,6],12],[322,12],[[120,12,62],323],[[120,[231,[18,324]],12,325,83,326],[[20,[327]]]],[[120,101],318],[120],[120,12],0,0,0,[[120,101,4,70],[[28,[84]]]],[[120,76],[[20,[93]]]],[[120,[28,[84]],70],[[28,[84]]]],[[120,80,4,75,79,70],84],[[120,80,75],[[20,[93]]]],[[120,4,70],[[28,[84]]]],[[120,12],[[28,[84]]]],[[120,[20,[27]]]],[120],[120],[[120,27]],[120,328],[329,329],[330,330],[319,319],[331,331],[332,332],[333,333],[334,334],[335,335],[316,316],[317,317],[336,336],[337,337],[338,338],[321,321],[318,318],[[],[[124,[123]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[120,105],0,[[120,339],340],[120],[120,[[28,[341]]]],[120],[[120,28,[20,[[94,[18]]]],12],342],[[120,343]],[[120,[344,[18]],343]],0,0,0,0,0,0,0,[120,18],0,0,0,0,[[120,[28,[332]],51,12,345,346],347],0,0,0,[[120,6],[[94,[18]]]],[120,51],0,0,[120,6],[120,27],0,[[120,18]],[[],343],[[],330],[[],319],[[],348],[[],349],[[],350],[[],316],[[],317],[[],336],[[],351],[[],338],[[],315],[[],352],[[],342],[[],353],[[],318],[[],120],[65,120],0,[[120,18,12],[[11,[12,354]]]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[31,[[11,[329]]]],[31,[[11,[330]]]],[31,[[11,[355]]]],[31,[[11,[348]]]],[31,[[11,[356]]]],[31,[[11,[337]]]],[31,[[11,[357]]]],[332,[[20,[331]]]],[[120,62]],[120],[[120,358,12]],[[120,359,359,62,6]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[120],[4],[4],[4],[4],[4],[4],[4],[4],0,[120],0,[120,6],[120,62],0,0,0,[120,[[20,[360]]]],0,[[120,18],[[20,[18]]]],[[120,62],227],[120,169],0,0,0,[[120,62],[[20,[[38,[[68,[18,12]]]]]]]],[[120,62],[[20,[361]]]],0,0,0,[120,[[68,[62,361]]]],[[120,18],12],[[120,62],[[20,[358]]]],[[120,18],[[20,[362]]]],[[329,329],6],[[330,330],6],[[319,319],6],[[334,334],6],[[348,348],6],[[335,335],6],[[316,316],6],[[317,317],6],[[336,336],6],[[337,337],6],[[120,120],6],[[321,321],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],329],[[]],[[]],[[],330],[[]],[[]],[[]],[[]],[[]],[[],363],[[]],[[]],[[]],[[]],[[],348],[[]],[[]],[[]],[[]],[[]],[[],349],[[],335],[[]],[[],350],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],337],[[]],[[]],[[]],[[]],[[],351],[[],338],[[]],[[]],[[],120],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[120,80,73,322,[20,[333]],6,6,6,346,70,[20,[4]],[366,[[365,[364]]]]],332],0,[120,12],0,0,0,0,0,0,[[367,7],8],[[368,7],8],[[369,7],8],[[370,7],8],[[371,7],8],[[372,7],8],[120],0,0,0,0,0,[[],[[20,[19]]]],[316,[[20,[19]]]],[317,[[20,[19]]]],0,0,0,0,0,[120],[120],0,[120,[[28,[24]]]],[[120,[375,[[374,[373]]]]],28],[[120,208,[20,[376]],6]],[120,62],[120,28],[[120,27,27],28],[332,24],[120],[[329,7],[[11,[36]]]],[[329,7],[[11,[36]]]],[[330,7],8],[7,[[11,[36]]]],[7,[[11,[36]]]],[[319,7],8],[[363,7],8],[[331,7],8],[[332,7],8],[[333,7],8],[[334,7],8],[[348,7],8],[7,[[11,[36]]]],[7,[[11,[36]]]],[[349,7],8],[[335,7],8],[[350,7],8],[[316,7],8],[[317,7],8],[[336,7],8],[[377,7],8],[[378,7],8],[[337,7],8],[7,[[11,[36]]]],[7,[[11,[36]]]],[[351,7],8],[[338,7],8],[[120,7],8],[[315,7],8],[[352,7],8],[[323,7],8],[[321,7],8],[[342,7],8],[[353,7],8],[[318,7],8],[120],0,[120],[120,[[292,[51]]]],[120,6],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[317,333],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[379,336],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[316,76,341],[[24,[317]]]],0,0,0,[[120,380],[[24,[80]]]],[120,381],0,0,0,[[120,18],[[20,[19]]]],[[120,18],20],[[120,18],20],[[120,382],17],[[120,18],[[20,[19]]]],[120,[[20,[246]]]],[120,[[28,[93]]]],[120,[[89,[[28,[88]]]]]],[[120,18],12],[[120,51],[[20,[27]]]],[[120,51],[[20,[27]]]],[120,[[20,[360]]]],[[120,27]],[120,383],[[120,76],[[20,[12]]]],[[120,76,12],12],[120,384],[[120,[68,[27,4]]],377],[[120,90,91,92,[20,[4]]],[[89,[[28,[93]]]]]],[[120,18,91,92],[[89,[[28,[93]]]]]],[[120,51],[[20,[12]]]],[120,[[20,[247]]]],[120,12],[120,27],[120,12],[[120,51],[[20,[12]]]],[[120,4,[94,[18]],95],[[89,[28]]]],[[120,27],62],[[350,[20,[18]]],[[20,[[28,[335]]]]]],[[120,4],12],[76,12],[76,12],[[],[[28,[12]]]],[[359,359,6]],[[27,27,385],28],[[120,18,92],[[89,[[28,[93]]]]]],[[120,18],[[28,[93]]]],[[74,62],74],[120,[[20,[[94,[18]]]]]],[[120,386],[[20,[24]]]],[[120,386],[[20,[24]]]],[[120,386],20],[[120,386,51],[[20,[24]]]],[120,387],[[120,62],12],[120,388],[[120,[20,[27]]],[[28,[[38,[37]]]]]],[[120,[389,[18]]]],[390,168],[120,[[38,[110]]]],[120,391],[120,83],[[120,392,20],[[20,[381]]]],[120,[[89,[318]]]],[120,4],[[120,22,76],[[28,[393]]]],[[120,[20,[18]]],[[20,[[28,[335]]]]]],[[120,18],[[20,[394]]]],[120,[[38,[[138,[395]]]]]],0,0,0,[120,6],[[120,386],6],[120,51],0,0,0,[120,51],0,[120,[[20,[12]]]],0,0,0,0,0,[120,116],[[120,12]],[[120,12]],[[120,12]],0,0,0,0,[120,396],0,0,0,[[120,[20,[19]]],397],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],0,[22,398],[[120,399]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[120,27],6],[[120,12],6],[[120,51],6],[120,6],0,0,0,[120,6],[120,6],[[120,51,4],6],[120,6],[[120,80,400],6],0,0,0,[[],[[20,[12]]]],[333,[[20,[12]]]],[316,[[20,[12]]]],[317,[[20,[12]]]],[120,51],[120],0,0,0,0,[[120,18]],[120,12],[120,168],[120,168],[120,168],[120,[[11,[98,401]]]],[[120,339,4,6,6,6,346,[20,[17]],[20,[4]]],402],[[120,[68,[18,18]]],[[68,[18,[38,[67]]]]]],[[120,339,4,6,6,6,6,346,[20,[4]]]],[[120,18],[[24,[[38,[67]]]]]],[[120,78,18],20],[[120,78,18],20],0,[[120,83,[20,[313]],326,6],[[231,[18,324]]]],0,0,0,0,0,0,0,0,0,[120,12],0,0,0,0,0,[[[94,[18]],[94,[18]]],[[94,[18]]]],0,[[],113],[[340,340],403],[[65,27],363],[[18,19],316],[[18,19,[20,[19]]],317],[[342,146],353],[208,120],[208,120],[[208,352],120],[[363,208,[38,[404]],336,[20,[[38,[[94,[18]]]]]],[20,[376]],6,12],120],[[[38,[120]],18,27],120],[[[38,[120]],18,27,315],120],[[[38,[120]],18,27,313],120],[208,120],[[208,106,107],120],[[208,[38,[404]],[28,[104]],[20,[[38,[[94,[18]]]]]],[20,[376]],106,107,6,[20,[108]],[20,[109]],[38,[110]]],120],[[208,[28,[104]]],120],[[208,[38,[404]],[28,[104]],106,107],120],[[208,[38,[404]]],120],[120,6],[120,12],0,0,0,0,[[],[[20,[313]]]],0,0,0,0,0,0,0,[120,[[20,[[38,[120]]]]]],0,[120,51],0,0,0,[120,27],0,0,0,[120,[[28,[[38,[120]]]]]],[[[38,[120]]],[[28,[[38,[120]]]]]],[[120,359,359,62]],[[18,405],12],[[120,359,359,62]],[359,12],[[120,62,12,[20,[313]],6,83,326,6]],0,0,0,0,[18,12],[[120,[28,[406]]],339],[[120,[28,[380]]],[[24,[339]]]],[120,339],[[120,101],339],[[120,80],339],0,[120,6],[120],[[120,[28,[380]]],[[28,[24]]]],[[120,208]],[[120,62,27,[20,[313]]]],[[120,406],24],[[120,339],[[28,[24]]]],[[120,[259,[380]]],332],[[120,101],[[28,[24]]]],[120,101],[120,[[94,[27]]]],[[],[[344,[18]]]],0,[19,12],[120,[[408,[[292,[407]]]]]],[120],[[120,[231,[18,324]],62,327,6,325,83,[20,[313]],326]],[[353,353],353],[[120,51]],[[120,51]],[120],[[120,18]],[[120,18]],[120],0,0,[120,28],[120,74],0,0,0,0,0,0,[[62,385]],[[120,18,18,47]],[[120,[68,[18,18]]],[[68,[18,[38,[67]]]]]],0,[120],0,0,0,0,0,0,0,0,0,[120],0,[[120,111],89],[120],[[120,101]],0,0,[120,6],[[329,41],11],[[330,41],11],[[348,41],11],[[337,41],11],[[120,12]],[[120,[20,[[124,[123]]]]]],[120,12],[[120,[20,[12]]]],[[120,396]],[120],[[120,309]],[[120,[28,[104]]]],[120],[[120,[0,[409,410]]]],[[127,131],6],[120,6],[120,4],0,[120,12],0,0,0,0,0,[[120,80],411],[[120,80],411],[[12,19],6],[120,27],0,0,0,0,[120,385],[385,385],[120,385],[120,227],[120,227],0,0,0,[120,319],0,0,0,0,0,0,0,0,0,[120,[[38,[[68,[18,12]]]]]],0,0,0,0,0,[120,[[28,[12]]]],[[120,18,[0,[48,49,115]]]],[[120,18,19]],[[120,[50,[[0,[48,49,115]]]]]],[[120,[365,[364]]]],[[120,[365,[364]]]],0,[[120,326]],0,[[120,[231,[18]],326],28],0,0,0,0,[120,12],0,0,0,[120,12],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],242],[120,12],0,[120,12],0,0,0,0,[120,12],0,[120,12],0,0,0,[120,12],0,[[120,12,412,18],[[24,[386]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[120,[28,[380]]],[[24,[[28,[24]]]]]],[[120,101],[[24,[[28,[24]]]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[120],0,[120,168],[[120,339]],[[120,168]],[[120,168]],[[120,168]],[[120,173,6,6],246],[120,246],[[120,[20,[62]]]],[120],[[120,62]],[120],[[120,27],247],[120],[[120,79]],[120],[[120,[28,[390]],28]],[[120,62,[20,[[0,[91,112,49]]]],83,326]],[120],[120],[[120,[20,[62]]]],[120],[[120,18,91]],[120],[120,6],[[120,62],6],0,0,[[169,27]],[120,28],[[120,27,27],28],0,[[120,20,413],6],[120,6],[[120,6,6,27,20],6],[[120,380,414],[[24,[80]]]],[[120,22],24],[120,6],[367,[[11,[42]]]],[369,[[11,[42]]]],[371,[[11,[42]]]],[[370,43],11],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[[329,44],[[11,[44,45]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[[348,44],46],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[[368,63],11],[[372,63],11],[[368,64],11],[[372,64],11],[[367,47],[[11,[42]]]],[[369,47],[[11,[42]]]],[[371,47],[[11,[42]]]],[[367,12],[[11,[42]]]],[[369,12],[[11,[42]]]],[[371,12],[[11,[42]]]],0,[120,[[38,[358]]]],0,[120,6],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[120,[[20,[415]]]],[120,[[20,[24]]]],[120],[120],[120],[[120,416],[[20,[415]]]],[120,360],[[[38,[120]],18,27,173],120],[332,6],[332,6],[120,6],[120,6],[[120,18,12],24],[120,[[408,[[417,[407]]]]]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],326],[4],[4],[4],[4],[4],[4],[4],[4],[4],0,[[]],[[]],[[]],0,0,0,0,[[326,7],8],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[]],[[]],[[]],0,0,0,0,0,[[27,27,12,418]],[[62,27,27,419,326]],0,0,0,0,0,0,0,0,0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],0,0,0,0,0,[[]],[[]],[[]],[120],[[420,120,18]],0,[[]],[[]],[4],[4],[4],[[]],[[]],[[],4],[[]],0,[[],11],[[],11],[[],16],[[]],0,[[421,380],[[422,[386]]]],0,[[]],[[]],[4],[4],[4],[[]],[[]],[[421,18],[[422,[[20,[423]]]]]],[[421,18],[[422,[[20,[[28,[309]]]]]]]],[[421,18,424],[[422,[[20,[423]]]]]],[[421,18],[[422,[12]]]],[[421,18,424],[[422,[12]]]],[421,[[422,[383]]]],[[421,51],[[422,[[20,[425]]]]]],[[421,426],[[422,[12]]]],[421,[[422,[384]]]],[421,[[422,[51]]]],[[421,424],422],[[421,4],[[422,[12]]]],[[421,51],422],[421,422],[[421,424],422],[[421,386],[[422,[[20,[24]]]]]],[[421,386,424],[[422,[[20,[24]]]]]],[421,[[422,[12]]]],[[421,424],[[422,[12]]]],[421,[[422,[12]]]],[[421,424],[[422,[12]]]],[[],4],[[]],[[421,51,424],[[422,[6]]]],[120,421],[[[38,[120]]],421],[[421,386],422],[[421,386,4],[[422,[4]]]],[[120,[170,[380]]]],[[421,412,427],[[422,[386]]]],[[421,[0,[428,281]],426],[[422,[386]]]],[[421,[0,[409,410]]]],[421,242],0,[[421,12,412,18],[[422,[386]]]],[[],11],[[],11],[[],16],[[]],0,0,0,0,[[]],[[]],[[],429],[4],[4],[4],[[]],[[429,7],8],[[]],[429,213],[429,213],[429],[429],[[],4],[[]],0,[429],[[],11],[[],11],[[],16],[[]],0,0,0,0,0,0,0,0,[137,[[28,[27]]]],[137,[[68,[27,[94,[27]]]]]],[[137,27],[[20,[51]]]],[137,[[68,[27,[38,[120]]]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[430,430],[431,431],[[]],[[]],[[],430],[[],431],[4],[4],[4],[4],[4],[4],[4],[4],[137,[[68,[27,[94,[27]]]]]],0,[[137,27,122,[20,[27]]]],[4],[4],[4],[4],0,0,[[]],[[]],[[]],[[]],[[430,7],8],[[431,7],8],[[]],[[]],[[]],[[]],[137,[[68,[27,[38,[120]]]]]],[432,27],[[137,27],[[20,[[38,[120]]]]]],[137,432],[137,[[38,[110]]]],[137,[[20,[[38,[120]]]]]],[137,27],0,[[137,27]],[[],4],[[],4],[[],4],[[],4],[[137,120],[[38,[120]]]],[[137,[38,[120]]]],[[137,433]],[[]],[[]],[[]],[[]],[137,6],0,[137,4],[120,137],[27,137],[[137,27,[20,[27]]]],0,0,0,[[137,27,27],434],[[137,27],[[20,[[38,[120]]]]]],[137,27],0,[137,[[38,[120]]]],0,[[137,12]],[[137,27,122,[20,[27]]],[[28,[[38,[120]]]]]],[[137,[20,[141]]]],[[137,120],6],0,0,0,[[]],[[]],0,0,0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,[[],16],[[],16],[[],16],[[],16],[[]],[[]],[[]],[[]],[137,[[38,[120]]]],[[347,[20,[435]]]],[[4,12]],0,0,0,0,0,0,0,0,0,0,0,0,[[],[[68,[18,12]]]],[[],[[68,[18,12]]]],[[]],[[]],[436,[[68,[18,12]]]],[4],[4],[4],[[]],[[]],[[],4],[[]],[[],11],[[],11],[[],16],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[437,437],[79,79],[[]],[[]],[[],79],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[31,[[11,[437]]]],[31,[[11,[438]]]],[31,[[11,[79]]]],[31,[[11,[439]]]],[4],[4],[4],[4],[4],[4],[4],[4],[[437,437],6],[[79,79],6],[[],6],[[],6],[[],6],[[],6],[[],437],[[]],[[]],[[]],[[]],[[],79],[[]],[[]],[[]],[[]],[[440,7],8],[[441,7],8],[[442,7],8],[[443,7],8],0,[[437,7],8],[7,[[11,[36]]]],[7,[[11,[36]]]],[[79,7],8],[7,[[11,[36]]]],[7,[[11,[36]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[79,51,12]],[[79,51],[[20,[12]]]],[[79,51],[[20,[12]]]],[79,4],[79,101],0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[12,4,12],6],[[79,51],6],[[79,51,4],6],[79,51],0,0,0,0,0,0,0,[4,79],[[79,51,12]],[[437,41],11],[[79,41],11],0,[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[440,[[11,[42]]]],[442,[[11,[42]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[[441,63],11],[[443,63],11],[[441,64],11],[[443,64],11],[[440,47],[[11,[42]]]],[[442,47],[[11,[42]]]],[[440,12],[[11,[42]]]],[[442,12],[[11,[42]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[[262,[256,[0,[257,[258,[256]],[259,[256]]]]]]],12],0,0,[[[262,[256,[0,[257,[258,[256]],[259,[256]]]]]]],6],[[[262,[256,[0,[257,[258,[256]],[259,[256]]]]]],4],6],[[[262,[256,[0,[257,[258,[256]],[259,[256]]]]]],[28,[[38,[110]]]],[28,[[38,[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]]]]]],6]],0,[[]],[[]],[[[262,[256,[0,[257,[258,[256]],[259,[256]]]]]],6]],[[[262,[256,[0,[257,[258,[256]],[259,[256]]]]]]],4],0,[[[262,[256,[0,[257,[258,[256]],[259,[256]]]]]]],261],[4],[4],0,[4],[[]],[[[262,[256,[0,[257,[258,[256]],[259,[256]]]]]],7],8],[[]],[[[262,[256,[0,[257,[258,[256]],[259,[256]]]]]],6],261],0,0,[[[262,[256,[0,[257,[258,[256]],[259,[256]]]]]]],6],[[[262,[256,[0,[257,[258,[256]],[259,[256]]]]]]],6],[[[262,[256,[0,[257,[258,[256]],[259,[256]]]]]]]],[[],4],[[]],[[[262,[256,[0,[257,[258,[256]],[259,[256]]]]]]],6],[[[262,[256,[0,[257,[258,[256]],[259,[256]]]]]]],6],[[[262,[256,[0,[257,[258,[256]],[259,[256]]]]]],6],6],0,[[4,[20,[263]],4],[[262,[256,[0,[257,[258,[256]],[259,[256]]]]]]]],[[[262,[256,[0,[257,[258,[256]],[259,[256]]]]]]],4],0,[[[262,[256,[0,[257,[258,[256]],[259,[256]]]]]],6]],[[[262,[256,[0,[257,[258,[256]],[259,[256]]]]]]],6],0,0,0,[[[262,[256,[0,[257,[258,[256]],[259,[256]]]]]]],[[20,[12]]]],[[[262,[256,[0,[257,[258,[256]],[259,[256]]]]]],12,12,12],[[20,[12]]]],[[],11],[[],11],[[],16],[[]],0,[[[262,[256,[0,[257,[258,[256]],[259,[256]]]]]]]],0,0,0,0,0,[[445,4,4]],0,0,0,[[]],[[]],[[]],[[]],0,[[12,12],446],0,[[445,4],4],0,[[445,4]],[[],447],[[],445],0,[4],[4],[4],[4],[4],[4],0,0,0,0,0,[[]],[[]],0,0,0,0,0,0,0,0,[[447,7],8],[[445,7],8],[[]],[[]],0,0,0,[445,4],[[[28,[4]]]],0,0,0,[445],[445],[[445,12]],[[445,4]],[[],4],[[],4],0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[445,[262,[256,[0,[257,[258,[256]],[259,[256]]]]]],12],12],[4,445],0,0,[445,12],[[445,[262,[256,[0,[257,[258,[256]],[259,[256]]]]]]]],0,0,[[445,4,4]],[445,4],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],0,[[]],[[]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[28,[448]]]],[449,449],[376,376],[450,450],[448,448],[[]],[[]],[[]],[[]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[],449],[[]],[[]],[[]],[[]],[[],448],0,[[449,7],8],[[376,7],8],[[450,7],8],[[448,7],8],[[]],[[]],[[]],[[]],[[],[[28,[449]]]],0,[[],376],[[],[[28,[18]]]],0,[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],0,[[47,18,320],449],0,[[448,91],[[20,[450]]]],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[],16],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[211],[4],[4],[4],[4],[4],[4],[4],[4],[4],[211],[[]],[[]],[[]],[[]],[[]],[[]],[211],[226],[[226,12],4],[226,451],[[226,12],452],[[226,12]],[[226,12]],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[[243,[182]]],[[11,[453,203]]]],[[211,[243,[182]]],[[11,[226,203]]]],[[211,[243,[182]],454],[[11,[226,203]]]],0,[104,211],[[[243,[182]],12],[[11,[453,203]]]],0,[[211,[243,[182]],455],[[11,[203]]]],[[211,[243,[182]],455,454],[[11,[203]]]],0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[]],[[]],[[]],0,[[454,454]],[[]],[[]],0,0,0,0,[[],454],[4],[4],[4],0,[[]],[[454,7],8],[[]],[[],4],[[]],0,0,0,0,[454],0,0,0,[[],11],[[],11],[[],16],0,[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[456,27],[457,457],[458,458],[[]],[[]],0,[456,458],0,[[],457],[[],456],[[],458],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[31,[[11,[457]]]],[31,[[11,[459]]]],[4],[4],[4],[4],[4],[4],[[457,457],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[]],[[460,7],8],[[461,7],8],[[457,7],8],[7,[[11,[36]]]],[7,[[11,[36]]]],[[456,7],8],[[]],[[]],[[]],[[]],[[]],[[]],[[456,27],[[20,[457]]]],[[456,27],[[20,[4]]]],[[457,4],12],[[456,27,227],[[20,[4]]]],[457,12],[456,27],0,[456,27],0,[456,27],[[456,4],27],[[457,4,12]],[[457,12]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[456,27,27]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[462,457],[[[68,[27,457]],12,458],456],[[],456],[[27,27],456],[27,458],[456,27],0,[[457,41],11],[[456,27,27]],[[456,27]],[[456,27]],[456,27],0,[[456,463],27],[[]],[[]],[456,12],0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[460,[[11,[42]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[[461,63],11],[[461,64],11],[[460,47],[[11,[42]]]],[[460,12],[[11,[42]]]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[],6],[[]],0,0,0,0,[[]],[[]],[[]],[[]],0,0,[80,12],[464,12],[[18,465],12],[[80,66],466],0,[[],466],[4],[4],[4],[4],[4],[4],[[]],[[]],[[466,7],8],[[]],[[]],[80,12],[[466,80,66]],[[466,80]],[[],4],[[],4],[[]],[[]],0,[4,466],[466],0,[466,12],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[407,466]],[[407,466,12]],[407,12],0,0,[[]],[[]],[[]],[[]],[467,467],[[]],0,[[],407],[4],[4],[4],[4],[4],[4],[[467,467],6],[[],6],[[],6],[[]],[[]],[[],407],[407],[[467,7],8],[[407,7],8],[[]],[[]],[[],4],[[],4],[[]],[[]],[[[20,[12]]],407],[407,4],[[407,466]],[[407,466]],[[407,27]],[[407,12,12,12]],[[407,466,12]],[[]],[407,12],0,[[407,466],[[11,[12,467]]]],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[407,466,12]],0,0,[[]],[[]],[[407,466],[[11,[467]]]],0,0,0,0,[360,51],[[]],[[]],[[]],[[]],[120,468],[120,12],0,[120,27],0,[120,27],0,[120,27],0,[120,27],0,[360,360],[[]],[[],6],[[]],0,[4],[4],[4],[4],[31,[[11,[360]]]],[4],[4],0,[[360,360],6],[[],6],[[],6],[[]],[[]],[[469,7],8],0,[[360,7],8],[7,[[11,[36]]]],[[]],[246,360],[[]],[[[0,[280,281]],282],12],[[360,216]],[[],4],[[],4],[[]],[[]],[120,6],[120,6],0,0,0,0,[51,360],[[360,41],11],0,0,[[]],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],0,[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[[469,31],11],[[469,64],11],[[]],[[]],0,0,0,0,0,[470,471],[[]],[[]],[[]],[[]],[470,470],[[]],0,[4],[4],[4],[4],[4],[4],[[470,470],6],[[],6],[[],6],[[]],[[]],[[471,7],8],[[470,7],8],[[]],[[]],[[],4],[[],4],[[]],[[]],[[],471],[[360,27],471],[[471,27]],[[471,360,27]],0,[[]],[[],11],[[],11],[471,[[20,[360]]]],[[],11],[[],11],[[],16],[[],16],[[]],[[]],[471,360],0,[[]],[[]],[120,468],[120,12],0,[120,27],0,[120,27],0,[120,27],0,[120,27],0,[468,468],[[]],[[],468],[4],[4],[4],0,[[]],0,[[468,7],8],[[]],[[],4],[[]],[120,6],[120,6],0,0,[[]],[[],11],[[],11],[[],16],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[362,362],[361,361],[[]],[[]],[[],362],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[31,[[11,[362]]]],[31,[[11,[472]]]],[31,[[11,[361]]]],[31,[[11,[473]]]],[31,[[11,[474]]]],[31,[[11,[475]]]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[361,[[38,[476]]]],0,[[362,362],6],[[361,361],6],[[],6],[[],6],[[],362],[[]],[[]],[[]],[[]],[[],361],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[477,7],8],[[478,7],8],[[479,7],8],[[480,7],8],[[362,7],8],[7,[[11,[36]]]],[7,[[11,[36]]]],[[361,7],8],[7,[[11,[36]]]],[7,[[11,[36]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[[38,[481]],62],361],[361,[[38,[482]]]],0,[[358,62]],0,0,0,[[362,41],11],[[361,41],11],[[483,41],11],[361,481],0,[[]],[[]],[361,12],0,0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],0,0,0,[477,[[11,[42]]]],[479,[[11,[42]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[[478,63],11],[[480,63],11],[[478,64],11],[[480,64],11],[[477,47],[[11,[42]]]],[[479,47],[[11,[42]]]],[[477,12],[[11,[42]]]],[[479,12],[[11,[42]]]],[[361,18],12],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[208],[[208,18]],[[],12],[[]],[[]],[[]],[[]],[12,484],[[12,18,12],484],[[12,18,18,18,18,12,12,384,25,105,28],208],[[12,[28,[12]]],484],[[12,[28,[12]],105],484],[4],[4],[4],[4],[4],[4],[[]],[[]],[[]],[[]],0,[[],12],[[],4],[[],4],[[]],[[]],0,[[412,412,412],485],[[],485],0,0,[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],0,0,0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[47,6],[[]],[[]],[[]],[[]],[[]],[[]],[[6,242],486],[[12,12],[[486,[12]]]],[[12,12,12],[[486,[12]]]],[4],[4],[4],[4],[4],[4],0,[4],[4],[4],[[487,487],6],[[],6],[[],6],[[]],[[]],[[]],[[488,7],8],[[488,7],8],[[487,7],8],[[]],[203,488],[[]],[[]],0,[[],4],[[],4],[[],4],[[]],[[]],[[]],[[182,489],487],[489,6],[47,6],[[182,12],208],[288],[[182,182],[[486,[[20,[104]]]]]],[[490,4],6],[488,[[20,[491]]]],[[[493,[492]],182,[20,[490]],[494,[104]]],486],[[],242],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[[493,[492]],12,12,12,111,91],486],[[[493,[492]],182,12],486],[[182,182,12],[[11,[488]]]],[[[493,[492]],182,[20,[490]]],[[486,[495]]]],[[[493,[492]],182,[20,[490]],111,91],486],[[182,182],[[486,[104]]]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]],[81,[18]],496],6],[[],4],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],[[497,[[0,[113,256]]]]]],[[],[[498,[[0,[113,256]]]]]],[[],[[499,[113]]]],[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]],18]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]],[236,[[0,[257,[258,[256]],[259,[256]]]]]],287],[[38,[[260,[256]]]]]],[4],[4],[4],[4],[4],[4],[4],[500],[4],[496],0,0,0,[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]],[28,[18]],261,6,6,261]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]],6]],[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]],500,6]],[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]],261,6,500,261],[[499,[256]]]],0,0,[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]],7],8],[[[501,[[0,[82,256]]]],7],8],[[[497,[[0,[82,256]]]],7],8],[[[498,[[0,[82,256]]]],7],8],[[[499,[82]],7],8],[[500,7],8],[[496,7],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[101,[501,[256]],6,261,261,6]],[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]],18],[[20,[[38,[[260,[256]]]]]]]],[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]]],6],[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]],18,291]],[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]],18,6,291]],[[[501,[256]]],[[20,[[499,[256]]]]]],[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]],261],6],[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]]],6],[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]]],12],[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]],[0,[[81,[18]],82]],6]],0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[501,[256]],261,18,[38,[[260,[256]]]],6]],0,[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]],18,[285,[256]]],502],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]],[0,[[81,[18]],82]]],28],[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]],[81,[18]],6,496]],[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]],[81,[18]],6,6,496],6],[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]]],[[28,[18]]]],[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]]],261],0,[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]]],4],[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]],18],[[20,[[38,[[260,[256]]]]]]]],[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]],18],20],[110,[[20,[500]]]],[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]]],496],[[[260,[256]],[20,[27]],[236,[256]],235],4],[[175,175,503],496],0,[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]],261,261]],[[[38,[[262,[256,[0,[257,[258,[256]],[259,[256]]]]]]]],4],[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]]]],[261,[[501,[256]]]],0,0,[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]]],28],0,0,[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]],[20,[[81,[18]]]],496]],[[],6],0,[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]],18],6],[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]],[504,[18,[38,[[260,[256]]]]]]],6],[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]],6],6],[[[501,[256]],261]],[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]],[38,[[260,[256]]]],6]],[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]],261,6]],[[261,[38,[[260,[256]]]],6,261],6],[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]],261,[38,[[260,[256]]]],6,6,6,261]],[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]]]],[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]],18,291],20],0,[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]],27,101]],[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]]],445],0,0,0,0,0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]],505,6]],[[[236,[256]],27,256,[20,[27]],[236,[256]],235],6],[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]],[38,[[260,[256]]]],[285,[256]],[20,[27]],[236,[256]],235]],[[175,12]],[[175,505]],[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]],18,[285,[256]],[20,[27]],[236,[256]],235]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[444,[256,[0,[257,[258,[256]],[259,[256]]]]]]]],0,[18,6],[[],18],0,0,[18,6],[[],18],0,0,0,0,0,0,[[]],[[]],[18,6],[4],[4],[4],[[]],[[]],[[],4],[[],18],[[],4],[[]],0,0,[[],11],[[],11],[[],16],[[],[[20,[18]]]],[[],18],[[],[[20,[18]]]],[[],18],[4,18],[[],6],[[],6],[[]],0,0,[18,6],[[],18],0,[18,6],[[],18],0,0,0,[[]],[[]],[18,6],[4],[4],[4],[[]],[[]],[[],18],[[],4],[[]],[[],11],[[],11],[[],16],[[],6],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[506,[[38,[120]]]],[507,[[38,[120]]]],0,[506,[[38,[120]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[507,507],[[]],[[],508],[4],[506],[4],[4],[4],[4],[4],[4],[4],[506],[4],[4],[4],[4],[[416,416],6],[[],6],[[],6],[[]],[[]],[[],508],[[]],[[]],[[416,7],8],[[508,7],8],[[507,7],8],[[]],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[506,[[38,[120]]]],[[[20,[507]],509],242],[507,510],0,[[[38,[120]]],506],[[510,[38,[120]]],507],[507],[399],[[80,4]],[[]],[[],509],[[],433],[[],[[20,[507]]]],[507,27],[507,399],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[],16],[[]],[[]],[[]],[[]],[416,[[20,[415]]]],0,[[18,18,511],427],[[120,18,47],18],[[512,18,[20,[412]],412,47]],[[512,18,412,47],18],[47,[[28,[309]]]],[[512,412,412,412,47],[[28,[309]]]],[[421,412,412,412,412,47]],[[512,412,18,412,[20,[18]]]],[[512,412,412,18,412,47]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[513,513],[514,514],[[]],[[]],[[],513],[[],514],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[31,[[11,[513]]]],[31,[[11,[515]]]],[4],[4],[4],[4],[4],[[514,514],6],[[],6],[[],6],[[],513],[[]],[[]],[[]],[[]],[[]],[[516,7],8],[[517,7],8],[[513,7],8],[7,[[11,[36]]]],[7,[[11,[36]]]],[[514,7],8],[[]],[[]],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],0,0,[[76,22,25,[20,[[366,[[365,[518]]]]]],[366,[[365,[364]]]],[38,[66]],322,346,391,51,12,12,12],[[11,[514,519]]]],[[513,41],11],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[],16],[[],16],[516,[[11,[42]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[[517,63],11],[[517,64],11],[[516,47],[[11,[42]]]],[[516,12],[[11,[42]]]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[[38,[120]]],[[89,[520]]]],[4],[4],[4],[[]],[[]],[[],4],[[]],0,[[],[[28,[18]]]],[[],11],[[],11],[[],16],[[]],[[],[[28,[18]]]],[[521,[94,[18]],522],[[11,[523]]]],[[521,18,[94,[18]],522],[[11,[523]]]],[[521,18,25,522],[[11,[523]]]],[[23,12,23,25,[94,[18]],522,22,524],[[11,[523]]]],0,0,0,0,0,0,[[525,12]],[[525,12]],[[]],[[]],[[]],[[]],[[]],[[]],[[],525],[[],526],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[]],[[]],[[]],[[525,7],8],[[526,7],8],[[]],[[]],[[]],[526,[[20,[12]]]],[[526,18],[[20,[12]]]],[526,101],[526,4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[526,6],0,[526,[[11,[527]]]],0,0,0,0,0,0,0,[526],0,[[525,27]],[[526,27]],0,0,0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[526,12],[[11,[527]]]],[[525,12]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[528,12]],[[528,12]],[[528,12]],[[528,12]],[[528,12]],[[528,12]],[529,4],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],528],[[],529],[4],[4],[4],[4],[4],[4],[4],[4],[529],[4],[[]],[[]],[[]],[[529,27]],[[[38,[[138,[[530,[27,[38,[[237,[526]]]]]]]]]],27,[38,[528]]]],[[528,7],8],[[529,7],8],[[]],[[]],[[]],[[[38,[[138,[[530,[27,[38,[[237,[526]]]]]]]]]],27],[[38,[[237,[526]]]]]],[529,[[68,[27,12]]]],[[],4],[[],4],[[],4],[[]],[[]],[[]],0,[12,529],[[528,27]],0,[[[38,[[138,[[530,[27,[38,[[237,[526]]]]]]]]]],[170,[531]],[38,[528]]]],0,0,0,0,0,0,0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[529,120,101]],[[[38,[[138,[[530,[27,[38,[[237,[526]]]]]]]]]],27,12,[38,[[28,[18]]]],[38,[528]]]],[[]],[[]],[[]],0,0,0,0,0,0,[[532,18],4],[[]],[[]],[4],[4],[4],[[]],[[532,7],8],[[]],[[],4],[[]],[213,213],[[532,4,4],18],[4,532],[[],4],0,[[],11],[[],11],[[],16],[[]],0,0,0,0,0,[[533,19],4],[[]],[[]],[[]],[[]],0,[533,4],[533,4],0,[4],[4],[4],[4],[4],[4],0,[[]],[[]],[[534,7],8],[[533,7],8],[[]],[[]],[533],0,[[533,18,27],6],0,[[],4],[[],4],[[]],[[]],[[533,18,27],[[20,[19]]]],0,0,[4,533],0,[[533,18,27],[[20,[19]]]],[533],[[533,18,27,19]],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[535,535],535],[[535,535]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[74,18,48,[20,[18]]],536],[74,74],[535,535],[[]],[[]],[[74,62],74],[[74,18,19,[20,[18]],6],535],[[],74],[[],535],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[31,[[11,[74]]]],[31,[[11,[537]]]],[4],[4],[4],[4],[4],[4],0,0,[[74,74],6],[[535,535],6],[[],6],[[],6],[[],74],[[]],[[]],[[]],[[]],[[]],[[]],[[538,7],8],[[539,7],8],[[74,7],8],[7,[[11,[36]]]],[7,[[11,[36]]]],[[536,7],8],[[535,7],8],[[]],[[]],[[]],[[]],[[]],[[]],[[74,48],540],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[62,169,227,25],74],0,0,[[74,41],11],[[74,18,48],6],0,[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[538,[[11,[42]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[[539,63],11],[[539,64],11],[[538,47],[[11,[42]]]],[[538,12],[[11,[42]]]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[541,541],[341,341],[[]],[[]],[[],341],[4],[4],[4],[4],[4],[4],[[541,541],6],[[341,341],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[541,7],8],[[341,7],8],[[]],[[]],[[341,18],12],[[],4],[[],4],[[341,18,12,12]],[[]],[[]],[341,101],0,0,[[]],[[]],[[],11],[[],11],[[],11],[[],11],[541,[[20,[337]]]],[[],16],[[],16],[[]],[[]],0,0,0,[[],[[94,[18]]]],[[],[[94,[18]]]],0,[[542,18]],[[]],[[]],[[]],[[]],[[],542],[543,[[94,[18]]]],[4],[4],[4],[4],[4],[4],[[]],[[]],[[542,7],8],[[]],[[]],[[542,12],[[94,[18]]]],[[],4],[[],4],[[]],[[]],[542,6],[169,542],0,[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[]],[[]],0,[283,6],0,[[]],[[]],[283,283],[[]],[[283,12],6],[[283,12],6],0,[[],283],[4],[4],[4],[[283,283],6],[[],283],[[]],0,[[283,7],8],[[]],[[283,12],12],[283,[[28,[12]]]],[[283,27],[[28,[12]]]],[[283,27],[[20,[27]]]],[[],4],[[283,12]],[[]],[283,6],[283,4],[283,12],0,[283,12],0,[283,[[20,[12]]]],0,[12,283],[[283,12]],[283,12],[[283,12],6],[[]],[[],11],[[],11],[[],16],[[]],0,0,[[]],[[]],0,[4],[4],[4],[[]],[[]],[[],4],[[]],[[[38,[[138,[137]]]]],544],[544,[[38,[120]]]],0,[[],11],[[],11],[[],16],[[]],0,[[]],[[]],0,[404,404],[[]],0,[[],404],[4],[4],[4],[[]],[[],404],[[404,7],8],[[]],[[],4],[[]],0,[[]],0,[[],11],[[],11],[[],16],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],545],[[],546],[[],547],[[],[[550,[[0,[113,548,549,176,113]],[0,[113,548,549,176,113]]]]]],[[],551],[[],[[276,[[0,[113,275,113,49,112]]]]]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[]],[[]],[[]],[[]],[[]],[[]],[[545,7],8],[[546,7],8],[[547,7],8],[[[550,[[0,[113,548,549,176,82]],[0,[113,548,549,176,82]]]],7],8],[[551,7],8],[[[276,[[0,[82,275,113,49,112]]]],7],8],[[]],[[]],[[]],[[]],[[]],[[]],[[[276,[[0,[275,113,49,112]]]],18],[[28,[18]]]],[[551,4],28],[[[550,[[0,[113,548,549,176]],[0,[113,548,549,176]]]]],28],0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[276,[[0,[275,113,49,112]]]],18,18]],[[18,175]],[[546,18,175]],[[547,18,175]],[[]],[[]],[[]],[[]],[[]],[[]],[[],6],[546,6],[547,6],0,[[],[[28,[18]]]],[546,[[28,[18]]]],[547,[[28,[18]]]],0,[[],4],[546,4],[547,4],[[[276,[[0,[275,113,49,112]]]]]],0,0,[4,[[550,[[0,[113,548,549,176]],[0,[113,548,549,176]]]]]],[47,[[276,[[0,[275,113,49,112]]]]]],0,[[[276,[[0,[275,113,49,112]]]],18]],[[[276,[[0,[275,113,49,112]]]],18,18]],[18,6],[[546,18],6],[[547,18],6],0,[[[550,[[0,[113,548,549,176]],[0,[113,548,549,176]]]],[0,[113,548,549,176]]]],0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[551,4,18]],[[[550,[[0,[113,548,549,176]],[0,[113,548,549,176]]]],[0,[113,548,549,176]],[0,[113,548,549,176]]]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[552,[553,[492]],554,208,404,[20,[[38,[[94,[18]]]]]],[20,[376]],106,[20,[4]],107,6,[20,[108]],[20,[109]],[38,[110]]],[[11,[120,555]]]],[[552,[557,[556]],120],[[11,[555]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[552,552],[[[558,[176]]],[[558,[176]]]],[559,559],[560,560],[[]],[[]],[[]],[[]],[561,336],[562,[[11,[558,555]]]],[[[243,[182]],[243,[182]]],[[11,[6,555]]]],[[],559],[[],560],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[31,[[11,[[558,[563]]]]]],[31,[[11,[[564,[563]]]]]],[31,[[11,[[565,[563]]]]]],[31,[[11,[559]]]],[31,[[11,[566]]]],[[[567,[492]]],[[11,[558,555]]]],[[[567,[492]]],[[11,[555]]]],[492,[[569,[568]]]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[552,552],6],[[[558,[548]],[558,[548]]],6],[[559,559],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[],558],[[]],[[]],[[]],[[],559],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[570,[563]],7],8],[[571,7],8],[[572,7],8],[[552,[567,[492]]],[[11,[555]]]],[[552,[553,[492]]],[[11,[555]]]],[[[558,[82]],7],8],[7,[[11,[36]]]],[[559,7],8],[7,[[11,[36]]]],[7,[[11,[36]]]],[[561,7],8],[[[562,[82]],7],8],[[560,7],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[[562,[[0,[573,49]]]],554,208,106,[20,[4]],107,6,[20,[108]],[20,[109]],[38,[110]],[20,[51]],[20,[330]]],[[11,[555]]]],[[561,[562,[[0,[573,49]]]],208,404,554,[20,[[38,[[94,[18]]]]]],[20,[376]],106,[20,[4]],107,6,[20,[108]],[20,[109]],[38,[110]]],[[11,[120,555]]]],[[103,[28,[27]],28]],[[27,182,4,15],[[214,[[38,[37]]]]]],[[27,4,4,182,574,71],[[214,[[38,[37]]]]]],[[27,4,182,574,71],214],[[[567,[492]],[557,[556]],246,[20,[330]]],[[11,[[124,[575]]]]]],[[[567,[492]],[557,[556]],246,[20,[330]]],[[11,[555]]]],[[[243,[182]],27,246,[20,[330]]],6],[[[577,[576]],41],11],[[[578,[576]],41],11],[[[558,[511]],41],11],[[559,41],11],[[41,[578,[281]]],11],[[41,[577,[281]]],11],0,[[[558,[579]]],[[68,[27,[68,[4,4]]]]]],0,0,0,[[]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],0,0,0,0,[571,[[11,[42]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[[572,63],11],[[[570,[563]],64],11],[[572,64],11],[[571,47],[[11,[42]]]],[[571,12],[[11,[42]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[580,580],[379,379],[[]],[[]],0,0,0,0,0,0,[[],580],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[31,[[11,[580]]]],[31,[[11,[581]]]],[31,[[11,[379]]]],[31,[[11,[582]]]],[[[567,[492]]],[[11,[[558,[579]],555]]]],[[[567,[492]]],[[11,[555]]]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],0,0,0,0,0,0,[[580,580],6],[[583,583],6],[[],6],[[],6],[[],6],[[],6],[[]],[[],580],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[584,7],8],[[585,7],8],[[586,7],8],[[587,7],8],0,0,0,0,[[580,7],8],[7,[[11,[36]]]],[7,[[11,[36]]]],[7,[[11,[36]]]],[7,[[11,[36]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[377,588],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[567,[492]],[557,[556]],246,[20,[330]]],[[11,[[124,[575]]]]]],[[580,41],11],[[588,41],11],[[589,41],11],[[41,[578,[583]]],11],[[41,[577,[583]]],11],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],0,0,0,0,0,0,[584,[[11,[42]]]],[586,[[11,[42]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[[585,63],11],[[587,63],11],[[585,64],11],[[587,64],11],[[584,47],[[11,[42]]]],[[586,47],[[11,[42]]]],[[584,12],[[11,[42]]]],[[586,12],[[11,[42]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[579,579],[[]],[[],4],[579,4],[[],579],[4],[4],[4],[4],[4],[4],[4],[4],[31,[[11,[579]]]],[31,[[11,[590]]]],[4],[4],[4],[4],[[579,579],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[591,7],8],[[592,7],8],[[579,7],8],[7,[[11,[36]]]],[7,[[11,[36]]]],[[]],[37,579],[[]],[[]],[[]],[[],4],[579,4],0,[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],0,0,[[579,41],11],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[],16],[591,[[11,[42]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[[592,63],11],[[592,64],11],[[591,47],[[11,[42]]]],[[591,12],[[11,[42]]]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[228,228],[229,229],[230,230],[[]],[[]],[[]],[[],228],[[],229],[[],230],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[31,[[11,[228]]]],[31,[[11,[229]]]],[31,[[11,[230]]]],[4],[4],[4],[4],[4],[4],[[228,228],6],[[229,229],6],[[230,230],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],228],[[]],[[]],[[],229],[[]],[[]],[[],230],[[]],[[]],[[593,7],8],[[594,7],8],[[595,7],8],[[228,7],8],[7,[[11,[36]]]],[[229,7],8],[7,[[11,[36]]]],[[230,7],8],[7,[[11,[36]]]],[172,228],[[]],[[]],[[]],[246,229],[[]],[[]],[247,230],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[228,41],11],[[229,41],11],[[230,41],11],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[[593,31],11],[[594,31],11],[[595,31],11],[[593,64],11],[[594,64],11],[[595,64],11],[[]],[[]],[[]],[[]],[[]],[[]],[223,511],[223,511],[223,511],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[596],0,0,0,0,[[],203],[[],146],[4],[4],[4],[4],[4],[4],[4],[4],[597],[4],[4],[596],[4],[4],0,0,0,[[]],[[]],[[]],[[]],[[598,7],8],[[]],[[]],[[]],[[]],[597,6],0,[[],4],[[],4],[[],4],[[],4],0,0,[[]],[[]],[[]],[[]],0,[[[0,[492,112]]],599],[599,596],[[],598],0,[[4,4,[0,[492,112]]],599],0,0,[[4,4],4],[596,[[214,[4]]]],[[598,[0,[492,112]],4,4]],[[598,203]],0,[597,6],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[],16],[[596,4]],[[]],[[]],[[]],[[]],[598,6],[597,6],0,0,0,0,[[],600],0,[601,27],0,[[]],[[]],[[]],[[]],[[]],[[]],[602,602],[603,603],[601,601],[[]],[[]],[[]],[[603,603],125],[[601,601],125],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[602,602],6],[[603,603],6],[[601,601],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[602,7],8],[[603,7],8],[[601,7],8],[[]],[[]],[[]],[[],388],0,[[],4],[[],4],[[],4],0,[[]],[[]],[[]],[[],6],[602,603],[[27,602],601],[104,[[604,[603]]]],[104,[[604,[601]]]],[[603,603],[[20,[125]]]],[[601,601],[[20,[125]]]],[[],104],0,[[],27],0,[[],602],[603,602],[601,602],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[]],[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[141,141],[605,605],[[]],[[]],[[],141],[4],[4],[4],[4],[4],[4],[[605,605],6],[[],6],[[],6],[[]],[[]],[[141,7],8],[[605,7],8],[[]],[[]],0,0,0,0,[[],4],[[],4],[[]],[[]],0,0,[[],141],0,[141,6],0,[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],0,[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[606,606],[607,607],[608,608],[388,388],[[]],[[]],[[]],[[]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[606,606],6],[[607,607],6],[[608,608],6],[[388,388],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[606,7],8],[[607,7],8],[[608,7],8],[[388,7],8],[[]],[[]],[[]],[[]],0,0,[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[244,[20,[360]]],388],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[],16],[[]],[[]],[[]],[[]],0,0,[609,103],[[609,91,47]],0,[[]],[[]],[4],[4],[4],0,[[]],[[609,[38,[37]],[237,[[28,[[38,[37]]]]]]]],[[]],[609],[609],[609],[609,[[389,[27]]]],[609],[609],[609],[609],[609],[609],[609],[[],4],[[]],[[120,27,27,[389,[18]]]],[609],0,[[609,[389,[27]]]],[[609,[28,[27]]]],0,[[],11],[[],11],[[],16],[[]],0,0,0,0,0,0,0,0,0,0,[[132,120,[28,[[38,[37]]]],[20,[246]],[20,[610]]],611],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[132,132],[612,612],[[]],[[]],[[132,132],125],[[611,611],125],[[613,613],125],[[612,612],125],0,[[],611],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],0,0,0,0,[[132,132],6],[[612,612],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],0,[[611,7],8],[[613,7],8],[[132,7],8],[[612,7],8],[[]],[[]],[[]],[[]],[[]],0,0,[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[612,6],0,[612,6],[[611,244],613],[[132,120,[28,[[38,[37]]]],[20,[246]]],611],[[132,120,614,[243,[182]],[243,[182]],[243,[182]],[28,[[38,[37]]]],600,615,[20,[246]]],[[604,[611]]]],0,0,[[28,4]],0,[613,602],0,0,0,0,[611,182],0,0,0,0,0,[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[],16],[[],16],[[]],[[]],[[]],[[]],[[]],[[132,132],125],[[611,611],125],[[613,613],125],[[612,612],125],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],616],[[],616],[[],616],[[],616],[[[243,[182]],120,615,[28,[617]]],[[604,[614]]]],0,[[613,[243,[182]],[243,[182]],69,69],604],[615,47],[[[243,[182]],[243,[182]],[243,[182]]],[[604,[336]]]],[[618,[20,[618]]],[[604,[336]]]],[[[243,[182]],[243,[182]],[243,[182]],208,404,[20,[[38,[[94,[18]]]]]],[20,[376]],106,[20,[4]],107,6,6,6,[20,[108]],[20,[109]],[38,[110]]],604],[[[243,[182]],208,404,[20,[[38,[[94,[18]]]]]],[20,[376]],106,[20,[4]],107,6,[20,[108]],[20,[109]],[38,[110]]],[[604,[120]]]],[[[243,[182]],603,[20,[601]],208,404,[20,[[38,[[94,[18]]]]]],[20,[376]],106,[20,[4]],107,6,6,6,[20,[108]],[20,[109]],[38,[110]]],604],[[614,208,404,[20,[[38,[[94,[18]]]]]],[20,[376]],106,[20,[4]],107,6,[20,[108]],[20,[109]],[38,[110]]],604],[[[243,[182]],120,[20,[615]],[243,[182]],[243,[182]],600,69,69],[[604,[603]]]],[[[243,[182]],120,27,[20,[615]],[243,[182]],[243,[182]],600,69,69],[[604,[601]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[243,[182]],27,388,600],104],[[[243,[182]],27,27,388,600],104],[[[243,[182]]],104],[[614,[38,[574]]],[[604,[39]]]],0,[[603,[20,[601]]],604],[[12,[243,[182]],[567,[619]]],604],[[[243,[182]]],604],[615,615],[620,620],[621,621],[622,622],[[]],[[]],[[]],[[]],[[614,614],125],[[[243,[182]]],214],[[],604],[[[243,[182]],12],604],[[[243,[182]]],604],[[]],[[],615],[[],623],[[],624],[[[0,[[243,[182]],625]]]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[182,291],[[604,[281]]]],[[626,291],[[604,[281]]]],[[626,12,291],[[604,[281]]]],[182,[[604,[[28,[617]]]]]],[[[28,[614]]],[[20,[614]]]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[615,615],6],[[614,614],6],[[620,620],6],[[621,621],6],[[627,627],6],[[628,628],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[615,7],8],[[615,7],8],[[614,7],8],[[620,7],8],[[621,7],8],[[626,7],8],[[629,7],8],[[618,7],8],[[133,7],8],[[133,7],8],[[630,7],8],[[630,7],8],[[627,7],8],[[627,7],8],[[623,7],8],[[624,7],8],[[628,7],8],[[622,7],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[555,133],[[[142,[104]]],133],[630,133],[488,133],[203,133],[627,133],[[]],[203,630],[[]],[[]],[[]],[[]],[[]],[[]],[47,[[11,[615]]]],0,0,[182,[[20,[104]]]],[[[243,[182]]],[[28,[614]]]],[[[243,[182]],27],104],[[[243,[182]]],[[28,[614]]]],[[[243,[182]]],[[28,[614]]]],[[[243,[182]]],[[28,[603]]]],[[[243,[182]]],[[20,[614]]]],[[[243,[182]]],[[20,[614]]]],[[[243,[182]]],[[20,[614]]]],[[[243,[182]]],[[20,[603]]]],[[[243,[182]]],[[20,[27]]]],[[[243,[182]],27],[[20,[601]]]],[[[243,[182]],27],[[20,[27]]]],[[[243,[182]]],[[28,[601]]]],[47,133],[[182,27,[94,[104]],[243,[182]]],[[604,[104]]]],[[182,91],28],[27,242],[120,[[28,[[38,[37]]]]]],[[],[[28,[[28,[[38,[37]]]]]]]],[[[243,[182]],27],604],0,0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[0,[[243,[182]],625]]]],[[[243,[182]],27],[[11,[614,630]]]],0,[[120,614,[243,[182]],[243,[182]],[243,[182]],[28,[[38,[37]]]],600,615,69,69],[[604,[603]]]],[[120,27,614,[243,[182]],[243,[182]],[243,[182]],[28,[[38,[37]]]],600,615,69,69],[[604,[601]]]],[47,604],[47,604],[[614,614],[[20,[125]]]],[182,[[604,[47]]]],[288],[288],[288],[[[243,[182]],4,[20,[620]]]],[[[243,[182]],[243,[182]],69,69]],[[614,554,208,404,[20,[[38,[[94,[18]]]]]],[20,[376]],106,[20,[4]],107,6,[20,[108]],[20,[109]],[38,[110]]],[[604,[120]]]],0,0,[[618,[20,[618]],554,208,404,[20,[[38,[[94,[18]]]]]],[20,[376]],106,[20,[4]],107,6,[20,[108]],[20,[109]],[38,[110]]],[[604,[120]]]],[[27,[243,[182]]],604],[[[243,[182]]]],[[182,291],[[604,[12]]]],[[182,12,291],[[604,[12]]]],[[27,182],604],[[27,27],6],[[27,27,[20,[27]]],6],0,0,0,[614,104],0,0,0,0,[[[243,[182]]],[[604,[242]]]],[133,[[20,[491]]]],[630,[[20,[491]]]],[[[494,[104]],[38,[[28,[104]]]],[38,[104]],[493,[596]],[20,[490]],4],631],0,0,[[[494,[104]],[259,[104]],[259,[104]]],604],[[[494,[104]],[28,[104]],104,104,600,4],[[28,[631]]]],[[]],[[]],[[]],[[]],[[],242],[[],242],[[],242],[[],242],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[[243,[182]],47,[243,[182]],47,600,4,[38,[574]]],[[604,[629]]]],0,[[599,182,4],[[604,[495]]]],0,0,[[182,600],599],[[[243,[182]],182,600,4],[[604,[495]]]],[[[243,[182]],603,[20,[601]]],604],[[120,27,388],604],[120,[[11,[627]]]],[27,[[11,[628,627]]]],[[[94,[27]],387,27],[[11,[627]]]],[[[243,[182]],[243,[182]],[243,[182]],600,622]],0,[618,604],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[243,[182]],615],604],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[600,600],[632,632],[[]],[[]],[4],[4],[4],[4],[4],[4],[[600,600],6],[[632,632],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[600,47],[[600,7],[[11,[36]]]],[[600,7],8],[[632,7],8],[[632,7],8],[[]],[[]],[47,[[20,[600]]]],[47,[[11,[600]]]],[[],4],[[],4],[[]],[[]],[[]],[[]],[[],242],[[],242],[47,[[11,[600]]]],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[],616],[[],616],[[],616],[[],616],[[],616],[[],616],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[633,83],[4],[4],[634,616],[4],[635,616],[636,616],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[637,637],6],[[]],[[]],[[]],[[]],[[]],[[]],0,[[633,7],8],[[637,7],8],[[]],[[]],[[]],[[]],[[]],[[]],[47],[47,[[20,[637]]]],[[[38,[574]],182,27],15],[[[170,[104]]]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[633,27,104],4],[[]],[[]],[[]],[[]],[[]],[[]],[[[170,[104]],4,[38,[574]],[68,[27,[68,[4,4]]]],621],633],0,0,0,[[633,104],[[11,[203]]]],[[633,[28,[104]]],[[11,[203]]]],[[633,27],[[11,[203]]]],[[615,104],[[11,[[68,[27,[68,[4,4]]]],555]]]],0,[[[170,[104]],4,[38,[574]],621],[[11,[638,133]]]],0,0,0,[[[170,[104]],4,[38,[574]],[68,[27,[68,[4,4]]]],[28,[104]],621],[[11,[39,203]]]],[[83,[494,[[11,[203]]]],[38,[633]]]],0,0,0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[]],[[]],[[]],[[]],[[]],[[]],[[633,[170,[[11,[203]]]]],[[11,[203]]]],0,0,[[]],[[]],[[]],[[]],[4],[4],[4],[4],[4],[4],[[],154],[[]],[[]],[[]],[[]],[[154,27],[[20,[[38,[37]]]]]],[[],4],[[],4],[[]],[[]],[[]],[[154,[81,[27]]],639],[154,27],[[]],[[],154],[[154,[81,[27]]],639],[[[0,[101,176]],[20,[27]],[20,[27]]],154],[639,20],0,[154,[[212,[27]]]],0,0,[154,27],[154,4],[154,4],0,0,[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[]],[[]],0,0,0,0,0,0,[374,19],0,[[]],[[]],[[]],[[]],[[[374,[176]]],[[374,[176]]]],[[]],[[],[[374,[113]]]],[[[374,[373]]],373],[4],[4],[4],[4],[4],[4],[[374,374],6],[[],[[374,[373]]]],[[]],[[]],[[[374,[82]],7],8],[[640,7],8],[[640,7],8],[[[374,[373]]],374],[[]],[[]],[523,640],[[],4],[[],4],[[]],[[]],[374,12],[288],[640,[[20,[491]]]],[374,641],0,[[]],[[],242],[19,[[11,[[374,[373]]]]]],[19,[[11,[374]]]],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[325,325],[[]],[[],325],[325],[4],[4],[325],[4],[4],[31,[[11,[325]]]],[4],[4],[[325,325],6],[[],6],[[],6],[[],325],[[]],[[]],[[642,7],8],[[325,7],8],[7,[[11,[36]]]],[[]],[[]],[[],4],[[],4],[[]],[[]],0,0,[[325,41],11],[[]],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[[642,31],11],[[642,64],11],[[]],[[]],0,0,0,0,0,[[]],[[]],[[223,[68,[18]],27,146,20,392,6],[[20,[381]]]],[392,392],[[]],[4],[4],[4],[[]],0,[[]],[[],4],[[]],0,[[]],[[],11],[[],11],[[],16],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[643,62,83]],[[[375,[[374,[373]]]],62,83]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[375,[[374,[373]]]],18,62,325],12],[[643,18,48]],[644,644],[[[375,[[0,[176,176]]]]],[[375,[[0,[176,176]]]]]],[[]],[[]],[[],643],[[],[[375,[[0,[113,176]]]]]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[31,[[11,[[375,[[0,[563,176]]]]]]]],[31,[[11,[645]]]],[4],[4],[4],[4],[4],[4],[4],[4],0,[[644,644],6],[[[375,[[0,[548,176]]]],[375,[[0,[548,176]]]]],6],[[481,481],6],[[],6],[[],6],[[]],[[]],[[]],[[],643],[[]],[[],[[375,[176]]]],[[]],[[]],[[]],[[]],[[],481],[[646,7],8],[[[647,[[0,[563,176]]]],7],8],[[648,7],8],[[648,7],8],[[644,7],8],[[643,7],8],[[[375,[[0,[82,176]]]],7],8],[7,[[11,[36]]]],[7,[[11,[36]]]],[[481,7],8],[[]],[640,648],[[]],[[]],[[[375,[[374,[373]]]]],[[375,[373]]]],[[]],[[]],[[]],[[]],[[[375,[[374,[373]]]]],481],[[[375,[373]]],481],[[]],[[643,[231,[18,644]],[231,[18,644]],27]],[[[375,[[374,[373]]]]],[[20,[18]]]],[[[375,[[374,[373]]]]],325],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[68,[18,12]],[68,[18,12]]],[[68,[18,12]]]],[[[375,[[374,[373]]]]],643],[[[375,[373]],91],[[11,[[375,[[374,[373]]]],648]]]],[288],[[[375,[[374,[373]]]],18]],[[[375,[[374,[373]]]],18]],0,[[[375,[[0,[511,176]]]],41],11],[648,[[20,[491]]]],[[[375,[[374,[373]]]]],[[649,[18,[374,[373]]]]]],0,0,[[[375,[176]]],[[38,[[68,[18,12]]]]]],[481,[[38,[[68,[18,12]]]]]],[643,[[292,[[375,[[374,[373]]]]]]]],[644,[[20,[168]]]],[[]],[[]],[[],242],[644,[[20,[12]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],0,[[[375,[[374,[373]]]],18,[374,[373]]]],[[[375,[[374,[373]]]],18,394]],[646,[[11,[42]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[[[647,[[0,[563,176]]]],63],11],[[[647,[[0,[563,176]]]],64],11],[[646,47],[[11,[42]]]],[[646,12],[[11,[42]]]],[[[375,[176]]],650],[481,650],0,[[[375,[[374,[373]]]]],12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[31,[[11,[[38,[481]]]]]],[[481,41],11],0,0,[[],[[28,[18]]]],[[],[[28,[18]]]],[[]],[[]],[4],[651,[[28,[18]]]],[4],[4],[[]],[[]],[[],4],[[]],[[],11],[[],11],[[],16],[[]],0,0,0,0,0,0,0,0,0,0,[[[652,[[0,[511,176]]]],27]],[[[652,[[0,[511,176]]]]]],[[]],[[]],[[]],0,[[[652,[[0,[511,176]]]]]],[[[652,[[0,[511,176]]]],27]],[[[652,[[0,[176,511,176]]]]],[[652,[[0,[176,511,176]]]]]],[[]],[[],[[652,[[0,[511,176]]]]]],[4],[4],[4],[[[652,[[0,[511,176,548]]]],[652,[[0,[511,176,548]]]]],6],[[],[[652,[[0,[511,176]]]]]],[[]],[[[652,[[0,[82,511,176]]]],7],8],[[]],[[],[[652,[[0,[511,176]]]]]],[[[652,[[0,[511,176]]]],243,51,78],20],[[[652,[[0,[511,176]]]],243,78],20],[[],4],[[[652,[[0,[511,176]]]],51,243,27,[0,[511,176]]]],[[[652,[[0,[511,176]]]],51,27,4,[0,[511,176]]]],[[]],[[[652,[[0,[511,176]]]]]],[[[652,[[0,[511,176]]]]],[[28,[[653,[[0,[511,176]]]]]]]],[[[652,[[0,[511,176]]]]],[[94,[27]]]],0,0,[[]],[[],11],[[],11],[[],16],[[]],0,0,0,[4],[[[654,[[0,[48,49]]]],4],[[0,[48,49]]]],[[655,4],57],[4,20],0,[[]],[[]],[[]],[[]],[[],6],[655,6],0,[4],[4],[4],[4],[4],[4],[[]],[[]],[[655,4]],[[]],[[]],[[],6],[655,6],[4,51],[[655,4],51],[[],116],[[[654,[[0,[48,49]]]]],116],[655,116],0,0,[[],4],[[],4],[[]],[[]],[[],6],[[],4],[[[654,[[0,[48,49]]]]],4],[655,4],0,[[27,116],655],0,[4,18],[[[654,[[0,[48,49]]]],4],18],[[655,4],18],[4,27],[[[654,[[0,[48,49]]]],4],27],[[655,4],27],0,0,[[],27],[[[654,[[0,[48,49]]]]],27],[655,27],0,0,[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[]],[[]],[4,12],[[655,4],12],0,0,0,0,0,[[521,656,12,[94,[18]],522],[[11,[523]]]],[[521,656,12,18,[94,[18]],522],[[11,[523]]]],[[521,656,18,[94,[18]],522],[[11,[523]]]],0,[[]],[[]],[[]],[[]],[657,657],[[]],[[18,20,522],[[11,[656,523]]]],[[23,23,656,12,12,18,[94,[18]],522,22,524],[[11,[523]]]],[[],656],[4],[4],[4],[4],[4],[4],[[656,656],6],[[657,657],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[656,7],8],[[657,7],8],[[]],[[]],[19,[[20,[657]]]],[[],4],[[],4],[[]],[[]],[[656,[94,[18]]],6],[522,[[11,[[124,[491]]]]]],[[]],[[23,23,12,522,22,524],[[11,[523]]]],[[23,23,12,522,22,524],[[11,[523]]]],[[23,23,47,18,23,12,522,22,524],[[11,[523]]]],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[]],[[]],0,[339,120],0,[[]],[[]],[4],[4],[339],[4],[[]],[[]],[[],4],[[]],[339,[[28,[24]]]],0,[339,6],0,[[[28,[24]],120,658],339],[339],0,[[339,6]],[[],11],[[],11],[[],16],[[]],0,0,0,0,[[70,70]],0,0,0,[[]],[[]],0,[[],70],[4],[4],[4],[[]],[[70,7],8],[[]],[[],4],0,0,[[]],0,0,0,0,0,0,[[],70],0,[[70,213,27]],0,0,[[],11],[[],11],[[],16],[[]],0,0,0,0,0,0,[[]],[[]],0,[4],[4],[4],[[659,659],6],[[],6],[[],6],[[]],[[659,7],8],[[]],[[],[[20,[659]]]],[[],4],[[]],0,[101,[[20,[659]]]],[[],11],[[],11],[[],16],[[]],0,0,[660],[[]],[[]],[660,6],0,[[],660],[4],[4],[4],[[]],[[660,7],8],[[]],[[],4],[[]],[[660,291]],0,[[],11],[[],11],[[],16],[660],0,[[]],[660],0,0,0,0,0,0,0,[394,19],0,[[650,12,394]],[[650,18,12]],[650,358],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[394,394],[650,650],[[]],[[]],[[],650],[650,101],[4],[4],[4],[4],[4],[4],[4],[4],[31,[[11,[394]]]],[31,[[11,[650]]]],[4],[4],[4],[4],[[394,394],6],[[661,661],6],[[650,650],6],[[]],[[],394],[[]],[[]],[[],661],[[]],[[],650],[650,[[20,[394]]]],[[394,7],8],[[662,7],8],[[662,7],8],[[661,7],8],[[650,7],8],[[]],[523,662],[[]],[[]],[[]],[[[38,[358]]],650],[223,650],[[650,18],[[20,[394]]]],[[650,18],12],[[],4],[[],4],[[],4],[[],4],[[650,18]],[[]],[[]],[[]],[[]],[394,6],[650,101],[394,12],[650,4],[394,[[20,[18]]]],[394,18],[288],[[650,18],20],[[394,41],11],[[650,41],11],[662,[[20,[491]]]],[650,[[38,[[68,[18,12]]]]]],0,[[650,12,394]],[[650,18,12]],[[]],[[]],[[],242],[19,[[11,[394]]]],[[],11],[[],11],[[],11],[19,[[11,[661]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],16],[[],16],[[],16],[[],16],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],[44,[[11,[44,45]]]],0,[394,[[11,[663,662]]]],0,[[]],[[]],[[]],[[]],0,[80,[[20,[664]]]],[[],20],[406,[[20,[664]]]],0,0,0,0,0,[[]],[[]],[4],[4],[4],[[665,665],6],[[],6],[[],6],[[]],[[665,7],8],[[]],[666,665],[667,665],[665,51],[[],4],[[]],[665,6],[665,[[20,[27]]]],[665,20],[665,[[28,[27]]]],[665,[[20,[381]]]],[[],11],[[],11],[[],16],[[]],0,[[]],[[]],[[],503],[4],[4],[4],0,[[]],[[503,7],8],[[]],[[],4],[[]],0,[503],[503],[[],11],[[],11],[[],16],[[]],[[503,146],6]],"c":[5139,5145,6311],"p":[[3,"PackedOffsetAndFlags"],[3,"AccountInfo"],[3,"AccountOffsetAndFlags"],[15,"usize"],[4,"StorageLocation"],[15,"bool"],[3,"Formatter"],[6,"Result"],[6,"OffsetReduced"],[3,"InvalidBitPattern"],[4,"Result"],[15,"u64"],[6,"Offset"],[3,"OutOfBounds"],[6,"AppendVecId"],[3,"TypeId"],[3,"AccountOverrides"],[3,"Pubkey"],[3,"AccountSharedData"],[4,"Option"],[4,"RentState"],[3,"TransactionContext"],[6,"IndexOfAccount"],[6,"Result"],[3,"Rent"],[3,"AccountStorage"],[6,"Slot"],[3,"Vec"],[3,"AccountStorageReference"],[4,"AccountStorageStatus"],[8,"Deserializer"],[4,"__Field"],[3,"ShrinkInProgress"],[3,"__FieldVisitor"],[3,"__Visitor"],[3,"Error"],[3,"AccountStorageEntry"],[3,"Arc"],[6,"AccountStorageMap"],[3,"AccountStorageIter"],[8,"Serializer"],[8,"Error"],[8,"EnumAccess"],[3,"AbiDigester"],[4,"DigestError"],[6,"DigestResult"],[15,"str"],[8,"ReadableAccount"],[8,"Sync"],[8,"StorableAccounts"],[3,"Hash"],[8,"Borrow"],[3,"StorableAccountsWithHashesAndWriteVersions"],[3,"StoredAccountInfo"],[3,"StoredMeta"],[3,"AccountMeta"],[4,"StoredAccountMeta"],[4,"__Field"],[3,"__FieldVisitor"],[3,"__Visitor"],[6,"StoredMetaWriteVersion"],[6,"Epoch"],[8,"MapAccess"],[8,"SeqAccess"],[3,"Accounts"],[3,"FeatureSet"],[3,"LoadedProgram"],[3,"HashMap"],[3,"NonZeroUsize"],[3,"TransactionErrorMetrics"],[3,"AtomicUsize"],[3,"AccountsAddRootTiming"],[3,"LoadedTransaction"],[3,"RentCollector"],[3,"DurableNonce"],[4,"SanitizedMessage"],[3,"AccountLocks"],[3,"Ancestors"],[3,"BlockhashQueue"],[3,"SanitizedTransaction"],[8,"RangeBounds"],[8,"Debug"],[3,"ThreadPool"],[6,"TransactionCheckResult"],[3,"FeeStructure"],[6,"TransactionLoadResult"],[6,"BankId"],[6,"PubkeyAccountSlot"],[6,"ScanResult"],[4,"IndexKey"],[8,"Fn"],[3,"ScanConfig"],[6,"TransactionAccount"],[3,"HashSet"],[4,"AccountAddressFilter"],[3,"MessageAddressTableLookup"],[3,"SlotHashes"],[3,"LoadedAddresses"],[4,"AddressLookupError"],[4,"LoadHint"],[8,"Iterator"],[3,"TransactionAccountLocks"],[3,"AccountsDb"],[3,"PathBuf"],[4,"ClusterType"],[3,"AccountSecondaryIndexes"],[4,"AccountShrinkThreshold"],[3,"AccountsDbConfig"],[6,"AccountsUpdateNotifier"],[3,"AtomicBool"],[8,"FnMut"],[8,"Send"],[8,"Default"],[8,"Eq"],[8,"ZeroLamport"],[4,"IncludeSlotInHash"],[3,"VerifyAccountsHashAndLamportsConfig"],[3,"PrunedBankQueueLenReporter"],[3,"SendDroppedBankCallback"],[3,"Bank"],[4,"SnapshotRequestType"],[3,"AbsRequestSender"],[8,"DropCallback"],[3,"Box"],[4,"Ordering"],[3,"BANK_DROP_QUEUE_REPORTER"],[3,"Instant"],[3,"SnapshotRequest"],[3,"PrunedBanksRequestHandler"],[3,"SnapshotRequestHandler"],[15,"u128"],[4,"AccountsPackageType"],[4,"SnapshotError"],[3,"AbsRequestHandlers"],[3,"AccountsBackgroundService"],[6,"Result"],[3,"BankForks"],[3,"RwLock"],[6,"DroppedSlotsSender"],[6,"SnapshotRequestSender"],[3,"SnapshotConfig"],[3,"SendError"],[6,"DroppedSlotsReceiver"],[3,"Stats"],[3,"StatsManager"],[3,"Duration"],[3,"AccountsCache"],[3,"BTreeSet"],[3,"SlotCacheInner"],[3,"CachedAccountInner"],[6,"CachedAccount"],[6,"SlotCache"],[3,"CalcAccountsHashConfig"],[3,"SortedStorages"],[3,"HashStats"],[4,"CalcAccountsHashFlavor"],[4,"AccountsHashVerificationError"],[4,"LoadedAccountAccessor"],[4,"MatchAccountOwnerError"],[3,"BankHashStats"],[3,"StoreAccountsTiming"],[3,"ShrinkStatsSub"],[3,"AliveAccounts"],[3,"ShrinkCollectAliveSeparatedByRefs"],[3,"RecycleStores"],[3,"AccountsToCombine"],[3,"CurrentAncientAppendVec"],[15,"i64"],[3,"EpochSchedule"],[3,"Receiver"],[3,"AncientSlotInfos"],[3,"AccountsDeltaHash"],[4,"CalcAccountsHashDataSource"],[4,"LoadedAccount"],[3,"AtomicU64"],[8,"Clone"],[4,"CreateAncientStorage"],[4,"LoadZeroLamports"],[3,"FillerAccountsConfig"],[3,"ScanState"],[3,"PackedAncientStorageTuning"],[3,"Path"],[3,"AncientSlotPubkeys"],[3,"CleanKeyTimings"],[3,"IndexGenerationInfo"],[3,"SlotIndexGenerationInfo"],[3,"GenerateIndexTimings"],[3,"StorageSizeAndCount"],[3,"RemoveUnrootedSlotsSynchronization"],[3,"AccountsStats"],[3,"PurgeStats"],[3,"SplitAncientStorages"],[3,"FlushStats"],[3,"LatestAccountsIndexRootsStats"],[3,"CleanAccountsStats"],[3,"ShrinkAncientStats"],[3,"ShrinkStats"],[3,"AccountsIndex"],[4,"__Field"],[3,"__FieldVisitor"],[3,"__Visitor"],[3,"WriteAncientAccounts"],[3,"Error"],[4,"StoreTo"],[3,"AncientSlotPubkeysInner"],[8,"ShrinkCollectRefs"],[3,"ShrinkCollect"],[3,"GenesisConfig"],[3,"IndexAccountMapEntry"],[6,"BinnedHashData"],[3,"CacheHashData"],[3,"Range"],[15,"u32"],[6,"Result"],[3,"GetUniqueAccountsResult"],[8,"Hasher"],[3,"Iter"],[3,"LoadAccountsIndexForShrink"],[3,"AccountsToStore"],[3,"MultiThreadProgress"],[4,"AccountsFile"],[3,"GeyserPluginNotifyAtSnapshotRestoreStats"],[8,"IntoIterator"],[4,"ScanStorageResult"],[8,"AppendVecScan"],[3,"CacheHashDataFile"],[15,"f64"],[3,"SerdeAccountsDeltaHash"],[3,"SerdeAccountsHash"],[3,"SerdeIncrementalAccountsHash"],[3,"DashMap"],[4,"StoreReclaims"],[4,"StorageSelector"],[3,"AccountsIndexRootsStats"],[4,"UpsertReclaim"],[6,"SlotList"],[3,"Mutex"],[3,"PackedAncientStorage"],[4,"ZeroLamportAccounts"],[3,"AccountsFileIter"],[8,"Display"],[3,"String"],[8,"AsRef"],[4,"AccountsHashEnum"],[3,"CalculateHashIntermediate"],[3,"AccountsHash"],[3,"IncrementalAccountsHash"],[3,"AccountHashesFile"],[3,"AccountsHasher"],[3,"CumulativeOffset"],[3,"CumulativeOffsets"],[3,"CumulativeHashesFromFiles"],[8,"ExtractSliceFromRawData"],[3,"MmapAccountHashesFile"],[6,"SortedDataByPubkey"],[8,"IndexValue"],[8,"DiskIndexValue"],[8,"From"],[8,"Into"],[3,"AccountMapEntryInner"],[6,"Age"],[3,"BucketMapHolder"],[3,"AccountsIndexConfig"],[3,"AccountsIndexIterator"],[4,"Bound"],[4,"AccountIndex"],[3,"AccountSecondaryIndexesIncludeExclude"],[4,"IndexLimitMb"],[4,"AccountsIndexScanResult"],[3,"AccountMapEntryMeta"],[3,"RootsTracker"],[3,"ScanSlotTracker"],[4,"ScanTypes"],[4,"ScanError"],[8,"SecondaryIndexEntry"],[3,"SecondaryIndex"],[4,"AccountIndexGetResult"],[3,"ReadAccountMapEntry"],[6,"AccountMap"],[8,"Hash"],[8,"Sized"],[8,"BuildHasher"],[3,"RollingBitField"],[6,"SlotSlice"],[4,"PreAllocatedAccountMapEntry"],[3,"BTreeMap"],[6,"RefCount"],[3,"Demand"],[8,"Contains"],[4,"Startup"],[8,"FnOnce"],[3,"RwLockReadGuard"],[3,"ReadAccountMapEntryBuilder"],[3,"ReadAccountMapEntryAsyncBuilder"],[3,"ReadAccountMapEntryAsyncSendBuilder"],[3,"Heads"],[3,"ReadAccountMapEntryTryBuilder"],[3,"ReadAccountMapEntryAsyncTryBuilder"],[3,"ReadAccountMapEntryAsyncSendTryBuilder"],[3,"BgThreads"],[3,"AccountsIndexStorage"],[3,"ActiveStats"],[4,"ActiveStatItem"],[3,"ActiveStatGuard"],[3,"NonZeroU64"],[3,"SlotInfo"],[3,"AppendVec"],[3,"AppendVecAccountsIter"],[15,"u8"],[3,"AppendVecStoredAccountMeta"],[3,"APPEND_VEC_MMAPPED_FILES_OPEN"],[3,"TempFile"],[8,"RewardCalcTracer"],[3,"LoadVoteAndStakeAccountsResult"],[3,"NewBankOptions"],[3,"NoncePartial"],[3,"NonceFull"],[3,"TotalAccountsStats"],[3,"SquashTiming"],[6,"ProcessInstructionWithContext"],[4,"ApplyFeatureActivationsCaller"],[3,"ComputeBudget"],[3,"PrevEpochInflationRewards"],[3,"VoteWithStakeDelegations"],[3,"StakeHistory"],[3,"RewardsMetrics"],[3,"PointValue"],[3,"Clock"],[4,"RewardType"],[3,"BankIncrementalSnapshotPersistence"],[3,"TransactionExecutionDetails"],[4,"TransactionExecutionResult"],[4,"DurableNonceFee"],[3,"InnerInstruction"],[3,"TransactionLogInfo"],[3,"BankFieldsToDeserialize"],[3,"RewardInfo"],[3,"BuiltinPrograms"],[3,"TransactionBatch"],[6,"TransactionBalances"],[3,"RentDebits"],[3,"CollectRentFromAccountsInfo"],[3,"RentMetrics"],[3,"RangeInclusive"],[3,"CommitTransactionCounts"],[3,"ExecuteTimings"],[3,"TransactionResults"],[4,"TransactionLogCollectorFilter"],[3,"TransactionLogCollectorConfig"],[3,"TransactionLogCollector"],[3,"OptionalDropCallback"],[3,"BankTestConfig"],[3,"CollectRentInPartitionInfo"],[4,"LamportsError"],[4,"__Field"],[4,"__Field"],[4,"__Field"],[6,"VoteAccountsHashMap"],[6,"SlotIndex"],[3,"EpochAccountsHash"],[3,"EpochStakes"],[3,"NodeVoteAccounts"],[3,"BankRc"],[3,"TransactionExecutorCache"],[3,"RefCell"],[3,"Rc"],[3,"__FieldVisitor"],[3,"__Visitor"],[3,"__FieldVisitor"],[3,"__Visitor"],[3,"__FieldVisitor"],[3,"__Visitor"],[3,"Delegation"],[3,"StakeAccount"],[3,"Stakes"],[3,"Builtins"],[3,"BankFieldsToSerialize"],[4,"RewardCalculationEvent"],[3,"DeserializableVersionedBank"],[3,"VersionedTransaction"],[6,"UnixTimestamp"],[3,"AccountKeys"],[3,"EpochInfo"],[3,"FeeRateGovernor"],[6,"SlotCount"],[3,"Signature"],[3,"SlotHistory"],[3,"SnapshotHash"],[3,"DashSet"],[3,"StakeReward"],[3,"SysvarCache"],[3,"MaxAllowableDrift"],[3,"TransactionAccountStateInfo"],[3,"VoteAccount"],[3,"HardForks"],[3,"Inflation"],[6,"InheritableAccountFields"],[6,"InnerInstructionsList"],[6,"InstalledSchedulerBox"],[6,"BankStatusCache"],[4,"AddressLoaderError"],[3,"LoadAndExecuteTransactionsOutput"],[3,"TransactionBalancesSet"],[3,"RuntimeConfig"],[6,"PartitionsPerCycle"],[3,"Transaction"],[3,"CostTracker"],[6,"LockResult"],[8,"Sysvar"],[8,"SysvarId"],[3,"TransactionSimulationResult"],[3,"Keypair"],[3,"VerifyAccountsHashConfig"],[4,"TransactionVerificationMode"],[6,"ResultWithTimings"],[4,"WaitReason"],[3,"RwLockWriteGuard"],[3,"NewBankTimings"],[3,"NewEpochTimings"],[3,"BlockTimestamp"],[3,"BankClient"],[6,"Result"],[3,"Account"],[3,"CommitmentConfig"],[3,"FeeCalculator"],[3,"Message"],[3,"Instruction"],[8,"Signers"],[3,"BankCreationFreezingProgress"],[3,"SetRootMetrics"],[3,"SetRootTimings"],[3,"ReadOnlyAtomicSlot"],[6,"InstalledSchedulerPoolArc"],[4,"BlockRelation"],[6,"ReplayVoteSender"],[3,"BUILT_IN_INSTRUCTION_COSTS"],[3,"HashAge"],[4,"__Field"],[4,"__Field"],[3,"__FieldVisitor"],[3,"__Visitor"],[3,"__FieldVisitor"],[3,"__Visitor"],[3,"InMemAccountsIndex"],[3,"BucketMapHolderStats"],[15,"f32"],[3,"BucketMapHeldInMemStats"],[4,"BuiltinFeatureTransition"],[3,"Builtin"],[4,"BuiltinAction"],[3,"Header"],[6,"EntryType"],[3,"MmapMut"],[3,"CacheHashDataStats"],[6,"SavedTypeSlice"],[3,"BlockCommitmentCache"],[3,"BlockCommitment"],[3,"CommitmentSlots"],[4,"__Field"],[3,"__FieldVisitor"],[3,"__Visitor"],[6,"BlockCommitmentArray"],[4,"CommitmentLevel"],[4,"SystemInstruction"],[3,"CompiledInstruction"],[3,"TransactionCost"],[4,"CostTrackerError"],[3,"CalculationInfo"],[3,"__Visitor"],[4,"State"],[3,"Manager"],[4,"__Field"],[4,"__Field"],[3,"__DeserializeWith"],[3,"__DeserializeWith"],[6,"EpochAuthorizedVoters"],[3,"__FieldVisitor"],[3,"__Visitor"],[3,"__FieldVisitor"],[3,"__Visitor"],[4,"StakesEnum"],[6,"NodeIdToVoteAccounts"],[3,"__SerializeWith"],[3,"GenesisConfigInfo"],[3,"ValidatorVoteKeypairs"],[6,"Result"],[4,"UnpackPath"],[4,"UnpackError"],[4,"EntryType"],[3,"ParallelSelector"],[8,"Error"],[8,"Read"],[3,"Archive"],[3,"Sender"],[6,"UnpackedAppendVecMap"],[3,"EvictionsGuard"],[3,"StartupInfoDuplicates"],[3,"StartupInfo"],[3,"FlushScanResult"],[3,"FlushGuard"],[3,"PossibleEvictions"],[4,"InsertNewEntryResults"],[3,"WaitableCondvar"],[4,"Entry"],[3,"Measure"],[3,"BankWithScheduler"],[3,"SchedulingContext"],[3,"InstalledSchedulerBoxInBank"],[6,"SchedulerId"],[4,"SchedulingMode"],[8,"Serialize"],[8,"Client"],[3,"MessageProcessor"],[3,"ProcessedMessageInfo"],[4,"__Field"],[3,"__FieldVisitor"],[3,"__Visitor"],[3,"LogCollector"],[4,"TransactionError"],[3,"NonCirculatingSupply"],[3,"BorrowedAccount"],[3,"InvokeContext"],[4,"InstructionError"],[3,"InstructionContext"],[3,"PrioritizationFeeMetrics"],[3,"PrioritizationFee"],[4,"PrioritizationFeeError"],[3,"PrioritizationFeeCacheMetrics"],[3,"PrioritizationFeeCache"],[3,"LruCache"],[4,"CacheServiceUpdate"],[3,"PubkeyBinCalculator24"],[3,"ReadOnlyAccountsCache"],[3,"ReadOnlyAccountCacheEntry"],[3,"CollectedInfo"],[4,"RentResult"],[4,"__Field"],[3,"__FieldVisitor"],[3,"__Visitor"],[4,"RentDue"],[3,"RentDebit"],[3,"RentPayingAccountsByPartition"],[3,"EMPTY_HASHSET"],[3,"RootBankCache"],[3,"SecondaryIndexStats"],[3,"DashMapSecondaryIndexEntry"],[3,"RwLockSecondaryIndexEntry"],[8,"PartialEq"],[8,"Ord"],[3,"HierarchicalOrderedMap"],[3,"SecondaryIndexLargestKeys"],[4,"SerdeStyle"],[3,"SnapshotStreams"],[3,"StorageAndNextAppendVecId"],[6,"Error"],[8,"Write"],[3,"BufWriter"],[3,"AccountsDbFields"],[3,"BankHashInfo"],[3,"ReconstructedAccountsDbInfo"],[3,"SnapshotBankFields"],[3,"SnapshotAccountsDbFields"],[8,"Deserialize"],[3,"__DeserializeWith"],[3,"__DeserializeWith"],[4,"__Field"],[3,"BufReader"],[8,"DeserializeOwned"],[6,"Result"],[3,"__Visitor"],[3,"__FieldVisitor"],[3,"__Visitor"],[8,"SerializableStorage"],[6,"AtomicAppendVecId"],[4,"ErrorKind"],[8,"TypeContext"],[3,"SerializableBankAndStorage"],[3,"SerializableAccountsDb"],[3,"SerializableAccountStorageEntry"],[3,"UnusedAccounts"],[4,"__Field"],[4,"__Field"],[3,"Context"],[3,"__FieldVisitor"],[3,"__Visitor"],[3,"__FieldVisitor"],[3,"__Visitor"],[3,"SerializableVersionedBank"],[3,"__SerializeWith"],[4,"__Field"],[3,"__FieldVisitor"],[3,"__Visitor"],[3,"__Visitor"],[3,"__Visitor"],[3,"__Visitor"],[3,"SharedBufferReader"],[3,"SharedBufferInternal"],[3,"SharedBufferBgReader"],[3,"SharedBuffer"],[4,"ArchiveFormat"],[3,"IncrementalSnapshotArchiveInfo"],[3,"SnapshotArchiveInfo"],[3,"FullSnapshotArchiveInfo"],[6,"Result"],[4,"SnapshotUsage"],[3,"StartingSnapshotHashes"],[3,"FullSnapshotHash"],[3,"IncrementalSnapshotHash"],[3,"SnapshotMinimizer"],[3,"SupplementalSnapshotInfo"],[3,"AccountsPackage"],[4,"SnapshotType"],[3,"SnapshotPackage"],[3,"BankSnapshotInfo"],[4,"SnapshotVersion"],[3,"Regex"],[6,"BankSlotDelta"],[3,"UnpackedSnapshotsDirAndVersion"],[3,"File"],[4,"BankSnapshotType"],[4,"SnapshotFrom"],[4,"VerifyBank"],[3,"BankFromArchiveTimings"],[3,"BankFromDirTimings"],[8,"Copy"],[3,"SnapshotRootPaths"],[4,"VerifySlotDeltasError"],[3,"VerifySlotDeltasStructuralInfo"],[3,"UnarchivedSnapshot"],[4,"SnapshotNewFromDirError"],[3,"JoinHandle"],[4,"ParseError"],[3,"SnapshotStorageRebuilder"],[3,"VERSION_FILE_REGEX"],[3,"BANK_FIELDS_FILE_REGEX"],[3,"STORAGE_FILE_REGEX"],[4,"SnapshotFileKind"],[3,"RebuiltSnapshotStorage"],[3,"SortedStoragesIter"],[4,"Error"],[4,"StakeState"],[3,"__Visitor"],[3,"StakesCache"],[4,"InvalidCacheEntryReason"],[4,"__Field"],[3,"__FieldVisitor"],[3,"__Visitor"],[4,"Error"],[3,"HashMap"],[3,"VoteAccounts"],[3,"STATIC_IDS"],[3,"StatusCache"],[6,"SlotDelta"],[3,"StorableAccountsMovingSlots"],[3,"StorableAccountsBySlot"],[3,"Address"],[4,"SystemAccountKind"],[4,"Cow"],[3,"TransactionPriorityDetails"],[3,"VerifyAccountsHashInBackground"],[3,"VoteAccountInner"],[4,"Error"],[3,"VoteState"],[6,"ParsedVote"],[4,"VoteTransaction"],[3,"Vote"],[3,"VoteStateUpdate"],[13,"RentPaying"],[3,"StoreUsageInfo"],[8,"Versioned"],[13,"TotalSpace"],[13,"IndividualStore"],[8,"IsCached"],[13,"SlotRemoved"],[3,"BorrowedFields"],[3,"BorrowedMutFields"],[8,"AccountsUpdateNotifierInterface"],[8,"NonceInfo"],[13,"Executed"],[13,"RemoveOrRetain"],[13,"Add"],[3,"CostModel"],[3,"Account"],[8,"GenericTokenAccount"],[3,"Account"],[8,"InstalledScheduler"],[8,"InstalledSchedulerPool"],[13,"TransactionUpdate"],[13,"BankFrozen"],[13,"CollectRent"],[8,"SnapshotArchiveInfoGetter"],[8,"GetTransactionPriorityDetails"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
